
blinking_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080053a8  080053a8  000063a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080053ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080053bc  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080053bc  000070c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ea27  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c7a  00000000  00000000  00015a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a40  00000000  00000000  000176e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007e3  00000000  00000000  00018120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002eb79  00000000  00000000  00018903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e062  00000000  00000000  0004747c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001326e1  00000000  00000000  000554de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00187bbf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029f0  00000000  00000000  00187c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0018a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800534c 	.word	0x0800534c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800534c 	.word	0x0800534c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fb4c 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8d2 	bl	8000790 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f87c 	bl	80006e8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80005f0:	f000 f8c6 	bl	8000780 <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	4808      	ldr	r0, [pc, #32]	@ (800061c <main+0x40>)
 80005fa:	f000 fe89 	bl	8001310 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000602:	f000 fbcd 	bl	8000da0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2101      	movs	r1, #1
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <main+0x40>)
 800060c:	f000 fe80 	bl	8001310 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000614:	f000 fbc4 	bl	8000da0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000618:	bf00      	nop
 800061a:	e7eb      	b.n	80005f4 <main+0x18>
 800061c:	58020400 	.word	0x58020400

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f004 fe60 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fe5a 	bl	80052f4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <SystemClock_Config+0xc0>)
 8000642:	f04f 32ff 	mov.w	r2, #4294967295
 8000646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800064a:	2004      	movs	r0, #4
 800064c:	f000 fe7a 	bl	8001344 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <SystemClock_Config+0xc4>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <SystemClock_Config+0xc4>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <SystemClock_Config+0xc4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066c:	bf00      	nop
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <SystemClock_Config+0xc4>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800067a:	d1f8      	bne.n	800066e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800067c:	2322      	movs	r3, #34	@ 0x22
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000680:	2301      	movs	r3, #1
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000684:	2340      	movs	r3, #64	@ 0x40
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	4618      	mov	r0, r3
 8000696:	f000 feaf 	bl	80013f8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f990 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	233f      	movs	r3, #63	@ 0x3f
 80006a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2101      	movs	r1, #1
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fac7 	bl	8001c5c <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006d4:	f000 f976 	bl	80009c4 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3770      	adds	r7, #112	@ 0x70
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024400 	.word	0x58024400
 80006e4:	58024800 	.word	0x58024800

080006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 80006ee:	4a23      	ldr	r2, [pc, #140]	@ (800077c <MX_USART3_UART_Init+0x94>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000732:	f003 fbff 	bl	8003f34 <HAL_UART_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f942 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000744:	f004 fd0b 	bl	800515e <HAL_UARTEx_SetTxFifoThreshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 f939 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4808      	ldr	r0, [pc, #32]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000756:	f004 fd40 	bl	80051da <HAL_UARTEx_SetRxFifoThreshold>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 f930 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_USART3_UART_Init+0x90>)
 8000766:	f004 fcc1 	bl	80050ec <HAL_UARTEx_DisableFifoMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f928 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2400002c 	.word	0x2400002c
 800077c:	40004800 	.word	0x40004800

08000780 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	@ 0x38
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b80      	ldr	r3, [pc, #512]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007ac:	4a7e      	ldr	r2, [pc, #504]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007b6:	4b7c      	ldr	r3, [pc, #496]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c4:	4b78      	ldr	r3, [pc, #480]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007ca:	4a77      	ldr	r2, [pc, #476]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007d4:	4b74      	ldr	r3, [pc, #464]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	4b71      	ldr	r3, [pc, #452]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e8:	4a6f      	ldr	r2, [pc, #444]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007f2:	4b6d      	ldr	r3, [pc, #436]	@ (80009a8 <MX_GPIO_Init+0x218>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b69      	ldr	r3, [pc, #420]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000806:	4a68      	ldr	r2, [pc, #416]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000810:	4b65      	ldr	r3, [pc, #404]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b62      	ldr	r3, [pc, #392]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000824:	4a60      	ldr	r2, [pc, #384]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800082e:	4b5e      	ldr	r3, [pc, #376]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083c:	4b5a      	ldr	r3, [pc, #360]	@ (80009a8 <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000842:	4a59      	ldr	r2, [pc, #356]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800084c:	4b56      	ldr	r3, [pc, #344]	@ (80009a8 <MX_GPIO_Init+0x218>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b53      	ldr	r3, [pc, #332]	@ (80009a8 <MX_GPIO_Init+0x218>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000860:	4a51      	ldr	r2, [pc, #324]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800086a:	4b4f      	ldr	r3, [pc, #316]	@ (80009a8 <MX_GPIO_Init+0x218>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000878:	4b4b      	ldr	r3, [pc, #300]	@ (80009a8 <MX_GPIO_Init+0x218>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800087e:	4a4a      	ldr	r2, [pc, #296]	@ (80009a8 <MX_GPIO_Init+0x218>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000888:	4b47      	ldr	r3, [pc, #284]	@ (80009a8 <MX_GPIO_Init+0x218>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089c:	4843      	ldr	r0, [pc, #268]	@ (80009ac <MX_GPIO_Init+0x21c>)
 800089e:	f000 fd37 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008a8:	4841      	ldr	r0, [pc, #260]	@ (80009b0 <MX_GPIO_Init+0x220>)
 80008aa:	f000 fd31 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2102      	movs	r1, #2
 80008b2:	4840      	ldr	r0, [pc, #256]	@ (80009b4 <MX_GPIO_Init+0x224>)
 80008b4:	f000 fd2c 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	483a      	ldr	r0, [pc, #232]	@ (80009b8 <MX_GPIO_Init+0x228>)
 80008ce:	f000 fb6f 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4830      	ldr	r0, [pc, #192]	@ (80009ac <MX_GPIO_Init+0x21c>)
 80008ec:	f000 fb60 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008f0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4829      	ldr	r0, [pc, #164]	@ (80009b0 <MX_GPIO_Init+0x220>)
 800090a:	f000 fb51 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800090e:	2380      	movs	r3, #128	@ 0x80
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4826      	ldr	r0, [pc, #152]	@ (80009bc <MX_GPIO_Init+0x22c>)
 8000924:	f000 fb44 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	4820      	ldr	r0, [pc, #128]	@ (80009c0 <MX_GPIO_Init+0x230>)
 800093e:	f000 fb37 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000954:	230a      	movs	r3, #10
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <MX_GPIO_Init+0x230>)
 8000960:	f000 fb26 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000964:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <MX_GPIO_Init+0x230>)
 800097e:	f000 fb17 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000982:	2302      	movs	r3, #2
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <MX_GPIO_Init+0x224>)
 800099a:	f000 fb09 	bl	8000fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3738      	adds	r7, #56	@ 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	58024400 	.word	0x58024400
 80009ac:	58021400 	.word	0x58021400
 80009b0:	58020400 	.word	0x58020400
 80009b4:	58021000 	.word	0x58021000
 80009b8:	58020800 	.word	0x58020800
 80009bc:	58021800 	.word	0x58021800
 80009c0:	58020000 	.word	0x58020000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_MspInit+0x30>)
 80009d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_MspInit+0x30>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_MspInit+0x30>)
 80009e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	58024400 	.word	0x58024400

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0ba      	sub	sp, #232	@ 0xe8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	22c0      	movs	r2, #192	@ 0xc0
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 fc65 	bl	80052f4 <memset>
  if(huart->Instance==USART3)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <HAL_UART_MspInit+0xc8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d146      	bne.n	8000ac2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a34:	f04f 0202 	mov.w	r2, #2
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fc92 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a56:	f7ff ffb5 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a66:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_UART_MspInit+0xcc>)
 8000a8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <HAL_UART_MspInit+0xd0>)
 8000abe:	f000 fa77 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	37e8      	adds	r7, #232	@ 0xe8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004800 	.word	0x40004800
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	58020c00 	.word	0x58020c00

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f917 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <SystemInit+0xd0>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b42:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <SystemInit+0xd0>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <SystemInit+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d807      	bhi.n	8000b68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <SystemInit+0xd4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 030f 	bic.w	r3, r3, #15
 8000b60:	4a2a      	ldr	r2, [pc, #168]	@ (8000c0c <SystemInit+0xd4>)
 8000b62:	f043 0303 	orr.w	r3, r3, #3
 8000b66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <SystemInit+0xd8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <SystemInit+0xd8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <SystemInit+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <SystemInit+0xd8>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4924      	ldr	r1, [pc, #144]	@ (8000c10 <SystemInit+0xd8>)
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <SystemInit+0xdc>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <SystemInit+0xd4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <SystemInit+0xd4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 030f 	bic.w	r3, r3, #15
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <SystemInit+0xd4>)
 8000b9c:	f043 0303 	orr.w	r3, r3, #3
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <SystemInit+0xd8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <SystemInit+0xd8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <SystemInit+0xd8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <SystemInit+0xd8>)
 8000bb6:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <SystemInit+0xe0>)
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <SystemInit+0xd8>)
 8000bbc:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <SystemInit+0xe4>)
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <SystemInit+0xd8>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <SystemInit+0xe8>)
 8000bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <SystemInit+0xd8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <SystemInit+0xd8>)
 8000bce:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <SystemInit+0xe8>)
 8000bd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <SystemInit+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <SystemInit+0xd8>)
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <SystemInit+0xe8>)
 8000bdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <SystemInit+0xd8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <SystemInit+0xd8>)
 8000bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <SystemInit+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <SystemInit+0xec>)
 8000bf8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	52002000 	.word	0x52002000
 8000c10:	58024400 	.word	0x58024400
 8000c14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c18:	02020200 	.word	0x02020200
 8000c1c:	01ff0000 	.word	0x01ff0000
 8000c20:	01010280 	.word	0x01010280
 8000c24:	52004000 	.word	0x52004000

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c2c:	f7ff ff84 	bl	8000b38 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	@ (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 fb55 	bl	8005304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcbf 	bl	80005dc <main>
  bx  lr
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c68:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c6c:	080053ac 	.word	0x080053ac
  ldr r2, =_sbss
 8000c70:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c74:	240000c4 	.word	0x240000c4

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 f962 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c88:	f001 f99e 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_Init+0x68>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	4913      	ldr	r1, [pc, #76]	@ (8000ce8 <HAL_Init+0x6c>)
 8000c9a:	5ccb      	ldrb	r3, [r1, r3]
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <HAL_Init+0x6c>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <HAL_Init+0x70>)
 8000cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <HAL_Init+0x74>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f814 	bl	8000cf4 <HAL_InitTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e002      	b.n	8000cdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd6:	f7ff fe7b 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	08005364 	.word	0x08005364
 8000cec:	24000004 	.word	0x24000004
 8000cf0:	24000000 	.word	0x24000000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_InitTick+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e021      	b.n	8000d4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_InitTick+0x64>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_InitTick+0x60>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f939 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f911 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <HAL_InitTick+0x68>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2400000c 	.word	0x2400000c
 8000d58:	24000000 	.word	0x24000000
 8000d5c:	24000008 	.word	0x24000008

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	240000c0 	.word	0x240000c0

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	240000c0 	.word	0x240000c0

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2400000c 	.word	0x2400000c

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	05fa0000 	.word	0x05fa0000

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff47 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff5e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff90 	bl	8000ea0 <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5f 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffb2 	bl	8000f08 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fbe:	4b89      	ldr	r3, [pc, #548]	@ (80011e4 <HAL_GPIO_Init+0x234>)
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fc2:	e194      	b.n	80012ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8186 	beq.w	80012e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x44>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	69b9      	ldr	r1, [r7, #24]
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80e0 	beq.w	80012e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_GPIO_Init+0x238>)
 800112a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800112e:	4a2e      	ldr	r2, [pc, #184]	@ (80011e8 <HAL_GPIO_Init+0x238>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <HAL_GPIO_Init+0x238>)
 800113a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a29      	ldr	r2, [pc, #164]	@ (80011ec <HAL_GPIO_Init+0x23c>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a20      	ldr	r2, [pc, #128]	@ (80011f0 <HAL_GPIO_Init+0x240>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d052      	beq.n	8001218 <HAL_GPIO_Init+0x268>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <HAL_GPIO_Init+0x244>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d031      	beq.n	80011de <HAL_GPIO_Init+0x22e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1e      	ldr	r2, [pc, #120]	@ (80011f8 <HAL_GPIO_Init+0x248>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x22a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_GPIO_Init+0x24c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_GPIO_Init+0x250>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <HAL_GPIO_Init+0x254>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1a      	ldr	r2, [pc, #104]	@ (8001208 <HAL_GPIO_Init+0x258>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_GPIO_Init+0x25c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x216>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a18      	ldr	r2, [pc, #96]	@ (8001210 <HAL_GPIO_Init+0x260>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x212>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_GPIO_Init+0x264>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x20e>
 80011ba:	2309      	movs	r3, #9
 80011bc:	e02d      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011be:	230a      	movs	r3, #10
 80011c0:	e02b      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011c2:	2308      	movs	r3, #8
 80011c4:	e029      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e027      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e025      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e023      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e021      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e01f      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011da:	2302      	movs	r3, #2
 80011dc:	e01d      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e01b      	b.n	800121a <HAL_GPIO_Init+0x26a>
 80011e2:	bf00      	nop
 80011e4:	58000080 	.word	0x58000080
 80011e8:	58024400 	.word	0x58024400
 80011ec:	58000400 	.word	0x58000400
 80011f0:	58020000 	.word	0x58020000
 80011f4:	58020400 	.word	0x58020400
 80011f8:	58020800 	.word	0x58020800
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	58021000 	.word	0x58021000
 8001204:	58021400 	.word	0x58021400
 8001208:	58021800 	.word	0x58021800
 800120c:	58021c00 	.word	0x58021c00
 8001210:	58022000 	.word	0x58022000
 8001214:	58022400 	.word	0x58022400
 8001218:	2300      	movs	r3, #0
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122a:	4938      	ldr	r1, [pc, #224]	@ (800130c <HAL_GPIO_Init+0x35c>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800125e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800128c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3301      	adds	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f47f ae63 	bne.w	8000fc4 <HAL_GPIO_Init+0x14>
  }
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3724      	adds	r7, #36	@ 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	58000400 	.word	0x58000400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	2b06      	cmp	r3, #6
 8001356:	d00a      	beq.n	800136e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001358:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e040      	b.n	80013ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e03e      	b.n	80013ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001376:	491f      	ldr	r1, [pc, #124]	@ (80013f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4313      	orrs	r3, r2
 800137c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800137e:	f7ff fd03 	bl	8000d88 <HAL_GetTick>
 8001382:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001384:	e009      	b.n	800139a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001386:	f7ff fcff 	bl	8000d88 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001394:	d901      	bls.n	800139a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e028      	b.n	80013ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800139a:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013a6:	d1ee      	bne.n	8001386 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b1e      	cmp	r3, #30
 80013ac:	d008      	beq.n	80013c0 <HAL_PWREx_ConfigSupply+0x7c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80013b2:	d005      	beq.n	80013c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b1d      	cmp	r3, #29
 80013b8:	d002      	beq.n	80013c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80013be:	d114      	bne.n	80013ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013c0:	f7ff fce2 	bl	8000d88 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013c6:	e009      	b.n	80013dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013c8:	f7ff fcde 	bl	8000d88 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d6:	d901      	bls.n	80013dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e007      	b.n	80013ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e8:	d1ee      	bne.n	80013c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58024800 	.word	0x58024800

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	@ 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	f000 bc1f 	b.w	8001c4a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80b3 	beq.w	8001580 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141a:	4b95      	ldr	r3, [pc, #596]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001424:	4b92      	ldr	r3, [pc, #584]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142c:	2b10      	cmp	r3, #16
 800142e:	d007      	beq.n	8001440 <HAL_RCC_OscConfig+0x48>
 8001430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001432:	2b18      	cmp	r3, #24
 8001434:	d112      	bne.n	800145c <HAL_RCC_OscConfig+0x64>
 8001436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d10d      	bne.n	800145c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4b8b      	ldr	r3, [pc, #556]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8098 	beq.w	800157e <HAL_RCC_OscConfig+0x186>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 8093 	bne.w	800157e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e3f6      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x7c>
 8001466:	4b82      	ldr	r3, [pc, #520]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a81      	ldr	r2, [pc, #516]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e058      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_OscConfig+0xaa>
 800147c:	4b7c      	ldr	r3, [pc, #496]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a7b      	ldr	r2, [pc, #492]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b79      	ldr	r3, [pc, #484]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a78      	ldr	r2, [pc, #480]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800148e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b76      	ldr	r3, [pc, #472]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a75      	ldr	r2, [pc, #468]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e041      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014aa:	d112      	bne.n	80014d2 <HAL_RCC_OscConfig+0xda>
 80014ac:	4b70      	ldr	r3, [pc, #448]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6f      	ldr	r2, [pc, #444]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a69      	ldr	r2, [pc, #420]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e029      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0x10a>
 80014dc:	4b64      	ldr	r3, [pc, #400]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a63      	ldr	r2, [pc, #396]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b61      	ldr	r3, [pc, #388]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a60      	ldr	r2, [pc, #384]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e011      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
 8001502:	4b5b      	ldr	r3, [pc, #364]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a5a      	ldr	r2, [pc, #360]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b58      	ldr	r3, [pc, #352]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a57      	ldr	r2, [pc, #348]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b55      	ldr	r3, [pc, #340]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a54      	ldr	r2, [pc, #336]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001520:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001524:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d013      	beq.n	8001556 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fc2b 	bl	8000d88 <HAL_GetTick>
 8001532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001536:	f7ff fc27 	bl	8000d88 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b64      	cmp	r3, #100	@ 0x64
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e380      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001548:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x13e>
 8001554:	e014      	b.n	8001580 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fc17 	bl	8000d88 <HAL_GetTick>
 800155a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155e:	f7ff fc13 	bl	8000d88 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	@ 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e36c      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001570:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x166>
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 808c 	beq.w	80016a6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001596:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1bc>
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d137      	bne.n	800161a <HAL_RCC_OscConfig+0x222>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d132      	bne.n	800161a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x1d4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e33e      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 0219 	bic.w	r2, r3, #25
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4925      	ldr	r1, [pc, #148]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fbd3 	bl	8000d88 <HAL_GetTick>
 80015e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fbcf 	bl	8000d88 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e328      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4917      	ldr	r1, [pc, #92]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	e045      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d028      	beq.n	8001674 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0219 	bic.w	r2, r3, #25
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4910      	ldr	r1, [pc, #64]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fba8 	bl	8000d88 <HAL_GetTick>
 8001638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fba4 	bl	8000d88 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e2fd      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4901      	ldr	r1, [pc, #4]	@ (8001670 <HAL_RCC_OscConfig+0x278>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	e01a      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ae>
 8001670:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001674:	4b97      	ldr	r3, [pc, #604]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a96      	ldr	r2, [pc, #600]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb82 	bl	8000d88 <HAL_GetTick>
 8001684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fb7e 	bl	8000d88 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e2d7      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169a:	4b8e      	ldr	r3, [pc, #568]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d06a      	beq.n	8001788 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b2:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016bc:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d007      	beq.n	80016d8 <HAL_RCC_OscConfig+0x2e0>
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b18      	cmp	r3, #24
 80016cc:	d11b      	bne.n	8001706 <HAL_RCC_OscConfig+0x30e>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d116      	bne.n	8001706 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016d8:	4b7e      	ldr	r3, [pc, #504]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2f8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	2b80      	cmp	r3, #128	@ 0x80
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e2ac      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016f0:	4b78      	ldr	r3, [pc, #480]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	4975      	ldr	r1, [pc, #468]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001704:	e040      	b.n	8001788 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800170e:	4b71      	ldr	r3, [pc, #452]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a70      	ldr	r2, [pc, #448]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb35 	bl	8000d88 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001722:	f7ff fb31 	bl	8000d88 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e28a      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001734:	4b67      	ldr	r3, [pc, #412]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001740:	4b64      	ldr	r3, [pc, #400]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	4961      	ldr	r1, [pc, #388]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e018      	b.n	8001788 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001756:	4b5f      	ldr	r3, [pc, #380]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5e      	ldr	r2, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800175c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fb11 	bl	8000d88 <HAL_GetTick>
 8001766:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800176a:	f7ff fb0d 	bl	8000d88 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e266      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800177c:	4b55      	ldr	r3, [pc, #340]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d036      	beq.n	8001802 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d019      	beq.n	80017d0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179c:	4b4d      	ldr	r3, [pc, #308]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a0:	4a4c      	ldr	r2, [pc, #304]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff faee 	bl	8000d88 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff faea 	bl	8000d88 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e243      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c2:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x3b8>
 80017ce:	e018      	b.n	8001802 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d4:	4a3f      	ldr	r2, [pc, #252]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fad4 	bl	8000d88 <HAL_GetTick>
 80017e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fad0 	bl	8000d88 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e229      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f6:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80017f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d036      	beq.n	800187c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d019      	beq.n	800184a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001816:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2e      	ldr	r2, [pc, #184]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800181c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001822:	f7ff fab1 	bl	8000d88 <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182a:	f7ff faad 	bl	8000d88 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e206      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x432>
 8001848:	e018      	b.n	800187c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001850:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001854:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001856:	f7ff fa97 	bl	8000d88 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185e:	f7ff fa93 	bl	8000d88 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1ec      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001870:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80af 	beq.w	80019e8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <HAL_RCC_OscConfig+0x4e0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <HAL_RCC_OscConfig+0x4e0>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001896:	f7ff fa77 	bl	8000d88 <HAL_GetTick>
 800189a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189e:	f7ff fa73 	bl	8000d88 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	@ 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1cc      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_RCC_OscConfig+0x4e0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10b      	bne.n	80018dc <HAL_RCC_OscConfig+0x4e4>
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c8:	4a02      	ldr	r2, [pc, #8]	@ (80018d4 <HAL_RCC_OscConfig+0x4dc>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d0:	e05b      	b.n	800198a <HAL_RCC_OscConfig+0x592>
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58024800 	.word	0x58024800
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d112      	bne.n	800190a <HAL_RCC_OscConfig+0x512>
 80018e4:	4b9d      	ldr	r3, [pc, #628]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e8:	4a9c      	ldr	r2, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a99      	ldr	r2, [pc, #612]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80018f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fc:	4b97      	ldr	r3, [pc, #604]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	4a96      	ldr	r2, [pc, #600]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6713      	str	r3, [r2, #112]	@ 0x70
 8001908:	e03f      	b.n	800198a <HAL_RCC_OscConfig+0x592>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x540>
 8001912:	4b92      	ldr	r3, [pc, #584]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a91      	ldr	r2, [pc, #580]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
 800191e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	4a8e      	ldr	r2, [pc, #568]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001928:	6713      	str	r3, [r2, #112]	@ 0x70
 800192a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	4a8b      	ldr	r2, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	@ 0x70
 8001936:	e028      	b.n	800198a <HAL_RCC_OscConfig+0x592>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b85      	cmp	r3, #133	@ 0x85
 800193e:	d112      	bne.n	8001966 <HAL_RCC_OscConfig+0x56e>
 8001940:	4b86      	ldr	r3, [pc, #536]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001944:	4a85      	ldr	r2, [pc, #532]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	@ 0x70
 800194c:	4b83      	ldr	r3, [pc, #524]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	4a82      	ldr	r2, [pc, #520]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001956:	6713      	str	r3, [r2, #112]	@ 0x70
 8001958:	4b80      	ldr	r3, [pc, #512]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	@ 0x70
 8001964:	e011      	b.n	800198a <HAL_RCC_OscConfig+0x592>
 8001966:	4b7d      	ldr	r3, [pc, #500]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	@ 0x70
 8001972:	4b7a      	ldr	r3, [pc, #488]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001976:	4a79      	ldr	r2, [pc, #484]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	@ 0x70
 800197e:	4b77      	ldr	r3, [pc, #476]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	4a76      	ldr	r2, [pc, #472]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001988:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d015      	beq.n	80019be <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff f9f9 	bl	8000d88 <HAL_GetTick>
 8001996:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff f9f5 	bl	8000d88 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e14c      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ee      	beq.n	800199a <HAL_RCC_OscConfig+0x5a2>
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff f9e3 	bl	8000d88 <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff f9df 	bl	8000d88 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e136      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 812b 	beq.w	8001c48 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019f2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019fa:	2b18      	cmp	r3, #24
 80019fc:	f000 80bb 	beq.w	8001b76 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 8095 	bne.w	8001b34 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a53      	ldr	r2, [pc, #332]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f9b7 	bl	8000d88 <HAL_GetTick>
 8001a1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7ff f9b3 	bl	8000d88 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e10c      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a30:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3c:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a40:	4b47      	ldr	r3, [pc, #284]	@ (8001b60 <HAL_RCC_OscConfig+0x768>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	4942      	ldr	r1, [pc, #264]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a64:	3b01      	subs	r3, #1
 8001a66:	025b      	lsls	r3, r3, #9
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a86:	4935      	ldr	r1, [pc, #212]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a8c:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a90:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a9c:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_RCC_OscConfig+0x76c>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aa4:	00d2      	lsls	r2, r2, #3
 8001aa6:	492d      	ldr	r1, [pc, #180]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	f023 020c 	bic.w	r2, r3, #12
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	4928      	ldr	r1, [pc, #160]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001abe:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	f023 0202 	bic.w	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	4924      	ldr	r1, [pc, #144]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ad0:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	4a21      	ldr	r2, [pc, #132]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f93c 	bl	8000d88 <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f938 	bl	8000d88 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e091      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x71c>
 8001b32:	e089      	b.n	8001c48 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_RCC_OscConfig+0x764>)
 8001b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f922 	bl	8000d88 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b46:	e00f      	b.n	8001b68 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f91e 	bl	8000d88 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d908      	bls.n	8001b68 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e077      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
 8001b5a:	bf00      	nop
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	fffffc0c 	.word	0xfffffc0c
 8001b64:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b68:	4b3a      	ldr	r3, [pc, #232]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e9      	bne.n	8001b48 <HAL_RCC_OscConfig+0x750>
 8001b74:	e068      	b.n	8001c48 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b76:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b7c:	4b35      	ldr	r3, [pc, #212]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d031      	beq.n	8001bee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d12a      	bne.n	8001bee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d122      	bne.n	8001bee <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d11a      	bne.n	8001bee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0a5b      	lsrs	r3, r3, #9
 8001bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d111      	bne.n	8001bee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d108      	bne.n	8001bee <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0e1b      	lsrs	r3, r3, #24
 8001be0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e02b      	b.n	8001c4a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf6:	08db      	lsrs	r3, r3, #3
 8001bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bfc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d01f      	beq.n	8001c48 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	4a11      	ldr	r2, [pc, #68]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c14:	f7ff f8b8 	bl	8000d88 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff f8b4 	bl	8000d88 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d0f9      	beq.n	8001c1c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_RCC_OscConfig+0x860>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <HAL_RCC_OscConfig+0x85c>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3730      	adds	r7, #48	@ 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400
 8001c58:	ffff0007 	.word	0xffff0007

08001c5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e19c      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b8a      	ldr	r3, [pc, #552]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b87      	ldr	r3, [pc, #540]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 020f 	bic.w	r2, r3, #15
 8001c86:	4985      	ldr	r1, [pc, #532]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b83      	ldr	r3, [pc, #524]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e184      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d908      	bls.n	8001cce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cbc:	4b78      	ldr	r3, [pc, #480]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	4975      	ldr	r1, [pc, #468]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d010      	beq.n	8001cfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	4b70      	ldr	r3, [pc, #448]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d908      	bls.n	8001cfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	496a      	ldr	r1, [pc, #424]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d908      	bls.n	8001d2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d18:	4b61      	ldr	r3, [pc, #388]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	495e      	ldr	r1, [pc, #376]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d908      	bls.n	8001d58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d46:	4b56      	ldr	r3, [pc, #344]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4953      	ldr	r1, [pc, #332]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d908      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f023 020f 	bic.w	r2, r3, #15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4947      	ldr	r1, [pc, #284]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d055      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d92:	4b43      	ldr	r3, [pc, #268]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4940      	ldr	r1, [pc, #256]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d121      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0f6      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dc4:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d115      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0ea      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ddc:	4b30      	ldr	r3, [pc, #192]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0de      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0d6      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f023 0207 	bic.w	r2, r3, #7
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4925      	ldr	r1, [pc, #148]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0e:	f7fe ffbb 	bl	8000d88 <HAL_GetTick>
 8001e12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e16:	f7fe ffb7 	bl	8000d88 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0be      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d1eb      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d208      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f023 020f 	bic.w	r2, r3, #15
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	490e      	ldr	r1, [pc, #56]	@ (8001ea0 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d214      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 020f 	bic.w	r2, r3, #15
 8001e82:	4906      	ldr	r1, [pc, #24]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <HAL_RCC_ClockConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e086      	b.n	8001faa <HAL_RCC_ClockConfig+0x34e>
 8001e9c:	52002000 	.word	0x52002000
 8001ea0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d208      	bcs.n	8001ed2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	4939      	ldr	r1, [pc, #228]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d208      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eee:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	492e      	ldr	r1, [pc, #184]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d010      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d208      	bcs.n	8001f2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f1c:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4922      	ldr	r1, [pc, #136]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d010      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d208      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4917      	ldr	r1, [pc, #92]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f5c:	f000 f834 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	4912      	ldr	r1, [pc, #72]	@ (8001fb8 <HAL_RCC_ClockConfig+0x35c>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_RCC_ClockConfig+0x35c>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_RCC_ClockConfig+0x360>)
 8001f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f94:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <HAL_RCC_ClockConfig+0x364>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_RCC_ClockConfig+0x368>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fea8 	bl	8000cf4 <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	08005364 	.word	0x08005364
 8001fbc:	24000004 	.word	0x24000004
 8001fc0:	24000000 	.word	0x24000000
 8001fc4:	24000008 	.word	0x24000008

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fce:	4bb3      	ldr	r3, [pc, #716]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fd6:	2b18      	cmp	r3, #24
 8001fd8:	f200 8155 	bhi.w	8002286 <HAL_RCC_GetSysClockFreq+0x2be>
 8001fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08002049 	.word	0x08002049
 8001fe8:	08002287 	.word	0x08002287
 8001fec:	08002287 	.word	0x08002287
 8001ff0:	08002287 	.word	0x08002287
 8001ff4:	08002287 	.word	0x08002287
 8001ff8:	08002287 	.word	0x08002287
 8001ffc:	08002287 	.word	0x08002287
 8002000:	08002287 	.word	0x08002287
 8002004:	0800206f 	.word	0x0800206f
 8002008:	08002287 	.word	0x08002287
 800200c:	08002287 	.word	0x08002287
 8002010:	08002287 	.word	0x08002287
 8002014:	08002287 	.word	0x08002287
 8002018:	08002287 	.word	0x08002287
 800201c:	08002287 	.word	0x08002287
 8002020:	08002287 	.word	0x08002287
 8002024:	08002075 	.word	0x08002075
 8002028:	08002287 	.word	0x08002287
 800202c:	08002287 	.word	0x08002287
 8002030:	08002287 	.word	0x08002287
 8002034:	08002287 	.word	0x08002287
 8002038:	08002287 	.word	0x08002287
 800203c:	08002287 	.word	0x08002287
 8002040:	08002287 	.word	0x08002287
 8002044:	0800207b 	.word	0x0800207b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002048:	4b94      	ldr	r3, [pc, #592]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002054:	4b91      	ldr	r3, [pc, #580]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	4a90      	ldr	r2, [pc, #576]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002066:	e111      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002068:	4b8d      	ldr	r3, [pc, #564]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800206a:	61bb      	str	r3, [r7, #24]
      break;
 800206c:	e10e      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800206e:	4b8d      	ldr	r3, [pc, #564]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002070:	61bb      	str	r3, [r7, #24]
      break;
 8002072:	e10b      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002074:	4b8c      	ldr	r3, [pc, #560]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002076:	61bb      	str	r3, [r7, #24]
      break;
 8002078:	e108      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800207a:	4b88      	ldr	r3, [pc, #544]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002084:	4b85      	ldr	r3, [pc, #532]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800208e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002090:	4b82      	ldr	r3, [pc, #520]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800209a:	4b80      	ldr	r3, [pc, #512]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209e:	08db      	lsrs	r3, r3, #3
 80020a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80e1 	beq.w	8002280 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	f000 8083 	beq.w	80021cc <HAL_RCC_GetSysClockFreq+0x204>
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f200 80a1 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x248>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x114>
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d056      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020da:	e099      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020dc:	4b6f      	ldr	r3, [pc, #444]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02d      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020e8:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	4a6b      	ldr	r2, [pc, #428]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002112:	4b62      	ldr	r3, [pc, #392]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002122:	ed97 6a02 	vldr	s12, [r7, #8]
 8002126:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80022ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002142:	e087      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80022b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b51      	ldr	r3, [pc, #324]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80022ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002186:	e065      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80022b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219a:	4b40      	ldr	r3, [pc, #256]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80022ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ca:	e043      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80022b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80022ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800220e:	e021      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80022b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800221e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002232:	ed97 6a02 	vldr	s12, [r7, #8]
 8002236:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80022ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800223a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002252:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	0a5b      	lsrs	r3, r3, #9
 800225a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800225e:	3301      	adds	r3, #1
 8002260:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800226c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002278:	ee17 3a90 	vmov	r3, s15
 800227c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800227e:	e005      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
      break;
 8002284:	e002      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002286:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002288:	61bb      	str	r3, [r7, #24]
      break;
 800228a:	bf00      	nop
  }

  return sysclockfreq;
 800228c:	69bb      	ldr	r3, [r7, #24]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	58024400 	.word	0x58024400
 80022a0:	03d09000 	.word	0x03d09000
 80022a4:	003d0900 	.word	0x003d0900
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	46000000 	.word	0x46000000
 80022b0:	4c742400 	.word	0x4c742400
 80022b4:	4a742400 	.word	0x4a742400
 80022b8:	4af42400 	.word	0x4af42400

080022bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80022c2:	f7ff fe81 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_GetHCLKFreq+0x50>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490f      	ldr	r1, [pc, #60]	@ (8002310 <HAL_RCC_GetHCLKFreq+0x54>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022e0:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_RCC_GetHCLKFreq+0x50>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	4a09      	ldr	r2, [pc, #36]	@ (8002310 <HAL_RCC_GetHCLKFreq+0x54>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <HAL_RCC_GetHCLKFreq+0x58>)
 80022f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022fa:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002300:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <HAL_RCC_GetHCLKFreq+0x58>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	58024400 	.word	0x58024400
 8002310:	08005364 	.word	0x08005364
 8002314:	24000004 	.word	0x24000004
 8002318:	24000000 	.word	0x24000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002320:	f7ff ffcc 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4904      	ldr	r1, [pc, #16]	@ (8002344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	58024400 	.word	0x58024400
 8002344:	08005364 	.word	0x08005364

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800234c:	f7ff ffb6 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4904      	ldr	r1, [pc, #16]	@ (8002370 <HAL_RCC_GetPCLK2Freq+0x28>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	58024400 	.word	0x58024400
 8002370:	08005364 	.word	0x08005364

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002378:	b0c8      	sub	sp, #288	@ 0x120
 800237a:	af00      	add	r7, sp, #0
 800237c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002380:	2300      	movs	r3, #0
 8002382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002386:	2300      	movs	r3, #0
 8002388:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800238c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002398:	2500      	movs	r5, #0
 800239a:	ea54 0305 	orrs.w	r3, r4, r5
 800239e:	d049      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023aa:	d02f      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023b0:	d828      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023b6:	d01a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023bc:	d822      	bhi.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023c6:	d007      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023c8:	e01c      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ca:	4ba7      	ldr	r3, [pc, #668]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	4aa6      	ldr	r2, [pc, #664]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023d6:	e01a      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023dc:	3308      	adds	r3, #8
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 fc43 	bl	8003c6c <RCCEx_PLL2_Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023ec:	e00f      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80023f2:	3328      	adds	r3, #40	@ 0x28
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fcea 	bl	8003dd0 <RCCEx_PLL3_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002402:	e004      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800240a:	e000      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800240c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800240e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002416:	4b94      	ldr	r3, [pc, #592]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800241e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002424:	4a90      	ldr	r2, [pc, #576]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002426:	430b      	orrs	r3, r1
 8002428:	6513      	str	r3, [r2, #80]	@ 0x50
 800242a:	e003      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002440:	f04f 0900 	mov.w	r9, #0
 8002444:	ea58 0309 	orrs.w	r3, r8, r9
 8002448:	d047      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800244a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	2b04      	cmp	r3, #4
 8002452:	d82a      	bhi.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	08002471 	.word	0x08002471
 8002460:	0800247f 	.word	0x0800247f
 8002464:	08002495 	.word	0x08002495
 8002468:	080024b3 	.word	0x080024b3
 800246c:	080024b3 	.word	0x080024b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002470:	4b7d      	ldr	r3, [pc, #500]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4a7c      	ldr	r2, [pc, #496]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800247c:	e01a      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800247e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002482:	3308      	adds	r3, #8
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f001 fbf0 	bl	8003c6c <RCCEx_PLL2_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002492:	e00f      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002498:	3328      	adds	r3, #40	@ 0x28
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fc97 	bl	8003dd0 <RCCEx_PLL3_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024a8:	e004      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80024b0:	e000      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c0:	f023 0107 	bic.w	r1, r3, #7
 80024c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	4a67      	ldr	r2, [pc, #412]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80024d0:	e003      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80024d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80024da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80024e6:	f04f 0b00 	mov.w	fp, #0
 80024ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80024ee:	d054      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80024f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80024fa:	d036      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80024fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002500:	d82f      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002506:	d032      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250c:	d829      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800250e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002510:	d02f      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002512:	2bc0      	cmp	r3, #192	@ 0xc0
 8002514:	d825      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002516:	2b80      	cmp	r3, #128	@ 0x80
 8002518:	d018      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800251a:	2b80      	cmp	r3, #128	@ 0x80
 800251c:	d821      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002522:	2b40      	cmp	r3, #64	@ 0x40
 8002524:	d007      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002526:	e01c      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002528:	4b4f      	ldr	r3, [pc, #316]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800252a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252c:	4a4e      	ldr	r2, [pc, #312]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800252e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002534:	e01e      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800253a:	3308      	adds	r3, #8
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fb94 	bl	8003c6c <RCCEx_PLL2_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800254a:	e013      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800254c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002550:	3328      	adds	r3, #40	@ 0x28
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fc3b 	bl	8003dd0 <RCCEx_PLL3_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002560:	e008      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002568:	e004      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800256a:	bf00      	nop
 800256c:	e002      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800256e:	bf00      	nop
 8002570:	e000      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800257e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002580:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258a:	4a37      	ldr	r2, [pc, #220]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800258c:	430b      	orrs	r3, r1
 800258e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002590:	e003      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002596:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800259a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80025a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80025b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80025b4:	460b      	mov	r3, r1
 80025b6:	4313      	orrs	r3, r2
 80025b8:	d05c      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80025ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80025c4:	d03b      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025c6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80025ca:	d834      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025d0:	d037      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80025d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025d6:	d82e      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80025dc:	d033      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80025de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80025e2:	d828      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e8:	d01a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ee:	d822      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80025f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f8:	d007      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80025fa:	e01c      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002608:	e01e      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800260a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800260e:	3308      	adds	r3, #8
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fb2a 	bl	8003c6c <RCCEx_PLL2_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800261e:	e013      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002624:	3328      	adds	r3, #40	@ 0x28
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f001 fbd1 	bl	8003dd0 <RCCEx_PLL3_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002634:	e008      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800263c:	e004      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002654:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800265c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265e:	4a02      	ldr	r2, [pc, #8]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002660:	430b      	orrs	r3, r1
 8002662:	6513      	str	r3, [r2, #80]	@ 0x50
 8002664:	e006      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002670:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002680:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800268a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800268e:	460b      	mov	r3, r1
 8002690:	4313      	orrs	r3, r2
 8002692:	d03a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	2b30      	cmp	r3, #48	@ 0x30
 800269c:	d01f      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800269e:	2b30      	cmp	r3, #48	@ 0x30
 80026a0:	d819      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d00c      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d815      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d111      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b2:	4bae      	ldr	r3, [pc, #696]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	4aad      	ldr	r2, [pc, #692]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026be:	e011      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026c4:	3308      	adds	r3, #8
 80026c6:	2102      	movs	r1, #2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 facf 	bl	8003c6c <RCCEx_PLL2_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026d4:	e006      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80026dc:	e002      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026ec:	4b9f      	ldr	r3, [pc, #636]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80026f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	4a9c      	ldr	r2, [pc, #624]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026fc:	430b      	orrs	r3, r1
 80026fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002700:	e003      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002702:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002706:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800270a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002716:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002720:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002724:	460b      	mov	r3, r1
 8002726:	4313      	orrs	r3, r2
 8002728:	d051      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800272a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800272e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002734:	d035      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800273a:	d82e      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800273c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002740:	d031      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002742:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002746:	d828      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274c:	d01a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002752:	d822      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275c:	d007      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800275e:	e01c      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002760:	4b82      	ldr	r3, [pc, #520]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	4a81      	ldr	r2, [pc, #516]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800276c:	e01c      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800276e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002772:	3308      	adds	r3, #8
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fa78 	bl	8003c6c <RCCEx_PLL2_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002782:	e011      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002788:	3328      	adds	r3, #40	@ 0x28
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f001 fb1f 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002798:	e006      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80027a0:	e002      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027b0:	4b6e      	ldr	r3, [pc, #440]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80027b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027be:	4a6b      	ldr	r2, [pc, #428]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80027c4:	e003      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80027ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80027da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80027e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80027e8:	460b      	mov	r3, r1
 80027ea:	4313      	orrs	r3, r2
 80027ec:	d053      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80027ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f8:	d033      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80027fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027fe:	d82c      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002800:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002804:	d02f      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800280a:	d826      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800280c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002810:	d02b      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002812:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002816:	d820      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800281c:	d012      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800281e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002822:	d81a      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d022      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282c:	d115      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800282e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002832:	3308      	adds	r3, #8
 8002834:	2101      	movs	r1, #1
 8002836:	4618      	mov	r0, r3
 8002838:	f001 fa18 	bl	8003c6c <RCCEx_PLL2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002842:	e015      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002848:	3328      	adds	r3, #40	@ 0x28
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fabf 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002858:	e00a      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002860:	e006      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002862:	bf00      	nop
 8002864:	e004      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800286e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002870:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002878:	4b3c      	ldr	r3, [pc, #240]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800287a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002886:	4a39      	ldr	r2, [pc, #228]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002888:	430b      	orrs	r3, r1
 800288a:	6513      	str	r3, [r2, #80]	@ 0x50
 800288c:	e003      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002892:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80028a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028ac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4313      	orrs	r3, r2
 80028b4:	d060      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80028be:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80028c2:	d039      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80028c4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80028c8:	d832      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ce:	d035      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80028d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d4:	d82c      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028da:	d031      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e0:	d826      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80028e6:	d02d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80028e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80028ec:	d820      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f2:	d012      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80028f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f8:	d81a      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d024      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002902:	d115      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002908:	3308      	adds	r3, #8
 800290a:	2101      	movs	r1, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f9ad 	bl	8003c6c <RCCEx_PLL2_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002918:	e017      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800291a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800291e:	3328      	adds	r3, #40	@ 0x28
 8002920:	2101      	movs	r1, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fa54 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800292e:	e00c      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002936:	e008      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002938:	bf00      	nop
 800293a:	e006      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800293c:	bf00      	nop
 800293e:	e004      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002940:	bf00      	nop
 8002942:	e002      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800294a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800295a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800295e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002962:	4a02      	ldr	r2, [pc, #8]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002964:	430b      	orrs	r3, r1
 8002966:	6593      	str	r3, [r2, #88]	@ 0x58
 8002968:	e006      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800296a:	bf00      	nop
 800296c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002974:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800298e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002992:	460b      	mov	r3, r1
 8002994:	4313      	orrs	r3, r2
 8002996:	d037      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800299c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800299e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a2:	d00e      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a8:	d816      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80029ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029b2:	d111      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b4:	4bc4      	ldr	r3, [pc, #784]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	4ac3      	ldr	r2, [pc, #780]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029c0:	e00f      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 f94e 	bl	8003c6c <RCCEx_PLL2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029d6:	e004      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80029e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029ea:	4bb7      	ldr	r3, [pc, #732]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80029f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029f8:	4ab3      	ldr	r2, [pc, #716]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002a1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4313      	orrs	r3, r2
 8002a26:	d039      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d81c      	bhi.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a32:	a201      	add	r2, pc, #4	@ (adr r2, 8002a38 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a75 	.word	0x08002a75
 8002a3c:	08002a49 	.word	0x08002a49
 8002a40:	08002a57 	.word	0x08002a57
 8002a44:	08002a75 	.word	0x08002a75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a48:	4b9f      	ldr	r3, [pc, #636]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	4a9e      	ldr	r2, [pc, #632]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a54:	e00f      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f904 	bl	8003c6c <RCCEx_PLL2_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a6a:	e004      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002a72:	e000      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a7e:	4b92      	ldr	r3, [pc, #584]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	f023 0103 	bic.w	r1, r3, #3
 8002a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a92:	e003      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002a98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f000 8099 	beq.w	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002abe:	4b83      	ldr	r3, [pc, #524]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a82      	ldr	r2, [pc, #520]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aca:	f7fe f95d 	bl	8000d88 <HAL_GetTick>
 8002ace:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad2:	e00b      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe f958 	bl	8000d88 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d903      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002aea:	e005      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aec:	4b77      	ldr	r3, [pc, #476]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ed      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002af8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d173      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b00:	4b71      	ldr	r3, [pc, #452]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b0c:	4053      	eors	r3, r2
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b16:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b1e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b22:	4b69      	ldr	r3, [pc, #420]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	4a68      	ldr	r2, [pc, #416]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2e:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	4a65      	ldr	r2, [pc, #404]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b3a:	4a63      	ldr	r2, [pc, #396]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4e:	d118      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe f91a 	bl	8000d88 <HAL_GetTick>
 8002b54:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b58:	e00d      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe f915 	bl	8000d88 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b64:	1ad2      	subs	r2, r2, r3
 8002b66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d903      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8002b74:	e005      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b76:	4b54      	ldr	r3, [pc, #336]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0eb      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d129      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b9a:	d10e      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ba8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002bac:	091a      	lsrs	r2, r3, #4
 8002bae:	4b48      	ldr	r3, [pc, #288]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	4a45      	ldr	r2, [pc, #276]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6113      	str	r3, [r2, #16]
 8002bb8:	e005      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002bba:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	4a42      	ldr	r2, [pc, #264]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002bc4:	6113      	str	r3, [r2, #16]
 8002bc6:	4b40      	ldr	r3, [pc, #256]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bc8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002be6:	e003      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002bec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f002 0301 	and.w	r3, r2, #1
 8002bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f000 8090 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c1a:	2b28      	cmp	r3, #40	@ 0x28
 8002c1c:	d870      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002d09 	.word	0x08002d09
 8002c28:	08002d01 	.word	0x08002d01
 8002c2c:	08002d01 	.word	0x08002d01
 8002c30:	08002d01 	.word	0x08002d01
 8002c34:	08002d01 	.word	0x08002d01
 8002c38:	08002d01 	.word	0x08002d01
 8002c3c:	08002d01 	.word	0x08002d01
 8002c40:	08002d01 	.word	0x08002d01
 8002c44:	08002cd5 	.word	0x08002cd5
 8002c48:	08002d01 	.word	0x08002d01
 8002c4c:	08002d01 	.word	0x08002d01
 8002c50:	08002d01 	.word	0x08002d01
 8002c54:	08002d01 	.word	0x08002d01
 8002c58:	08002d01 	.word	0x08002d01
 8002c5c:	08002d01 	.word	0x08002d01
 8002c60:	08002d01 	.word	0x08002d01
 8002c64:	08002ceb 	.word	0x08002ceb
 8002c68:	08002d01 	.word	0x08002d01
 8002c6c:	08002d01 	.word	0x08002d01
 8002c70:	08002d01 	.word	0x08002d01
 8002c74:	08002d01 	.word	0x08002d01
 8002c78:	08002d01 	.word	0x08002d01
 8002c7c:	08002d01 	.word	0x08002d01
 8002c80:	08002d01 	.word	0x08002d01
 8002c84:	08002d09 	.word	0x08002d09
 8002c88:	08002d01 	.word	0x08002d01
 8002c8c:	08002d01 	.word	0x08002d01
 8002c90:	08002d01 	.word	0x08002d01
 8002c94:	08002d01 	.word	0x08002d01
 8002c98:	08002d01 	.word	0x08002d01
 8002c9c:	08002d01 	.word	0x08002d01
 8002ca0:	08002d01 	.word	0x08002d01
 8002ca4:	08002d09 	.word	0x08002d09
 8002ca8:	08002d01 	.word	0x08002d01
 8002cac:	08002d01 	.word	0x08002d01
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002d01 	.word	0x08002d01
 8002cb8:	08002d01 	.word	0x08002d01
 8002cbc:	08002d01 	.word	0x08002d01
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002d09 	.word	0x08002d09
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58024800 	.word	0x58024800
 8002cd0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cd8:	3308      	adds	r3, #8
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 ffc5 	bl	8003c6c <RCCEx_PLL2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ce8:	e00f      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cee:	3328      	adds	r3, #40	@ 0x28
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f86c 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d12:	4bc0      	ldr	r3, [pc, #768]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d22:	4abc      	ldr	r2, [pc, #752]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f002 0302 	and.w	r3, r2, #2
 8002d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002d48:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	d043      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d824      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d64 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002db1 	.word	0x08002db1
 8002d68:	08002d7d 	.word	0x08002d7d
 8002d6c:	08002d93 	.word	0x08002d93
 8002d70:	08002db1 	.word	0x08002db1
 8002d74:	08002db1 	.word	0x08002db1
 8002d78:	08002db1 	.word	0x08002db1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d80:	3308      	adds	r3, #8
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ff71 	bl	8003c6c <RCCEx_PLL2_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d90:	e00f      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d96:	3328      	adds	r3, #40	@ 0x28
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f818 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10b      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dba:	4b96      	ldr	r3, [pc, #600]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbe:	f023 0107 	bic.w	r1, r3, #7
 8002dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dca:	4a92      	ldr	r2, [pc, #584]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6553      	str	r3, [r2, #84]	@ 0x54
 8002dd0:	e003      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f002 0304 	and.w	r3, r2, #4
 8002de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002df0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4313      	orrs	r3, r2
 8002df8:	d043      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d824      	bhi.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e06:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e59 	.word	0x08002e59
 8002e10:	08002e25 	.word	0x08002e25
 8002e14:	08002e3b 	.word	0x08002e3b
 8002e18:	08002e59 	.word	0x08002e59
 8002e1c:	08002e59 	.word	0x08002e59
 8002e20:	08002e59 	.word	0x08002e59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e28:	3308      	adds	r3, #8
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 ff1d 	bl	8003c6c <RCCEx_PLL2_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e38:	e00f      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e3e:	3328      	adds	r3, #40	@ 0x28
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 ffc4 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e4e:	e004      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e56:	e000      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e62:	4b6c      	ldr	r3, [pc, #432]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	f023 0107 	bic.w	r1, r3, #7
 8002e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e72:	4a68      	ldr	r2, [pc, #416]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e78:	e003      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f002 0320 	and.w	r3, r2, #32
 8002e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	d055      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eae:	d033      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb4:	d82c      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eba:	d02f      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec0:	d826      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ec6:	d02b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ec8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ecc:	d820      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed2:	d012      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed8:	d81a      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d022      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ee2:	d115      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ee8:	3308      	adds	r3, #8
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 febd 	bl	8003c6c <RCCEx_PLL2_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e015      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002efe:	3328      	adds	r3, #40	@ 0x28
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 ff64 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002f16:	e006      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f18:	bf00      	nop
 8002f1a:	e004      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f1c:	bf00      	nop
 8002f1e:	e002      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f3e:	4a35      	ldr	r2, [pc, #212]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f44:	e003      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002f64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	d058      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002f7a:	d033      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002f7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002f80:	d82c      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f86:	d02f      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8c:	d826      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f92:	d02b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f98:	d820      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9e:	d012      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa4:	d81a      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d022      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d115      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fe57 	bl	8003c6c <RCCEx_PLL2_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fca:	3328      	adds	r3, #40	@ 0x28
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fefe 	bl	8003dd0 <RCCEx_PLL3_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002fe2:	e006      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fe4:	bf00      	nop
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e002      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10e      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800300a:	4a02      	ldr	r2, [pc, #8]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800300c:	430b      	orrs	r3, r1
 800300e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003010:	e006      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800301c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800302c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003036:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800303a:	460b      	mov	r3, r1
 800303c:	4313      	orrs	r3, r2
 800303e:	d055      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003048:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800304c:	d033      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800304e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003052:	d82c      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003058:	d02f      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800305a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800305e:	d826      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003060:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003064:	d02b      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003066:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800306a:	d820      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800306c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003070:	d012      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003076:	d81a      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d022      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003080:	d115      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003086:	3308      	adds	r3, #8
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fdee 	bl	8003c6c <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003096:	e015      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800309c:	3328      	adds	r3, #40	@ 0x28
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fe95 	bl	8003dd0 <RCCEx_PLL3_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030ac:	e00a      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80030b4:	e006      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030cc:	4ba1      	ldr	r3, [pc, #644]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80030d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030dc:	4a9d      	ldr	r2, [pc, #628]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e2:	e003      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f002 0308 	and.w	r3, r2, #8
 80030f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003102:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003106:	460b      	mov	r3, r1
 8003108:	4313      	orrs	r3, r2
 800310a:	d01e      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800310c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003118:	d10c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800311a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800311e:	3328      	adds	r3, #40	@ 0x28
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fe54 	bl	8003dd0 <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003134:	4b87      	ldr	r3, [pc, #540]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800313c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003144:	4a83      	ldr	r2, [pc, #524]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003146:	430b      	orrs	r3, r1
 8003148:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	f002 0310 	and.w	r3, r2, #16
 8003156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003160:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003164:	460b      	mov	r3, r1
 8003166:	4313      	orrs	r3, r2
 8003168:	d01e      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800316a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003176:	d10c      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800317c:	3328      	adds	r3, #40	@ 0x28
 800317e:	2102      	movs	r1, #2
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fe25 	bl	8003dd0 <RCCEx_PLL3_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003192:	4b70      	ldr	r3, [pc, #448]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800319e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80031c2:	460b      	mov	r3, r1
 80031c4:	4313      	orrs	r3, r2
 80031c6:	d03e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d4:	d022      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80031d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031da:	d81b      	bhi.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e4:	d00b      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80031e6:	e015      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ec:	3308      	adds	r3, #8
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fd3b 	bl	8003c6c <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80031fc:	e00f      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003202:	3328      	adds	r3, #40	@ 0x28
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fde2 	bl	8003dd0 <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003212:	e004      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800321c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003226:	4b4b      	ldr	r3, [pc, #300]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800322e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003236:	4a47      	ldr	r2, [pc, #284]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003238:	430b      	orrs	r3, r1
 800323a:	6593      	str	r3, [r2, #88]	@ 0x58
 800323c:	e003      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003242:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003252:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003254:	2300      	movs	r3, #0
 8003256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003258:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800325c:	460b      	mov	r3, r1
 800325e:	4313      	orrs	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800326e:	d01f      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003274:	d818      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800327a:	d003      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800327c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003280:	d007      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003282:	e011      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003284:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	4a32      	ldr	r2, [pc, #200]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003290:	e00f      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003296:	3328      	adds	r3, #40	@ 0x28
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fd98 	bl	8003dd0 <RCCEx_PLL3_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80032a6:	e004      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80032b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10b      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ba:	4b26      	ldr	r3, [pc, #152]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ca:	4a22      	ldr	r2, [pc, #136]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80032e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80032e8:	2300      	movs	r3, #0
 80032ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80032ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80032f0:	460b      	mov	r3, r1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	d034      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003304:	d007      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003306:	e011      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003308:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	4a11      	ldr	r2, [pc, #68]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003314:	e00e      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800331a:	3308      	adds	r3, #8
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fca4 	bl	8003c6c <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800332a:	e003      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003334:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003340:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334a:	4a02      	ldr	r2, [pc, #8]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334c:	430b      	orrs	r3, r1
 800334e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003352:	bf00      	nop
 8003354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800335c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800336c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800336e:	2300      	movs	r3, #0
 8003370:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003372:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003376:	460b      	mov	r3, r1
 8003378:	4313      	orrs	r3, r2
 800337a:	d00c      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800337c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003380:	3328      	adds	r3, #40	@ 0x28
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fd23 	bl	8003dd0 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80033a4:	2300      	movs	r3, #0
 80033a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80033ac:	460b      	mov	r3, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	d038      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033be:	d018      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80033c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c4:	d811      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ca:	d014      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d0:	d80b      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80033d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033da:	d106      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033dc:	4bc3      	ldr	r3, [pc, #780]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	4ac2      	ldr	r2, [pc, #776]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80033e8:	e008      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033f0:	e004      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003404:	4bb9      	ldr	r3, [pc, #740]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800340c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003414:	4ab5      	ldr	r2, [pc, #724]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003416:	430b      	orrs	r3, r1
 8003418:	6553      	str	r3, [r2, #84]	@ 0x54
 800341a:	e003      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003420:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003430:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003432:	2300      	movs	r3, #0
 8003434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003436:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003440:	4baa      	ldr	r3, [pc, #680]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800344c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800344e:	4aa7      	ldr	r2, [pc, #668]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003460:	653b      	str	r3, [r7, #80]	@ 0x50
 8003462:	2300      	movs	r3, #0
 8003464:	657b      	str	r3, [r7, #84]	@ 0x54
 8003466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800346a:	460b      	mov	r3, r1
 800346c:	4313      	orrs	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003470:	4b9e      	ldr	r3, [pc, #632]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003474:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	4a9b      	ldr	r2, [pc, #620]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003492:	2300      	movs	r3, #0
 8003494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003496:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800349a:	460b      	mov	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034a0:	4b92      	ldr	r3, [pc, #584]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80034a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ae:	4a8f      	ldr	r2, [pc, #572]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80034c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034c2:	2300      	movs	r3, #0
 80034c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034d0:	4b86      	ldr	r3, [pc, #536]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	4a85      	ldr	r2, [pc, #532]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80034da:	6113      	str	r3, [r2, #16]
 80034dc:	4b83      	ldr	r3, [pc, #524]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034e8:	4a80      	ldr	r2, [pc, #512]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ea:	430b      	orrs	r3, r1
 80034ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034fc:	2300      	movs	r3, #0
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003500:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800350a:	4b78      	ldr	r3, [pc, #480]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	4a74      	ldr	r2, [pc, #464]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800351a:	430b      	orrs	r3, r1
 800351c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800352a:	633b      	str	r3, [r7, #48]	@ 0x30
 800352c:	2300      	movs	r3, #0
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003530:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003534:	460b      	mov	r3, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800353a:	4b6c      	ldr	r3, [pc, #432]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354a:	4a68      	ldr	r2, [pc, #416]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800354c:	430b      	orrs	r3, r1
 800354e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	2100      	movs	r1, #0
 800355a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003562:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d011      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003570:	3308      	adds	r3, #8
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fb79 	bl	8003c6c <RCCEx_PLL2_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800358c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	2100      	movs	r1, #0
 800359a:	6239      	str	r1, [r7, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035a6:	460b      	mov	r3, r1
 80035a8:	4313      	orrs	r3, r2
 80035aa:	d011      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035b0:	3308      	adds	r3, #8
 80035b2:	2101      	movs	r1, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fb59 	bl	8003c6c <RCCEx_PLL2_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80035c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	2100      	movs	r1, #0
 80035da:	61b9      	str	r1, [r7, #24]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d011      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f0:	3308      	adds	r3, #8
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb39 	bl	8003c6c <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800360c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	2100      	movs	r1, #0
 800361a:	6139      	str	r1, [r7, #16]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d011      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003630:	3328      	adds	r3, #40	@ 0x28
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fbcb 	bl	8003dd0 <RCCEx_PLL3_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8003640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800364c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	2100      	movs	r1, #0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d011      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800366c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003670:	3328      	adds	r3, #40	@ 0x28
 8003672:	2101      	movs	r1, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fbab 	bl	8003dd0 <RCCEx_PLL3_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800368c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	2100      	movs	r1, #0
 800369a:	6039      	str	r1, [r7, #0]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d011      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b0:	3328      	adds	r3, #40	@ 0x28
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fb8b 	bl	8003dd0 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80036c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80036d0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
}
 80036de:	4618      	mov	r0, r3
 80036e0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80036e4:	46bd      	mov	sp, r7
 80036e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400

080036f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80036f4:	f7fe fde2 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4904      	ldr	r1, [pc, #16]	@ (8003718 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	58024400 	.word	0x58024400
 8003718:	08005364 	.word	0x08005364

0800371c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	@ 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003724:	4ba1      	ldr	r3, [pc, #644]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800372e:	4b9f      	ldr	r3, [pc, #636]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003732:	0b1b      	lsrs	r3, r3, #12
 8003734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003738:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800373a:	4b9c      	ldr	r3, [pc, #624]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003746:	4b99      	ldr	r3, [pc, #612]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8111 	beq.w	800398c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b02      	cmp	r3, #2
 800376e:	f000 8083 	beq.w	8003878 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b02      	cmp	r3, #2
 8003776:	f200 80a1 	bhi.w	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d056      	beq.n	8003834 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003786:	e099      	b.n	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003788:	4b88      	ldr	r3, [pc, #544]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02d      	beq.n	80037f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003794:	4b85      	ldr	r3, [pc, #532]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	4a84      	ldr	r2, [pc, #528]	@ (80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	ee07 3a90 	vmov	s15, r3
 80037ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b7b      	ldr	r3, [pc, #492]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80037d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80037ee:	e087      	b.n	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003802:	4b6a      	ldr	r3, [pc, #424]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	ed97 6a03 	vldr	s12, [r7, #12]
 8003816:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003832:	e065      	b.n	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a03 	vldr	s12, [r7, #12]
 800385a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003876:	e043      	b.n	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b48      	ldr	r3, [pc, #288]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a03 	vldr	s12, [r7, #12]
 800389e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ba:	e021      	b.n	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ce:	4b37      	ldr	r3, [pc, #220]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038de:	ed97 6a03 	vldr	s12, [r7, #12]
 80038e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003900:	4b2a      	ldr	r3, [pc, #168]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	0a5b      	lsrs	r3, r3, #9
 8003906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800391a:	edd7 6a07 	vldr	s13, [r7, #28]
 800391e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003926:	ee17 2a90 	vmov	r2, s15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800392e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003948:	edd7 6a07 	vldr	s13, [r7, #28]
 800394c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003954:	ee17 2a90 	vmov	r2, s15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003976:	edd7 6a07 	vldr	s13, [r7, #28]
 800397a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003982:	ee17 2a90 	vmov	r2, s15
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800398a:	e008      	b.n	800399e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
}
 800399e:	bf00      	nop
 80039a0:	3724      	adds	r7, #36	@ 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	58024400 	.word	0x58024400
 80039b0:	03d09000 	.word	0x03d09000
 80039b4:	46000000 	.word	0x46000000
 80039b8:	4c742400 	.word	0x4c742400
 80039bc:	4a742400 	.word	0x4a742400
 80039c0:	4af42400 	.word	0x4af42400

080039c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039cc:	4ba1      	ldr	r3, [pc, #644]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80039d6:	4b9f      	ldr	r3, [pc, #636]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	0d1b      	lsrs	r3, r3, #20
 80039dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80039ee:	4b99      	ldr	r3, [pc, #612]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	08db      	lsrs	r3, r3, #3
 80039f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8111 	beq.w	8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	f000 8083 	beq.w	8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f200 80a1 	bhi.w	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d056      	beq.n	8003adc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a2e:	e099      	b.n	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a30:	4b88      	ldr	r3, [pc, #544]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02d      	beq.n	8003a98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a3c:	4b85      	ldr	r3, [pc, #532]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	4a84      	ldr	r2, [pc, #528]	@ (8003c58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a66:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a96:	e087      	b.n	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003abe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ada:	e065      	b.n	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	4b59      	ldr	r3, [pc, #356]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b1e:	e043      	b.n	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b48      	ldr	r3, [pc, #288]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b62:	e021      	b.n	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	4b37      	ldr	r3, [pc, #220]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ba6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	0a5b      	lsrs	r3, r3, #9
 8003bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bce:	ee17 2a90 	vmov	r2, s15
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfc:	ee17 2a90 	vmov	r2, s15
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c04:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2a:	ee17 2a90 	vmov	r2, s15
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c32:	e008      	b.n	8003c46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	03d09000 	.word	0x03d09000
 8003c5c:	46000000 	.word	0x46000000
 8003c60:	4c742400 	.word	0x4c742400
 8003c64:	4a742400 	.word	0x4a742400
 8003c68:	4af42400 	.word	0x4af42400

08003c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c7a:	4b53      	ldr	r3, [pc, #332]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d101      	bne.n	8003c8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e099      	b.n	8003dbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a4e      	ldr	r2, [pc, #312]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003c90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c96:	f7fd f877 	bl	8000d88 <HAL_GetTick>
 8003c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c9e:	f7fd f873 	bl	8000d88 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e086      	b.n	8003dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cb0:	4b45      	ldr	r3, [pc, #276]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cbc:	4b42      	ldr	r3, [pc, #264]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	493f      	ldr	r1, [pc, #252]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	025b      	lsls	r3, r3, #9
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d00:	4931      	ldr	r1, [pc, #196]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d06:	4b30      	ldr	r3, [pc, #192]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	492d      	ldr	r1, [pc, #180]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d18:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	f023 0220 	bic.w	r2, r3, #32
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4928      	ldr	r1, [pc, #160]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d2a:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	4a26      	ldr	r2, [pc, #152]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	f023 0310 	bic.w	r3, r3, #16
 8003d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d36:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <RCCEx_PLL2_Config+0x160>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	69d2      	ldr	r2, [r2, #28]
 8003d42:	00d2      	lsls	r2, r2, #3
 8003d44:	4920      	ldr	r1, [pc, #128]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4a19      	ldr	r2, [pc, #100]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d68:	e00f      	b.n	8003d8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d70:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003d7c:	e005      	b.n	8003d8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d7e:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d96:	f7fc fff7 	bl	8000d88 <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d9c:	e008      	b.n	8003db0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d9e:	f7fc fff3 	bl	8000d88 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <RCCEx_PLL2_Config+0x15c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	ffff0007 	.word	0xffff0007

08003dd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dde:	4b53      	ldr	r3, [pc, #332]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d101      	bne.n	8003dee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e099      	b.n	8003f22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003dee:	4b4f      	ldr	r3, [pc, #316]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a4e      	ldr	r2, [pc, #312]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fc ffc5 	bl	8000d88 <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e02:	f7fc ffc1 	bl	8000d88 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e086      	b.n	8003f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e14:	4b45      	ldr	r3, [pc, #276]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e20:	4b42      	ldr	r3, [pc, #264]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	051b      	lsls	r3, r3, #20
 8003e2e:	493f      	ldr	r1, [pc, #252]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	025b      	lsls	r3, r3, #9
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e64:	4931      	ldr	r1, [pc, #196]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e6a:	4b30      	ldr	r3, [pc, #192]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	492d      	ldr	r1, [pc, #180]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4928      	ldr	r1, [pc, #160]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e8e:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e9e:	4b24      	ldr	r3, [pc, #144]	@ (8003f30 <RCCEx_PLL3_Config+0x160>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	69d2      	ldr	r2, [r2, #28]
 8003ea6:	00d2      	lsls	r2, r2, #3
 8003ea8:	4920      	ldr	r1, [pc, #128]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003eae:	4b1f      	ldr	r3, [pc, #124]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ecc:	e00f      	b.n	8003eee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ed4:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003eda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ee0:	e005      	b.n	8003eee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ee2:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003eee:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efa:	f7fc ff45 	bl	8000d88 <HAL_GetTick>
 8003efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f00:	e008      	b.n	8003f14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f02:	f7fc ff41 	bl	8000d88 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e006      	b.n	8003f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <RCCEx_PLL3_Config+0x15c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	ffff0007 	.word	0xffff0007

08003f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e042      	b.n	8003fcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fc fd53 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2224      	movs	r2, #36	@ 0x24
 8003f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fe94 	bl	8004cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f825 	bl	8003fd4 <UART_SetConfig>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01b      	b.n	8003fcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 ff13 	bl	8004df0 <UART_CheckIdleState>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd8:	b092      	sub	sp, #72	@ 0x48
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bbe      	ldr	r3, [pc, #760]	@ (80042fc <UART_SetConfig+0x328>)
 8004004:	4013      	ands	r3, r2
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4ab3      	ldr	r2, [pc, #716]	@ (8004300 <UART_SetConfig+0x32c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403c:	4313      	orrs	r3, r2
 800403e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4baf      	ldr	r3, [pc, #700]	@ (8004304 <UART_SetConfig+0x330>)
 8004048:	4013      	ands	r3, r2
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	f023 010f 	bic.w	r1, r3, #15
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4aa6      	ldr	r2, [pc, #664]	@ (8004308 <UART_SetConfig+0x334>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d177      	bne.n	8004164 <UART_SetConfig+0x190>
 8004074:	4ba5      	ldr	r3, [pc, #660]	@ (800430c <UART_SetConfig+0x338>)
 8004076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800407c:	2b28      	cmp	r3, #40	@ 0x28
 800407e:	d86d      	bhi.n	800415c <UART_SetConfig+0x188>
 8004080:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <UART_SetConfig+0xb4>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	0800412d 	.word	0x0800412d
 800408c:	0800415d 	.word	0x0800415d
 8004090:	0800415d 	.word	0x0800415d
 8004094:	0800415d 	.word	0x0800415d
 8004098:	0800415d 	.word	0x0800415d
 800409c:	0800415d 	.word	0x0800415d
 80040a0:	0800415d 	.word	0x0800415d
 80040a4:	0800415d 	.word	0x0800415d
 80040a8:	08004135 	.word	0x08004135
 80040ac:	0800415d 	.word	0x0800415d
 80040b0:	0800415d 	.word	0x0800415d
 80040b4:	0800415d 	.word	0x0800415d
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	0800415d 	.word	0x0800415d
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	0800415d 	.word	0x0800415d
 80040c8:	0800413d 	.word	0x0800413d
 80040cc:	0800415d 	.word	0x0800415d
 80040d0:	0800415d 	.word	0x0800415d
 80040d4:	0800415d 	.word	0x0800415d
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	0800415d 	.word	0x0800415d
 80040e0:	0800415d 	.word	0x0800415d
 80040e4:	0800415d 	.word	0x0800415d
 80040e8:	08004145 	.word	0x08004145
 80040ec:	0800415d 	.word	0x0800415d
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	0800415d 	.word	0x0800415d
 8004100:	0800415d 	.word	0x0800415d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	0800414d 	.word	0x0800414d
 800410c:	0800415d 	.word	0x0800415d
 8004110:	0800415d 	.word	0x0800415d
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800415d 	.word	0x0800415d
 800411c:	0800415d 	.word	0x0800415d
 8004120:	0800415d 	.word	0x0800415d
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004155 	.word	0x08004155
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004132:	e326      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004134:	2304      	movs	r3, #4
 8004136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800413a:	e322      	b.n	8004782 <UART_SetConfig+0x7ae>
 800413c:	2308      	movs	r3, #8
 800413e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004142:	e31e      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004144:	2310      	movs	r3, #16
 8004146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800414a:	e31a      	b.n	8004782 <UART_SetConfig+0x7ae>
 800414c:	2320      	movs	r3, #32
 800414e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004152:	e316      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004154:	2340      	movs	r3, #64	@ 0x40
 8004156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800415a:	e312      	b.n	8004782 <UART_SetConfig+0x7ae>
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004162:	e30e      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a69      	ldr	r2, [pc, #420]	@ (8004310 <UART_SetConfig+0x33c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d130      	bne.n	80041d0 <UART_SetConfig+0x1fc>
 800416e:	4b67      	ldr	r3, [pc, #412]	@ (800430c <UART_SetConfig+0x338>)
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b05      	cmp	r3, #5
 8004178:	d826      	bhi.n	80041c8 <UART_SetConfig+0x1f4>
 800417a:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <UART_SetConfig+0x1ac>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004199 	.word	0x08004199
 8004184:	080041a1 	.word	0x080041a1
 8004188:	080041a9 	.word	0x080041a9
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041c1 	.word	0x080041c1
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800419e:	e2f0      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041a6:	e2ec      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ae:	e2e8      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041b6:	e2e4      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041b8:	2320      	movs	r3, #32
 80041ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041be:	e2e0      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041c0:	2340      	movs	r3, #64	@ 0x40
 80041c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041c6:	e2dc      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ce:	e2d8      	b.n	8004782 <UART_SetConfig+0x7ae>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004314 <UART_SetConfig+0x340>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d130      	bne.n	800423c <UART_SetConfig+0x268>
 80041da:	4b4c      	ldr	r3, [pc, #304]	@ (800430c <UART_SetConfig+0x338>)
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d826      	bhi.n	8004234 <UART_SetConfig+0x260>
 80041e6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <UART_SetConfig+0x218>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004205 	.word	0x08004205
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004215 	.word	0x08004215
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800422d 	.word	0x0800422d
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800420a:	e2ba      	b.n	8004782 <UART_SetConfig+0x7ae>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004212:	e2b6      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800421a:	e2b2      	b.n	8004782 <UART_SetConfig+0x7ae>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004222:	e2ae      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004224:	2320      	movs	r3, #32
 8004226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800422a:	e2aa      	b.n	8004782 <UART_SetConfig+0x7ae>
 800422c:	2340      	movs	r3, #64	@ 0x40
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004232:	e2a6      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004234:	2380      	movs	r3, #128	@ 0x80
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800423a:	e2a2      	b.n	8004782 <UART_SetConfig+0x7ae>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a35      	ldr	r2, [pc, #212]	@ (8004318 <UART_SetConfig+0x344>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d130      	bne.n	80042a8 <UART_SetConfig+0x2d4>
 8004246:	4b31      	ldr	r3, [pc, #196]	@ (800430c <UART_SetConfig+0x338>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b05      	cmp	r3, #5
 8004250:	d826      	bhi.n	80042a0 <UART_SetConfig+0x2cc>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <UART_SetConfig+0x284>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004271 	.word	0x08004271
 800425c:	08004279 	.word	0x08004279
 8004260:	08004281 	.word	0x08004281
 8004264:	08004289 	.word	0x08004289
 8004268:	08004291 	.word	0x08004291
 800426c:	08004299 	.word	0x08004299
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004276:	e284      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800427e:	e280      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004286:	e27c      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800428e:	e278      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004290:	2320      	movs	r3, #32
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004296:	e274      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004298:	2340      	movs	r3, #64	@ 0x40
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800429e:	e270      	b.n	8004782 <UART_SetConfig+0x7ae>
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042a6:	e26c      	b.n	8004782 <UART_SetConfig+0x7ae>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	@ (800431c <UART_SetConfig+0x348>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d142      	bne.n	8004338 <UART_SetConfig+0x364>
 80042b2:	4b16      	ldr	r3, [pc, #88]	@ (800430c <UART_SetConfig+0x338>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d838      	bhi.n	8004330 <UART_SetConfig+0x35c>
 80042be:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <UART_SetConfig+0x2f0>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042dd 	.word	0x080042dd
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	080042ed 	.word	0x080042ed
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	08004321 	.word	0x08004321
 80042d8:	08004329 	.word	0x08004329
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042e2:	e24e      	b.n	8004782 <UART_SetConfig+0x7ae>
 80042e4:	2304      	movs	r3, #4
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ea:	e24a      	b.n	8004782 <UART_SetConfig+0x7ae>
 80042ec:	2308      	movs	r3, #8
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f2:	e246      	b.n	8004782 <UART_SetConfig+0x7ae>
 80042f4:	2310      	movs	r3, #16
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fa:	e242      	b.n	8004782 <UART_SetConfig+0x7ae>
 80042fc:	cfff69f3 	.word	0xcfff69f3
 8004300:	58000c00 	.word	0x58000c00
 8004304:	11fff4ff 	.word	0x11fff4ff
 8004308:	40011000 	.word	0x40011000
 800430c:	58024400 	.word	0x58024400
 8004310:	40004400 	.word	0x40004400
 8004314:	40004800 	.word	0x40004800
 8004318:	40004c00 	.word	0x40004c00
 800431c:	40005000 	.word	0x40005000
 8004320:	2320      	movs	r3, #32
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004326:	e22c      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004328:	2340      	movs	r3, #64	@ 0x40
 800432a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800432e:	e228      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004330:	2380      	movs	r3, #128	@ 0x80
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004336:	e224      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4ab1      	ldr	r2, [pc, #708]	@ (8004604 <UART_SetConfig+0x630>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d176      	bne.n	8004430 <UART_SetConfig+0x45c>
 8004342:	4bb1      	ldr	r3, [pc, #708]	@ (8004608 <UART_SetConfig+0x634>)
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800434a:	2b28      	cmp	r3, #40	@ 0x28
 800434c:	d86c      	bhi.n	8004428 <UART_SetConfig+0x454>
 800434e:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <UART_SetConfig+0x380>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	080043f9 	.word	0x080043f9
 8004358:	08004429 	.word	0x08004429
 800435c:	08004429 	.word	0x08004429
 8004360:	08004429 	.word	0x08004429
 8004364:	08004429 	.word	0x08004429
 8004368:	08004429 	.word	0x08004429
 800436c:	08004429 	.word	0x08004429
 8004370:	08004429 	.word	0x08004429
 8004374:	08004401 	.word	0x08004401
 8004378:	08004429 	.word	0x08004429
 800437c:	08004429 	.word	0x08004429
 8004380:	08004429 	.word	0x08004429
 8004384:	08004429 	.word	0x08004429
 8004388:	08004429 	.word	0x08004429
 800438c:	08004429 	.word	0x08004429
 8004390:	08004429 	.word	0x08004429
 8004394:	08004409 	.word	0x08004409
 8004398:	08004429 	.word	0x08004429
 800439c:	08004429 	.word	0x08004429
 80043a0:	08004429 	.word	0x08004429
 80043a4:	08004429 	.word	0x08004429
 80043a8:	08004429 	.word	0x08004429
 80043ac:	08004429 	.word	0x08004429
 80043b0:	08004429 	.word	0x08004429
 80043b4:	08004411 	.word	0x08004411
 80043b8:	08004429 	.word	0x08004429
 80043bc:	08004429 	.word	0x08004429
 80043c0:	08004429 	.word	0x08004429
 80043c4:	08004429 	.word	0x08004429
 80043c8:	08004429 	.word	0x08004429
 80043cc:	08004429 	.word	0x08004429
 80043d0:	08004429 	.word	0x08004429
 80043d4:	08004419 	.word	0x08004419
 80043d8:	08004429 	.word	0x08004429
 80043dc:	08004429 	.word	0x08004429
 80043e0:	08004429 	.word	0x08004429
 80043e4:	08004429 	.word	0x08004429
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004429 	.word	0x08004429
 80043f0:	08004429 	.word	0x08004429
 80043f4:	08004421 	.word	0x08004421
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043fe:	e1c0      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004400:	2304      	movs	r3, #4
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004406:	e1bc      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004408:	2308      	movs	r3, #8
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440e:	e1b8      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004410:	2310      	movs	r3, #16
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004416:	e1b4      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004418:	2320      	movs	r3, #32
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441e:	e1b0      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004420:	2340      	movs	r3, #64	@ 0x40
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004426:	e1ac      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442e:	e1a8      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a75      	ldr	r2, [pc, #468]	@ (800460c <UART_SetConfig+0x638>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d130      	bne.n	800449c <UART_SetConfig+0x4c8>
 800443a:	4b73      	ldr	r3, [pc, #460]	@ (8004608 <UART_SetConfig+0x634>)
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	2b05      	cmp	r3, #5
 8004444:	d826      	bhi.n	8004494 <UART_SetConfig+0x4c0>
 8004446:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <UART_SetConfig+0x478>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004465 	.word	0x08004465
 8004450:	0800446d 	.word	0x0800446d
 8004454:	08004475 	.word	0x08004475
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800446a:	e18a      	b.n	8004782 <UART_SetConfig+0x7ae>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004472:	e186      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447a:	e182      	b.n	8004782 <UART_SetConfig+0x7ae>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004482:	e17e      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004484:	2320      	movs	r3, #32
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448a:	e17a      	b.n	8004782 <UART_SetConfig+0x7ae>
 800448c:	2340      	movs	r3, #64	@ 0x40
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004492:	e176      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449a:	e172      	b.n	8004782 <UART_SetConfig+0x7ae>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5b      	ldr	r2, [pc, #364]	@ (8004610 <UART_SetConfig+0x63c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d130      	bne.n	8004508 <UART_SetConfig+0x534>
 80044a6:	4b58      	ldr	r3, [pc, #352]	@ (8004608 <UART_SetConfig+0x634>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d826      	bhi.n	8004500 <UART_SetConfig+0x52c>
 80044b2:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <UART_SetConfig+0x4e4>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044d9 	.word	0x080044d9
 80044c0:	080044e1 	.word	0x080044e1
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044d6:	e154      	b.n	8004782 <UART_SetConfig+0x7ae>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044de:	e150      	b.n	8004782 <UART_SetConfig+0x7ae>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e6:	e14c      	b.n	8004782 <UART_SetConfig+0x7ae>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ee:	e148      	b.n	8004782 <UART_SetConfig+0x7ae>
 80044f0:	2320      	movs	r3, #32
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f6:	e144      	b.n	8004782 <UART_SetConfig+0x7ae>
 80044f8:	2340      	movs	r3, #64	@ 0x40
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fe:	e140      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004506:	e13c      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a41      	ldr	r2, [pc, #260]	@ (8004614 <UART_SetConfig+0x640>)
 800450e:	4293      	cmp	r3, r2
 8004510:	f040 8082 	bne.w	8004618 <UART_SetConfig+0x644>
 8004514:	4b3c      	ldr	r3, [pc, #240]	@ (8004608 <UART_SetConfig+0x634>)
 8004516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800451c:	2b28      	cmp	r3, #40	@ 0x28
 800451e:	d86d      	bhi.n	80045fc <UART_SetConfig+0x628>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <UART_SetConfig+0x554>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	080045cd 	.word	0x080045cd
 800452c:	080045fd 	.word	0x080045fd
 8004530:	080045fd 	.word	0x080045fd
 8004534:	080045fd 	.word	0x080045fd
 8004538:	080045fd 	.word	0x080045fd
 800453c:	080045fd 	.word	0x080045fd
 8004540:	080045fd 	.word	0x080045fd
 8004544:	080045fd 	.word	0x080045fd
 8004548:	080045d5 	.word	0x080045d5
 800454c:	080045fd 	.word	0x080045fd
 8004550:	080045fd 	.word	0x080045fd
 8004554:	080045fd 	.word	0x080045fd
 8004558:	080045fd 	.word	0x080045fd
 800455c:	080045fd 	.word	0x080045fd
 8004560:	080045fd 	.word	0x080045fd
 8004564:	080045fd 	.word	0x080045fd
 8004568:	080045dd 	.word	0x080045dd
 800456c:	080045fd 	.word	0x080045fd
 8004570:	080045fd 	.word	0x080045fd
 8004574:	080045fd 	.word	0x080045fd
 8004578:	080045fd 	.word	0x080045fd
 800457c:	080045fd 	.word	0x080045fd
 8004580:	080045fd 	.word	0x080045fd
 8004584:	080045fd 	.word	0x080045fd
 8004588:	080045e5 	.word	0x080045e5
 800458c:	080045fd 	.word	0x080045fd
 8004590:	080045fd 	.word	0x080045fd
 8004594:	080045fd 	.word	0x080045fd
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080045fd 	.word	0x080045fd
 80045a0:	080045fd 	.word	0x080045fd
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	080045ed 	.word	0x080045ed
 80045ac:	080045fd 	.word	0x080045fd
 80045b0:	080045fd 	.word	0x080045fd
 80045b4:	080045fd 	.word	0x080045fd
 80045b8:	080045fd 	.word	0x080045fd
 80045bc:	080045fd 	.word	0x080045fd
 80045c0:	080045fd 	.word	0x080045fd
 80045c4:	080045fd 	.word	0x080045fd
 80045c8:	080045f5 	.word	0x080045f5
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e0d6      	b.n	8004782 <UART_SetConfig+0x7ae>
 80045d4:	2304      	movs	r3, #4
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e0d2      	b.n	8004782 <UART_SetConfig+0x7ae>
 80045dc:	2308      	movs	r3, #8
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e2:	e0ce      	b.n	8004782 <UART_SetConfig+0x7ae>
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ea:	e0ca      	b.n	8004782 <UART_SetConfig+0x7ae>
 80045ec:	2320      	movs	r3, #32
 80045ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045f2:	e0c6      	b.n	8004782 <UART_SetConfig+0x7ae>
 80045f4:	2340      	movs	r3, #64	@ 0x40
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fa:	e0c2      	b.n	8004782 <UART_SetConfig+0x7ae>
 80045fc:	2380      	movs	r3, #128	@ 0x80
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004602:	e0be      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004604:	40011400 	.word	0x40011400
 8004608:	58024400 	.word	0x58024400
 800460c:	40007800 	.word	0x40007800
 8004610:	40007c00 	.word	0x40007c00
 8004614:	40011800 	.word	0x40011800
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4aad      	ldr	r2, [pc, #692]	@ (80048d4 <UART_SetConfig+0x900>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d176      	bne.n	8004710 <UART_SetConfig+0x73c>
 8004622:	4bad      	ldr	r3, [pc, #692]	@ (80048d8 <UART_SetConfig+0x904>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800462a:	2b28      	cmp	r3, #40	@ 0x28
 800462c:	d86c      	bhi.n	8004708 <UART_SetConfig+0x734>
 800462e:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <UART_SetConfig+0x660>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	080046d9 	.word	0x080046d9
 8004638:	08004709 	.word	0x08004709
 800463c:	08004709 	.word	0x08004709
 8004640:	08004709 	.word	0x08004709
 8004644:	08004709 	.word	0x08004709
 8004648:	08004709 	.word	0x08004709
 800464c:	08004709 	.word	0x08004709
 8004650:	08004709 	.word	0x08004709
 8004654:	080046e1 	.word	0x080046e1
 8004658:	08004709 	.word	0x08004709
 800465c:	08004709 	.word	0x08004709
 8004660:	08004709 	.word	0x08004709
 8004664:	08004709 	.word	0x08004709
 8004668:	08004709 	.word	0x08004709
 800466c:	08004709 	.word	0x08004709
 8004670:	08004709 	.word	0x08004709
 8004674:	080046e9 	.word	0x080046e9
 8004678:	08004709 	.word	0x08004709
 800467c:	08004709 	.word	0x08004709
 8004680:	08004709 	.word	0x08004709
 8004684:	08004709 	.word	0x08004709
 8004688:	08004709 	.word	0x08004709
 800468c:	08004709 	.word	0x08004709
 8004690:	08004709 	.word	0x08004709
 8004694:	080046f1 	.word	0x080046f1
 8004698:	08004709 	.word	0x08004709
 800469c:	08004709 	.word	0x08004709
 80046a0:	08004709 	.word	0x08004709
 80046a4:	08004709 	.word	0x08004709
 80046a8:	08004709 	.word	0x08004709
 80046ac:	08004709 	.word	0x08004709
 80046b0:	08004709 	.word	0x08004709
 80046b4:	080046f9 	.word	0x080046f9
 80046b8:	08004709 	.word	0x08004709
 80046bc:	08004709 	.word	0x08004709
 80046c0:	08004709 	.word	0x08004709
 80046c4:	08004709 	.word	0x08004709
 80046c8:	08004709 	.word	0x08004709
 80046cc:	08004709 	.word	0x08004709
 80046d0:	08004709 	.word	0x08004709
 80046d4:	08004701 	.word	0x08004701
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e050      	b.n	8004782 <UART_SetConfig+0x7ae>
 80046e0:	2304      	movs	r3, #4
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e04c      	b.n	8004782 <UART_SetConfig+0x7ae>
 80046e8:	2308      	movs	r3, #8
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e048      	b.n	8004782 <UART_SetConfig+0x7ae>
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e044      	b.n	8004782 <UART_SetConfig+0x7ae>
 80046f8:	2320      	movs	r3, #32
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e040      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004700:	2340      	movs	r3, #64	@ 0x40
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e03c      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470e:	e038      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a71      	ldr	r2, [pc, #452]	@ (80048dc <UART_SetConfig+0x908>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d130      	bne.n	800477c <UART_SetConfig+0x7a8>
 800471a:	4b6f      	ldr	r3, [pc, #444]	@ (80048d8 <UART_SetConfig+0x904>)
 800471c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b05      	cmp	r3, #5
 8004724:	d826      	bhi.n	8004774 <UART_SetConfig+0x7a0>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <UART_SetConfig+0x758>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004745 	.word	0x08004745
 8004730:	0800474d 	.word	0x0800474d
 8004734:	08004755 	.word	0x08004755
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004765 	.word	0x08004765
 8004740:	0800476d 	.word	0x0800476d
 8004744:	2302      	movs	r3, #2
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e01a      	b.n	8004782 <UART_SetConfig+0x7ae>
 800474c:	2304      	movs	r3, #4
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004752:	e016      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004754:	2308      	movs	r3, #8
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475a:	e012      	b.n	8004782 <UART_SetConfig+0x7ae>
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004762:	e00e      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004764:	2320      	movs	r3, #32
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476a:	e00a      	b.n	8004782 <UART_SetConfig+0x7ae>
 800476c:	2340      	movs	r3, #64	@ 0x40
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004772:	e006      	b.n	8004782 <UART_SetConfig+0x7ae>
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477a:	e002      	b.n	8004782 <UART_SetConfig+0x7ae>
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a55      	ldr	r2, [pc, #340]	@ (80048dc <UART_SetConfig+0x908>)
 8004788:	4293      	cmp	r3, r2
 800478a:	f040 80f8 	bne.w	800497e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800478e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004792:	2b20      	cmp	r3, #32
 8004794:	dc46      	bgt.n	8004824 <UART_SetConfig+0x850>
 8004796:	2b02      	cmp	r3, #2
 8004798:	db75      	blt.n	8004886 <UART_SetConfig+0x8b2>
 800479a:	3b02      	subs	r3, #2
 800479c:	2b1e      	cmp	r3, #30
 800479e:	d872      	bhi.n	8004886 <UART_SetConfig+0x8b2>
 80047a0:	a201      	add	r2, pc, #4	@ (adr r2, 80047a8 <UART_SetConfig+0x7d4>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	0800482b 	.word	0x0800482b
 80047ac:	08004887 	.word	0x08004887
 80047b0:	08004833 	.word	0x08004833
 80047b4:	08004887 	.word	0x08004887
 80047b8:	08004887 	.word	0x08004887
 80047bc:	08004887 	.word	0x08004887
 80047c0:	08004843 	.word	0x08004843
 80047c4:	08004887 	.word	0x08004887
 80047c8:	08004887 	.word	0x08004887
 80047cc:	08004887 	.word	0x08004887
 80047d0:	08004887 	.word	0x08004887
 80047d4:	08004887 	.word	0x08004887
 80047d8:	08004887 	.word	0x08004887
 80047dc:	08004887 	.word	0x08004887
 80047e0:	08004853 	.word	0x08004853
 80047e4:	08004887 	.word	0x08004887
 80047e8:	08004887 	.word	0x08004887
 80047ec:	08004887 	.word	0x08004887
 80047f0:	08004887 	.word	0x08004887
 80047f4:	08004887 	.word	0x08004887
 80047f8:	08004887 	.word	0x08004887
 80047fc:	08004887 	.word	0x08004887
 8004800:	08004887 	.word	0x08004887
 8004804:	08004887 	.word	0x08004887
 8004808:	08004887 	.word	0x08004887
 800480c:	08004887 	.word	0x08004887
 8004810:	08004887 	.word	0x08004887
 8004814:	08004887 	.word	0x08004887
 8004818:	08004887 	.word	0x08004887
 800481c:	08004887 	.word	0x08004887
 8004820:	08004879 	.word	0x08004879
 8004824:	2b40      	cmp	r3, #64	@ 0x40
 8004826:	d02a      	beq.n	800487e <UART_SetConfig+0x8aa>
 8004828:	e02d      	b.n	8004886 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800482a:	f7fe ff61 	bl	80036f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800482e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004830:	e02f      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe ff70 	bl	800371c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004840:	e027      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004842:	f107 0318 	add.w	r3, r7, #24
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f8bc 	bl	80039c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004850:	e01f      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004852:	4b21      	ldr	r3, [pc, #132]	@ (80048d8 <UART_SetConfig+0x904>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800485e:	4b1e      	ldr	r3, [pc, #120]	@ (80048d8 <UART_SetConfig+0x904>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	08db      	lsrs	r3, r3, #3
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <UART_SetConfig+0x90c>)
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004870:	e00f      	b.n	8004892 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004872:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <UART_SetConfig+0x90c>)
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004876:	e00c      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004878:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <UART_SetConfig+0x910>)
 800487a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800487c:	e009      	b.n	8004892 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004884:	e005      	b.n	8004892 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 81ee 	beq.w	8004c76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	4a12      	ldr	r2, [pc, #72]	@ (80048e8 <UART_SetConfig+0x914>)
 80048a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d305      	bcc.n	80048ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d910      	bls.n	80048ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048d0:	e1d1      	b.n	8004c76 <UART_SetConfig+0xca2>
 80048d2:	bf00      	nop
 80048d4:	40011c00 	.word	0x40011c00
 80048d8:	58024400 	.word	0x58024400
 80048dc:	58000c00 	.word	0x58000c00
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	003d0900 	.word	0x003d0900
 80048e8:	08005374 	.word	0x08005374
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	2200      	movs	r2, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	60fa      	str	r2, [r7, #12]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	4ac0      	ldr	r2, [pc, #768]	@ (8004bfc <UART_SetConfig+0xc28>)
 80048fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2200      	movs	r2, #0
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800490a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800490e:	f7fb fced 	bl	80002ec <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	020b      	lsls	r3, r1, #8
 8004924:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004928:	0202      	lsls	r2, r0, #8
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	6849      	ldr	r1, [r1, #4]
 800492e:	0849      	lsrs	r1, r1, #1
 8004930:	2000      	movs	r0, #0
 8004932:	460c      	mov	r4, r1
 8004934:	4605      	mov	r5, r0
 8004936:	eb12 0804 	adds.w	r8, r2, r4
 800493a:	eb43 0905 	adc.w	r9, r3, r5
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	469a      	mov	sl, r3
 8004946:	4693      	mov	fp, r2
 8004948:	4652      	mov	r2, sl
 800494a:	465b      	mov	r3, fp
 800494c:	4640      	mov	r0, r8
 800494e:	4649      	mov	r1, r9
 8004950:	f7fb fccc 	bl	80002ec <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004962:	d308      	bcc.n	8004976 <UART_SetConfig+0x9a2>
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496a:	d204      	bcs.n	8004976 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e17f      	b.n	8004c76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800497c:	e17b      	b.n	8004c76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004986:	f040 80bd 	bne.w	8004b04 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800498a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800498e:	2b20      	cmp	r3, #32
 8004990:	dc48      	bgt.n	8004a24 <UART_SetConfig+0xa50>
 8004992:	2b00      	cmp	r3, #0
 8004994:	db7b      	blt.n	8004a8e <UART_SetConfig+0xaba>
 8004996:	2b20      	cmp	r3, #32
 8004998:	d879      	bhi.n	8004a8e <UART_SetConfig+0xaba>
 800499a:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <UART_SetConfig+0x9cc>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	08004a2b 	.word	0x08004a2b
 80049a4:	08004a33 	.word	0x08004a33
 80049a8:	08004a8f 	.word	0x08004a8f
 80049ac:	08004a8f 	.word	0x08004a8f
 80049b0:	08004a3b 	.word	0x08004a3b
 80049b4:	08004a8f 	.word	0x08004a8f
 80049b8:	08004a8f 	.word	0x08004a8f
 80049bc:	08004a8f 	.word	0x08004a8f
 80049c0:	08004a4b 	.word	0x08004a4b
 80049c4:	08004a8f 	.word	0x08004a8f
 80049c8:	08004a8f 	.word	0x08004a8f
 80049cc:	08004a8f 	.word	0x08004a8f
 80049d0:	08004a8f 	.word	0x08004a8f
 80049d4:	08004a8f 	.word	0x08004a8f
 80049d8:	08004a8f 	.word	0x08004a8f
 80049dc:	08004a8f 	.word	0x08004a8f
 80049e0:	08004a5b 	.word	0x08004a5b
 80049e4:	08004a8f 	.word	0x08004a8f
 80049e8:	08004a8f 	.word	0x08004a8f
 80049ec:	08004a8f 	.word	0x08004a8f
 80049f0:	08004a8f 	.word	0x08004a8f
 80049f4:	08004a8f 	.word	0x08004a8f
 80049f8:	08004a8f 	.word	0x08004a8f
 80049fc:	08004a8f 	.word	0x08004a8f
 8004a00:	08004a8f 	.word	0x08004a8f
 8004a04:	08004a8f 	.word	0x08004a8f
 8004a08:	08004a8f 	.word	0x08004a8f
 8004a0c:	08004a8f 	.word	0x08004a8f
 8004a10:	08004a8f 	.word	0x08004a8f
 8004a14:	08004a8f 	.word	0x08004a8f
 8004a18:	08004a8f 	.word	0x08004a8f
 8004a1c:	08004a8f 	.word	0x08004a8f
 8004a20:	08004a81 	.word	0x08004a81
 8004a24:	2b40      	cmp	r3, #64	@ 0x40
 8004a26:	d02e      	beq.n	8004a86 <UART_SetConfig+0xab2>
 8004a28:	e031      	b.n	8004a8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fd fc77 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8004a2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a30:	e033      	b.n	8004a9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a32:	f7fd fc89 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8004a36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a38:	e02f      	b.n	8004a9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fe6c 	bl	800371c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a48:	e027      	b.n	8004a9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a4a:	f107 0318 	add.w	r3, r7, #24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe ffb8 	bl	80039c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a58:	e01f      	b.n	8004a9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a5a:	4b69      	ldr	r3, [pc, #420]	@ (8004c00 <UART_SetConfig+0xc2c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a66:	4b66      	ldr	r3, [pc, #408]	@ (8004c00 <UART_SetConfig+0xc2c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	08db      	lsrs	r3, r3, #3
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	4a64      	ldr	r2, [pc, #400]	@ (8004c04 <UART_SetConfig+0xc30>)
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a78:	e00f      	b.n	8004a9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004a7a:	4b62      	ldr	r3, [pc, #392]	@ (8004c04 <UART_SetConfig+0xc30>)
 8004a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a7e:	e00c      	b.n	8004a9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a80:	4b61      	ldr	r3, [pc, #388]	@ (8004c08 <UART_SetConfig+0xc34>)
 8004a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a84:	e009      	b.n	8004a9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a8c:	e005      	b.n	8004a9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80ea 	beq.w	8004c76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	4a55      	ldr	r2, [pc, #340]	@ (8004bfc <UART_SetConfig+0xc28>)
 8004aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab4:	005a      	lsls	r2, r3, #1
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	441a      	add	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	d916      	bls.n	8004afc <UART_SetConfig+0xb28>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad4:	d212      	bcs.n	8004afc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f023 030f 	bic.w	r3, r3, #15
 8004ade:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004aee:	4313      	orrs	r3, r2
 8004af0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e0bc      	b.n	8004c76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b02:	e0b8      	b.n	8004c76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	dc4b      	bgt.n	8004ba4 <UART_SetConfig+0xbd0>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f2c0 8087 	blt.w	8004c20 <UART_SetConfig+0xc4c>
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	f200 8084 	bhi.w	8004c20 <UART_SetConfig+0xc4c>
 8004b18:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0xb4c>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004bab 	.word	0x08004bab
 8004b24:	08004bb3 	.word	0x08004bb3
 8004b28:	08004c21 	.word	0x08004c21
 8004b2c:	08004c21 	.word	0x08004c21
 8004b30:	08004bbb 	.word	0x08004bbb
 8004b34:	08004c21 	.word	0x08004c21
 8004b38:	08004c21 	.word	0x08004c21
 8004b3c:	08004c21 	.word	0x08004c21
 8004b40:	08004bcb 	.word	0x08004bcb
 8004b44:	08004c21 	.word	0x08004c21
 8004b48:	08004c21 	.word	0x08004c21
 8004b4c:	08004c21 	.word	0x08004c21
 8004b50:	08004c21 	.word	0x08004c21
 8004b54:	08004c21 	.word	0x08004c21
 8004b58:	08004c21 	.word	0x08004c21
 8004b5c:	08004c21 	.word	0x08004c21
 8004b60:	08004bdb 	.word	0x08004bdb
 8004b64:	08004c21 	.word	0x08004c21
 8004b68:	08004c21 	.word	0x08004c21
 8004b6c:	08004c21 	.word	0x08004c21
 8004b70:	08004c21 	.word	0x08004c21
 8004b74:	08004c21 	.word	0x08004c21
 8004b78:	08004c21 	.word	0x08004c21
 8004b7c:	08004c21 	.word	0x08004c21
 8004b80:	08004c21 	.word	0x08004c21
 8004b84:	08004c21 	.word	0x08004c21
 8004b88:	08004c21 	.word	0x08004c21
 8004b8c:	08004c21 	.word	0x08004c21
 8004b90:	08004c21 	.word	0x08004c21
 8004b94:	08004c21 	.word	0x08004c21
 8004b98:	08004c21 	.word	0x08004c21
 8004b9c:	08004c21 	.word	0x08004c21
 8004ba0:	08004c13 	.word	0x08004c13
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d037      	beq.n	8004c18 <UART_SetConfig+0xc44>
 8004ba8:	e03a      	b.n	8004c20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7fd fbb7 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8004bae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb0:	e03c      	b.n	8004c2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb2:	f7fd fbc9 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8004bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb8:	e038      	b.n	8004c2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fdac 	bl	800371c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bc8:	e030      	b.n	8004c2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bca:	f107 0318 	add.w	r3, r7, #24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fef8 	bl	80039c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd8:	e028      	b.n	8004c2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bda:	4b09      	ldr	r3, [pc, #36]	@ (8004c00 <UART_SetConfig+0xc2c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d012      	beq.n	8004c0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <UART_SetConfig+0xc2c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	4a04      	ldr	r2, [pc, #16]	@ (8004c04 <UART_SetConfig+0xc30>)
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bf8:	e018      	b.n	8004c2c <UART_SetConfig+0xc58>
 8004bfa:	bf00      	nop
 8004bfc:	08005374 	.word	0x08005374
 8004c00:	58024400 	.word	0x58024400
 8004c04:	03d09000 	.word	0x03d09000
 8004c08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ca0 <UART_SetConfig+0xccc>)
 8004c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c10:	e00c      	b.n	8004c2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c12:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <UART_SetConfig+0xcd0>)
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c16:	e009      	b.n	8004c2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c1e:	e005      	b.n	8004c2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c2a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d021      	beq.n	8004c76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <UART_SetConfig+0xcd4>)
 8004c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	441a      	add	r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	2b0f      	cmp	r3, #15
 8004c5a:	d909      	bls.n	8004c70 <UART_SetConfig+0xc9c>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c62:	d205      	bcs.n	8004c70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e002      	b.n	8004c76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c92:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3748      	adds	r7, #72	@ 0x48
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca0:	03d09000 	.word	0x03d09000
 8004ca4:	003d0900 	.word	0x003d0900
 8004ca8:	08005374 	.word	0x08005374

08004cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004daa:	d10a      	bne.n	8004dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b098      	sub	sp, #96	@ 0x60
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e00:	f7fb ffc2 	bl	8000d88 <HAL_GetTick>
 8004e04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d12f      	bne.n	8004e74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f88e 	bl	8004f44 <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d022      	beq.n	8004e74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e6      	bne.n	8004e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e063      	b.n	8004f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d149      	bne.n	8004f16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f857 	bl	8004f44 <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d03c      	beq.n	8004f16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e6      	bne.n	8004e9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3308      	adds	r3, #8
 8004eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eee:	61fa      	str	r2, [r7, #28]
 8004ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	617b      	str	r3, [r7, #20]
   return(result);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e012      	b.n	8004f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3758      	adds	r7, #88	@ 0x58
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f54:	e04f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d04b      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fb ff13 	bl	8000d88 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e04e      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d037      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b80      	cmp	r3, #128	@ 0x80
 8004f8a:	d034      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	d031      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d110      	bne.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f839 	bl	8005020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e029      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd0:	d111      	bne.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f81f 	bl	8005020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e00f      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	bf0c      	ite	eq
 8005006:	2301      	moveq	r3, #1
 8005008:	2300      	movne	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	429a      	cmp	r2, r3
 8005012:	d0a0      	beq.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b095      	sub	sp, #84	@ 0x54
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800503c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005046:	643b      	str	r3, [r7, #64]	@ 0x40
 8005048:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800504c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e6      	bne.n	8005028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3308      	adds	r3, #8
 8005060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	61fb      	str	r3, [r7, #28]
   return(result);
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	4b1e      	ldr	r3, [pc, #120]	@ (80050e8 <UART_EndRxTransfer+0xc8>)
 800506e:	4013      	ands	r3, r2
 8005070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800507a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e5      	bne.n	800505a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005092:	2b01      	cmp	r3, #1
 8005094:	d118      	bne.n	80050c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 0310 	bic.w	r3, r3, #16
 80050aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050dc:	bf00      	nop
 80050de:	3754      	adds	r7, #84	@ 0x54
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	effffffe 	.word	0xeffffffe

080050ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_UARTEx_DisableFifoMode+0x16>
 80050fe:	2302      	movs	r3, #2
 8005100:	e027      	b.n	8005152 <HAL_UARTEx_DisableFifoMode+0x66>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2224      	movs	r2, #36	@ 0x24
 800510e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005172:	2302      	movs	r3, #2
 8005174:	e02d      	b.n	80051d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2224      	movs	r2, #36	@ 0x24
 8005182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f850 	bl	8005258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e02d      	b.n	800524e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2224      	movs	r2, #36	@ 0x24
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f812 	bl	8005258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005278:	e031      	b.n	80052de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800527a:	2310      	movs	r3, #16
 800527c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800527e:	2310      	movs	r3, #16
 8005280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	0e5b      	lsrs	r3, r3, #25
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	0f5b      	lsrs	r3, r3, #29
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	7b3a      	ldrb	r2, [r7, #12]
 80052a6:	4911      	ldr	r1, [pc, #68]	@ (80052ec <UARTEx_SetNbDataToProcess+0x94>)
 80052a8:	5c8a      	ldrb	r2, [r1, r2]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052ae:	7b3a      	ldrb	r2, [r7, #12]
 80052b0:	490f      	ldr	r1, [pc, #60]	@ (80052f0 <UARTEx_SetNbDataToProcess+0x98>)
 80052b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	7b7a      	ldrb	r2, [r7, #13]
 80052c4:	4909      	ldr	r1, [pc, #36]	@ (80052ec <UARTEx_SetNbDataToProcess+0x94>)
 80052c6:	5c8a      	ldrb	r2, [r1, r2]
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052cc:	7b7a      	ldrb	r2, [r7, #13]
 80052ce:	4908      	ldr	r1, [pc, #32]	@ (80052f0 <UARTEx_SetNbDataToProcess+0x98>)
 80052d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	0800538c 	.word	0x0800538c
 80052f0:	08005394 	.word	0x08005394

080052f4 <memset>:
 80052f4:	4402      	add	r2, r0
 80052f6:	4603      	mov	r3, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4d0d      	ldr	r5, [pc, #52]	@ (800533c <__libc_init_array+0x38>)
 8005308:	4c0d      	ldr	r4, [pc, #52]	@ (8005340 <__libc_init_array+0x3c>)
 800530a:	1b64      	subs	r4, r4, r5
 800530c:	10a4      	asrs	r4, r4, #2
 800530e:	2600      	movs	r6, #0
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	4d0b      	ldr	r5, [pc, #44]	@ (8005344 <__libc_init_array+0x40>)
 8005316:	4c0c      	ldr	r4, [pc, #48]	@ (8005348 <__libc_init_array+0x44>)
 8005318:	f000 f818 	bl	800534c <_init>
 800531c:	1b64      	subs	r4, r4, r5
 800531e:	10a4      	asrs	r4, r4, #2
 8005320:	2600      	movs	r6, #0
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	f855 3b04 	ldr.w	r3, [r5], #4
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	f855 3b04 	ldr.w	r3, [r5], #4
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	080053a4 	.word	0x080053a4
 8005340:	080053a4 	.word	0x080053a4
 8005344:	080053a4 	.word	0x080053a4
 8005348:	080053a8 	.word	0x080053a8

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
