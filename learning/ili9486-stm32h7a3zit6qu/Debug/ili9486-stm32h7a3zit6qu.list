
ili9486-stm32h7a3zit6qu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035f4  080078fc  080078fc  000088fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aef0  0800aef0  0000bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  24000000  0800af00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  24000028  0800af28  0000c028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000198  0800af28  0000c198  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 10 .debug_info   000135ce  00000000  00000000  0000c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024ff  00000000  00000000  0001f624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000de0  00000000  00000000  00021b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ab7  00000000  00000000  00022908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000309e7  00000000  00000000  000233bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013257  00000000  00000000  00053da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013eb00  00000000  00000000  00066ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a5afd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a20  00000000  00000000  001a5b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001a9560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000028 	.word	0x24000028
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080078e4 	.word	0x080078e4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400002c 	.word	0x2400002c
 80002e8:	080078e4 	.word	0x080078e4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <Driver_Delay_ms>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
void Driver_Delay_ms(unsigned long xms)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f002 f847 	bl	8002678 <HAL_Delay>

}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <LCD_Reset>:
  for (int j = xus; j > 0; j--);
}


static void LCD_Reset(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    LCD_RST_1;
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <LCD_Reset+0x44>)
 8000600:	f002 faf2 	bl	8002be8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000608:	f7ff ffe8 	bl	80005dc <Driver_Delay_ms>
    LCD_RST_0;
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000612:	4809      	ldr	r0, [pc, #36]	@ (8000638 <LCD_Reset+0x44>)
 8000614:	f002 fae8 	bl	8002be8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800061c:	f7ff ffde 	bl	80005dc <Driver_Delay_ms>
    LCD_RST_1;
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <LCD_Reset+0x44>)
 8000628:	f002 fade 	bl	8002be8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000630:	f7ff ffd4 	bl	80005dc <Driver_Delay_ms>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58020800 	.word	0x58020800

0800063c <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
//    PWM_SetValue(value);
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LCD_WriteReg+0x44>)
 8000666:	f002 fabf 	bl	8002be8 <HAL_GPIO_WritePin>
    LCD_CS_0;
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <LCD_WriteReg+0x48>)
 8000672:	f002 fab9 	bl	8002be8 <HAL_GPIO_WritePin>
//    SPI4W_Write_Byte(Reg);
    HAL_SPI_Transmit(&hspi1, &Reg, 1U, 100U);
 8000676:	1df9      	adds	r1, r7, #7
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	4808      	ldr	r0, [pc, #32]	@ (80006a0 <LCD_WriteReg+0x4c>)
 800067e:	f005 fc4d 	bl	8005f1c <HAL_SPI_Transmit>
    LCD_CS_1;
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <LCD_WriteReg+0x48>)
 800068a:	f002 faad 	bl	8002be8 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	58020800 	.word	0x58020800
 800069c:	58020400 	.word	0x58020400
 80006a0:	24000078 	.word	0x24000078

080006a4 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LCD_WriteData+0x44>)
 80006b6:	f002 fa97 	bl	8002be8 <HAL_GPIO_WritePin>
    LCD_CS_0;
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c0:	480a      	ldr	r0, [pc, #40]	@ (80006ec <LCD_WriteData+0x48>)
 80006c2:	f002 fa91 	bl	8002be8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &Data, 1U, 100U);
 80006c6:	1df9      	adds	r1, r7, #7
 80006c8:	2364      	movs	r3, #100	@ 0x64
 80006ca:	2201      	movs	r2, #1
 80006cc:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <LCD_WriteData+0x4c>)
 80006ce:	f005 fc25 	bl	8005f1c <HAL_SPI_Transmit>
//    HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//    SPI4W_Write_Byte(Data >> 8);
//    SPI4W_Write_Byte(Data & 0XFF);
    LCD_CS_1;
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <LCD_WriteData+0x48>)
 80006da:	f002 fa85 	bl	8002be8 <HAL_GPIO_WritePin>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	58020800 	.word	0x58020800
 80006ec:	58020400 	.word	0x58020400
 80006f0:	24000078 	.word	0x24000078

080006f4 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000706:	4816      	ldr	r0, [pc, #88]	@ (8000760 <LCD_Write_AllData+0x6c>)
 8000708:	f002 fa6e 	bl	8002be8 <HAL_GPIO_WritePin>
    LCD_CS_0;
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000712:	4814      	ldr	r0, [pc, #80]	@ (8000764 <LCD_Write_AllData+0x70>)
 8000714:	f002 fa68 	bl	8002be8 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e012      	b.n	8000744 <LCD_Write_AllData+0x50>
//        HAL_SPI_Transmit(&hspi1, &Data, 1U, 100U);

    	uint8_t data[2];
    	data[0] = Data >> 8;
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	723b      	strb	r3, [r7, #8]
    	data[1] = Data;
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	727b      	strb	r3, [r7, #9]

        HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 2, 1000);
 800072e:	f107 0108 	add.w	r1, r7, #8
 8000732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000736:	2202      	movs	r2, #2
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <LCD_Write_AllData+0x74>)
 800073a:	f005 fbef 	bl	8005f1c <HAL_SPI_Transmit>
    for(i = 0; i < DataLen; i++) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3e8      	bcc.n	800071e <LCD_Write_AllData+0x2a>
//        HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 1000);
//        HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//        SPI4W_Write_Byte(Data >> 8);
//        SPI4W_Write_Byte(Data & 0XFF);
    }
    LCD_CS_1;
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <LCD_Write_AllData+0x70>)
 8000754:	f002 fa48 	bl	8002be8 <HAL_GPIO_WritePin>
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58020800 	.word	0x58020800
 8000764:	58020400 	.word	0x58020400
 8000768:	24000078 	.word	0x24000078

0800076c <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8000770:	20f9      	movs	r0, #249	@ 0xf9
 8000772:	f7ff ff6f 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff94 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x08);
 800077c:	2008      	movs	r0, #8
 800077e:	f7ff ff91 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8000782:	20c0      	movs	r0, #192	@ 0xc0
 8000784:	f7ff ff66 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8000788:	2019      	movs	r0, #25
 800078a:	f7ff ff8b 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 800078e:	201a      	movs	r0, #26
 8000790:	f7ff ff88 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8000794:	20c1      	movs	r0, #193	@ 0xc1
 8000796:	f7ff ff5d 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 800079a:	2045      	movs	r0, #69	@ 0x45
 800079c:	f7ff ff82 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff ff7f 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 80007a6:	20c2      	movs	r0, #194	@ 0xc2
 80007a8:	f7ff ff54 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x33);
 80007ac:	2033      	movs	r0, #51	@ 0x33
 80007ae:	f7ff ff79 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 80007b2:	20c5      	movs	r0, #197	@ 0xc5
 80007b4:	f7ff ff4e 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff73 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 80007be:	2028      	movs	r0, #40	@ 0x28
 80007c0:	f7ff ff70 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 80007c4:	20b1      	movs	r0, #177	@ 0xb1
 80007c6:	f7ff ff45 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 80007ca:	20a0      	movs	r0, #160	@ 0xa0
 80007cc:	f7ff ff6a 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x11);
 80007d0:	2011      	movs	r0, #17
 80007d2:	f7ff ff67 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 80007d6:	20b4      	movs	r0, #180	@ 0xb4
 80007d8:	f7ff ff3c 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff ff61 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 80007e2:	20b6      	movs	r0, #182	@ 0xb6
 80007e4:	f7ff ff36 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x00);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ff5b 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 80007ee:	2042      	movs	r0, #66	@ 0x42
 80007f0:	f7ff ff58 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x3B);
 80007f4:	203b      	movs	r0, #59	@ 0x3b
 80007f6:	f7ff ff55 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 80007fa:	20b7      	movs	r0, #183	@ 0xb7
 80007fc:	f7ff ff2a 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x07);
 8000800:	2007      	movs	r0, #7
 8000802:	f7ff ff4f 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8000806:	20e0      	movs	r0, #224	@ 0xe0
 8000808:	f7ff ff24 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 800080c:	201f      	movs	r0, #31
 800080e:	f7ff ff49 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x25);
 8000812:	2025      	movs	r0, #37	@ 0x25
 8000814:	f7ff ff46 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x22);
 8000818:	2022      	movs	r0, #34	@ 0x22
 800081a:	f7ff ff43 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x0B);
 800081e:	200b      	movs	r0, #11
 8000820:	f7ff ff40 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x06);
 8000824:	2006      	movs	r0, #6
 8000826:	f7ff ff3d 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x0A);
 800082a:	200a      	movs	r0, #10
 800082c:	f7ff ff3a 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x4E);
 8000830:	204e      	movs	r0, #78	@ 0x4e
 8000832:	f7ff ff37 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0xC6);
 8000836:	20c6      	movs	r0, #198	@ 0xc6
 8000838:	f7ff ff34 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x39);
 800083c:	2039      	movs	r0, #57	@ 0x39
 800083e:	f7ff ff31 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ff2e 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff2b 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff28 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff ff25 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff22 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ff1f 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 8000866:	20e1      	movs	r0, #225	@ 0xe1
 8000868:	f7ff fef4 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 800086c:	201f      	movs	r0, #31
 800086e:	f7ff ff19 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8000872:	203f      	movs	r0, #63	@ 0x3f
 8000874:	f7ff ff16 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8000878:	203f      	movs	r0, #63	@ 0x3f
 800087a:	f7ff ff13 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 800087e:	200f      	movs	r0, #15
 8000880:	f7ff ff10 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8000884:	201f      	movs	r0, #31
 8000886:	f7ff ff0d 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 800088a:	200f      	movs	r0, #15
 800088c:	f7ff ff0a 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x46);
 8000890:	2046      	movs	r0, #70	@ 0x46
 8000892:	f7ff ff07 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x49);
 8000896:	2049      	movs	r0, #73	@ 0x49
 8000898:	f7ff ff04 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x31);
 800089c:	2031      	movs	r0, #49	@ 0x31
 800089e:	f7ff ff01 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x05);
 80008a2:	2005      	movs	r0, #5
 80008a4:	f7ff fefe 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x09);
 80008a8:	2009      	movs	r0, #9
 80008aa:	f7ff fefb 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x03);
 80008ae:	2003      	movs	r0, #3
 80008b0:	f7ff fef8 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x1C);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f7ff fef5 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x1A);
 80008ba:	201a      	movs	r0, #26
 80008bc:	f7ff fef2 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff feef 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 80008c6:	20f1      	movs	r0, #241	@ 0xf1
 80008c8:	f7ff fec4 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x36);
 80008cc:	2036      	movs	r0, #54	@ 0x36
 80008ce:	f7ff fee9 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x04);
 80008d2:	2004      	movs	r0, #4
 80008d4:	f7ff fee6 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fee3 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x3C);
 80008de:	203c      	movs	r0, #60	@ 0x3c
 80008e0:	f7ff fee0 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80008e4:	200f      	movs	r0, #15
 80008e6:	f7ff fedd 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80008ea:	200f      	movs	r0, #15
 80008ec:	f7ff feda 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0xA4);
 80008f0:	20a4      	movs	r0, #164	@ 0xa4
 80008f2:	f7ff fed7 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x02);
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff fed4 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 80008fc:	20f2      	movs	r0, #242	@ 0xf2
 80008fe:	f7ff fea9 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x18);
 8000902:	2018      	movs	r0, #24
 8000904:	f7ff fece 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0xA3);
 8000908:	20a3      	movs	r0, #163	@ 0xa3
 800090a:	f7ff fecb 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x12);
 800090e:	2012      	movs	r0, #18
 8000910:	f7ff fec8 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x02);
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fec5 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x32);
 800091a:	2032      	movs	r0, #50	@ 0x32
 800091c:	f7ff fec2 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x12);
 8000920:	2012      	movs	r0, #18
 8000922:	f7ff febf 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0xFF);
 8000926:	20ff      	movs	r0, #255	@ 0xff
 8000928:	f7ff febc 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x32);
 800092c:	2032      	movs	r0, #50	@ 0x32
 800092e:	f7ff feb9 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feb6 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 8000938:	20f4      	movs	r0, #244	@ 0xf4
 800093a:	f7ff fe8b 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x40);
 800093e:	2040      	movs	r0, #64	@ 0x40
 8000940:	f7ff feb0 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fead 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x08);
 800094a:	2008      	movs	r0, #8
 800094c:	f7ff feaa 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x91);
 8000950:	2091      	movs	r0, #145	@ 0x91
 8000952:	f7ff fea7 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x04);
 8000956:	2004      	movs	r0, #4
 8000958:	f7ff fea4 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 800095c:	20f8      	movs	r0, #248	@ 0xf8
 800095e:	f7ff fe79 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x21);
 8000962:	2021      	movs	r0, #33	@ 0x21
 8000964:	f7ff fe9e 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(0x04);
 8000968:	2004      	movs	r0, #4
 800096a:	f7ff fe9b 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 800096e:	203a      	movs	r0, #58	@ 0x3a
 8000970:	f7ff fe70 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0x55);
 8000974:	2055      	movs	r0, #85	@ 0x55
 8000976:	f7ff fe95 	bl	80006a4 <LCD_WriteData>

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 800098a:	2300      	movs	r3, #0
 800098c:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 800098e:	2300      	movs	r3, #0
 8000990:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b07      	cmp	r3, #7
 8000996:	d83b      	bhi.n	8000a10 <LCD_SetGramScanWay+0x90>
 8000998:	a201      	add	r2, pc, #4	@ (adr r2, 80009a0 <LCD_SetGramScanWay+0x20>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	080009c1 	.word	0x080009c1
 80009a4:	080009cb 	.word	0x080009cb
 80009a8:	080009d5 	.word	0x080009d5
 80009ac:	080009df 	.word	0x080009df
 80009b0:	080009e9 	.word	0x080009e9
 80009b4:	080009f3 	.word	0x080009f3
 80009b8:	080009fd 	.word	0x080009fd
 80009bc:	08000a07 	.word	0x08000a07
    case L2R_U2D:                       // Rotation=        0
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80009c0:	2308      	movs	r3, #8
 80009c2:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=1, GS=0
 80009c4:	2322      	movs	r3, #34	@ 0x22
 80009c6:	81bb      	strh	r3, [r7, #12]
        break;
 80009c8:	e022      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80009ca:	2308      	movs	r3, #8
 80009cc:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80009ce:	2362      	movs	r3, #98	@ 0x62
 80009d0:	81bb      	strh	r3, [r7, #12]
        break;
 80009d2:	e01d      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80009d4:	2308      	movs	r3, #8
 80009d6:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80009d8:	2302      	movs	r3, #2
 80009da:	81bb      	strh	r3, [r7, #12]
        break;
 80009dc:	e018      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC                 // Rotation=        2
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 80009de:	2308      	movs	r3, #8
 80009e0:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=1
 80009e2:	2342      	movs	r3, #66	@ 0x42
 80009e4:	81bb      	strh	r3, [r7, #12]
        break;
 80009e6:	e013      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80009e8:	2328      	movs	r3, #40	@ 0x28
 80009ea:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80009ec:	2322      	movs	r3, #34	@ 0x22
 80009ee:	81bb      	strh	r3, [r7, #12]
        break;
 80009f0:	e00e      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6                 // Rotation=        1
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80009f2:	2328      	movs	r3, #40	@ 0x28
 80009f4:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=0
 80009f6:	2302      	movs	r3, #2
 80009f8:	81bb      	strh	r3, [r7, #12]
        break;
 80009fa:	e009      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA                 // Rotation=        3
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 80009fc:	2328      	movs	r3, #40	@ 0x28
 80009fe:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;          // DISPFUNCCTRL:    ISC='b0010, SM=0, SS=1, GS=1
 8000a00:	2362      	movs	r3, #98	@ 0x62
 8000a02:	81bb      	strh	r3, [r7, #12]
        break;
 8000a04:	e004      	b.n	8000a10 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;    // MADCTL: BGR | MV
 8000a06:	2328      	movs	r3, #40	@ 0x28
 8000a08:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8000a0a:	2342      	movs	r3, #66	@ 0x42
 8000a0c:	81bb      	strh	r3, [r7, #12]
        break;
 8000a0e:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <LCD_SetGramScanWay+0x100>)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d008      	beq.n	8000a2e <LCD_SetGramScanWay+0xae>
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d005      	beq.n	8000a2e <LCD_SetGramScanWay+0xae>
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d002      	beq.n	8000a2e <LCD_SetGramScanWay+0xae>
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d108      	bne.n	8000a40 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <LCD_SetGramScanWay+0x100>)
 8000a30:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a34:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <LCD_SetGramScanWay+0x100>)
 8000a38:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a3c:	805a      	strh	r2, [r3, #2]
 8000a3e:	e007      	b.n	8000a50 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <LCD_SetGramScanWay+0x100>)
 8000a42:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000a46:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <LCD_SetGramScanWay+0x100>)
 8000a4a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a4e:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 8000a50:	20b6      	movs	r0, #182	@ 0xb6
 8000a52:	f7ff fdff 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(0X00);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fe24 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8000a5c:	89bb      	ldrh	r3, [r7, #12]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe1f 	bl	80006a4 <LCD_WriteData>

    LCD_WriteReg(0x36);
 8000a66:	2036      	movs	r0, #54	@ 0x36
 8000a68:	f7ff fdf4 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe17 	bl	80006a4 <LCD_WriteData>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000044 	.word	0x24000044

08000a84 <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 8000a94:	f7ff fdae 	bl	80005f4 <LCD_Reset>
    
    if(LCD_BLval > 255)
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d901      	bls.n	8000aa2 <LCD_Init+0x1e>
        LCD_BLval = 255;
 8000a9e:	23ff      	movs	r3, #255	@ 0xff
 8000aa0:	80bb      	strh	r3, [r7, #4]
    LCD_SetBackLight(LCD_BLval);
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fdc9 	bl	800063c <LCD_SetBackLight>
    
    //Set the initialization register
    LCD_InitReg();
 8000aaa:	f7ff fe5f 	bl	800076c <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff65 	bl	8000980 <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 8000ab6:	20c8      	movs	r0, #200	@ 0xc8
 8000ab8:	f7ff fd90 	bl	80005dc <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 8000abc:	2011      	movs	r0, #17
 8000abe:	f7ff fdc9 	bl	8000654 <LCD_WriteReg>
    Driver_Delay_ms(120);
 8000ac2:	2078      	movs	r0, #120	@ 0x78
 8000ac4:	f7ff fd8a 	bl	80005dc <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 8000ac8:	2029      	movs	r0, #41	@ 0x29
 8000aca:	f7ff fdc3 	bl	8000654 <LCD_WriteReg>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 8000ad6:	b590      	push	{r4, r7, lr}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4604      	mov	r4, r0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4623      	mov	r3, r4
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	4603      	mov	r3, r0
 8000aea:	80bb      	strh	r3, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 8000af4:	202a      	movs	r0, #42	@ 0x2a
 8000af6:	f7ff fdad 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fdce 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fdc9 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	121b      	asrs	r3, r3, #8
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fdc2 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fdbb 	bl	80006a4 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 8000b2e:	202b      	movs	r0, #43	@ 0x2b
 8000b30:	f7ff fd90 	bl	8000654 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fdb1 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fdac 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 8000b4c:	883b      	ldrh	r3, [r7, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	121b      	asrs	r3, r3, #8
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fda5 	bl	80006a4 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 8000b5a:	883b      	ldrh	r3, [r7, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd9e 	bl	80006a4 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8000b68:	202c      	movs	r0, #44	@ 0x2c
 8000b6a:	f7ff fd73 	bl	8000654 <LCD_WriteReg>
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd90      	pop	{r4, r7, pc}

08000b76 <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	460a      	mov	r2, r1
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	88fa      	ldrh	r2, [r7, #6]
 8000b8a:	88b9      	ldrh	r1, [r7, #4]
 8000b8c:	88f8      	ldrh	r0, [r7, #6]
 8000b8e:	f7ff ffa2 	bl	8000ad6 <LCD_SetWindow>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	80fb      	strh	r3, [r7, #6]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	80bb      	strh	r3, [r7, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 8000bac:	88bb      	ldrh	r3, [r7, #4]
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	fb03 f202 	mul.w	r2, r3, r2
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd9b 	bl	80006f4 <LCD_Write_AllData>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <LCD_SetPointlColor+0x48>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	88fa      	ldrh	r2, [r7, #6]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d810      	bhi.n	8000c06 <LCD_SetPointlColor+0x3e>
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <LCD_SetPointlColor+0x48>)
 8000be6:	885b      	ldrh	r3, [r3, #2]
 8000be8:	88ba      	ldrh	r2, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d80b      	bhi.n	8000c06 <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 8000bee:	88ba      	ldrh	r2, [r7, #4]
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffbe 	bl	8000b76 <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffca 	bl	8000b9a <LCD_SetColor>
    }
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	24000044 	.word	0x24000044

08000c14 <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d915      	bls.n	8000c66 <LCD_SetArealColor+0x52>
 8000c3a:	883a      	ldrh	r2, [r7, #0]
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d911      	bls.n	8000c66 <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 8000c42:	883b      	ldrh	r3, [r7, #0]
 8000c44:	887a      	ldrh	r2, [r7, #2]
 8000c46:	88b9      	ldrh	r1, [r7, #4]
 8000c48:	88f8      	ldrh	r0, [r7, #6]
 8000c4a:	f7ff ff44 	bl	8000ad6 <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b299      	uxth	r1, r3
 8000c56:	883a      	ldrh	r2, [r7, #0]
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	8b3b      	ldrh	r3, [r7, #24]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff9a 	bl	8000b9a <LCD_SetColor>
    }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}
	...

08000c70 <LCD_Clear>:

void LCD_Clear(COLOR  Color)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <LCD_Clear+0x28>)
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <LCD_Clear+0x28>)
 8000c80:	8859      	ldrh	r1, [r3, #2]
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	460b      	mov	r3, r1
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ffc2 	bl	8000c14 <LCD_SetArealColor>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24000044 	.word	0x24000044

08000c9c <GUI_Swop>:
/******************************************************************************
  function: Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	80fb      	strh	r3, [r7, #6]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	80bb      	strh	r3, [r7, #4]
  POINT Temp;
  Temp = Point1;
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	81fb      	strh	r3, [r7, #14]
  Point1 = Point2;
 8000cb0:	88bb      	ldrh	r3, [r7, #4]
 8000cb2:	80fb      	strh	r3, [r7, #6]
  Point2 = Temp;
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	80bb      	strh	r3, [r7, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <GUI_Clear>:

/******************************************************************************
  function: Coordinate conversion
******************************************************************************/
void GUI_Clear(COLOR Color)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  LCD_Clear(Color);
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffcd 	bl	8000c70 <LCD_Clear>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <GUI_DrawPoint>:
  Color     :   Set color
  Dot_Pixel :   point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4623      	mov	r3, r4
 8000cf0:	80fb      	strh	r3, [r7, #6]
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	807b      	strh	r3, [r7, #2]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	707b      	strb	r3, [r7, #1]
  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000de8 <GUI_DrawPoint+0x108>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	88fa      	ldrh	r2, [r7, #6]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d86a      	bhi.n	8000dde <GUI_DrawPoint+0xfe>
 8000d08:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <GUI_DrawPoint+0x108>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	88ba      	ldrh	r2, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d865      	bhi.n	8000dde <GUI_DrawPoint+0xfe>
//    DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
    return;
  }

  int16_t XDir_Num , YDir_Num;
  if (DOT_STYLE == DOT_STYLE_DFT) {
 8000d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d138      	bne.n	8000d8c <GUI_DrawPoint+0xac>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	81fb      	strh	r3, [r7, #14]
 8000d1e:	e02d      	b.n	8000d7c <GUI_DrawPoint+0x9c>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	81bb      	strh	r3, [r7, #12]
 8000d24:	e01d      	b.n	8000d62 <GUI_DrawPoint+0x82>
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel + 1, Ypoint + YDir_Num - Dot_Pixel + 1, Color);
 8000d26:	89fa      	ldrh	r2, [r7, #14]
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	787b      	ldrb	r3, [r7, #1]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	b298      	uxth	r0, r3
 8000d3a:	89ba      	ldrh	r2, [r7, #12]
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	787b      	ldrb	r3, [r7, #1]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff ff39 	bl	8000bc8 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000d56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	81bb      	strh	r3, [r7, #12]
 8000d62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d66:	787b      	ldrb	r3, [r7, #1]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbda      	blt.n	8000d26 <GUI_DrawPoint+0x46>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3301      	adds	r3, #1
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	81fb      	strh	r3, [r7, #14]
 8000d7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	3b01      	subs	r3, #1
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dbca      	blt.n	8000d20 <GUI_DrawPoint+0x40>
 8000d8a:	e029      	b.n	8000de0 <GUI_DrawPoint+0x100>
      }
    }
  } else {
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	81fb      	strh	r3, [r7, #14]
 8000d90:	e01f      	b.n	8000dd2 <GUI_DrawPoint+0xf2>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	81bb      	strh	r3, [r7, #12]
 8000d96:	e011      	b.n	8000dbc <GUI_DrawPoint+0xdc>
        //CAL! The following appears to have a bug that causes the Xpoint to be
        //CAL! shifted by -1 and the Ypoint to be shifted by -1. The net result
        //CAL! is that attempts to write to X=0 or Y=0 will cause an underflow,
        //CAL! leading to a Column/Page Address out of bounds.
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num, Ypoint + YDir_Num, Color);
 8000d98:	89fa      	ldrh	r2, [r7, #14]
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	89ba      	ldrh	r2, [r7, #12]
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	887a      	ldrh	r2, [r7, #2]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff ff0c 	bl	8000bc8 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000db0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	81bb      	strh	r3, [r7, #12]
 8000dbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbe8      	blt.n	8000d98 <GUI_DrawPoint+0xb8>
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	81fb      	strh	r3, [r7, #14]
 8000dd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000dd6:	787b      	ldrb	r3, [r7, #1]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbda      	blt.n	8000d92 <GUI_DrawPoint+0xb2>
 8000ddc:	e000      	b.n	8000de0 <GUI_DrawPoint+0x100>
    return;
 8000dde:	bf00      	nop
      }
    }
  }
}
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000044 	.word	0x24000044

08000dec <GUI_DrawLine>:
  Yend   ：End point y coordinate
  Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08d      	sub	sp, #52	@ 0x34
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	4611      	mov	r1, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	80fb      	strh	r3, [r7, #6]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80bb      	strh	r3, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	807b      	strh	r3, [r7, #2]
 8000e06:	4613      	mov	r3, r2
 8000e08:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8000e0a:	4b56      	ldr	r3, [pc, #344]	@ (8000f64 <GUI_DrawLine+0x178>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f200 809f 	bhi.w	8000f54 <GUI_DrawLine+0x168>
 8000e16:	4b53      	ldr	r3, [pc, #332]	@ (8000f64 <GUI_DrawLine+0x178>)
 8000e18:	885b      	ldrh	r3, [r3, #2]
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f200 8099 	bhi.w	8000f54 <GUI_DrawLine+0x168>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8000e22:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <GUI_DrawLine+0x178>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f200 8093 	bhi.w	8000f54 <GUI_DrawLine+0x168>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f64 <GUI_DrawLine+0x178>)
 8000e30:	885b      	ldrh	r3, [r3, #2]
 8000e32:	883a      	ldrh	r2, [r7, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f200 808d 	bhi.w	8000f54 <GUI_DrawLine+0x168>
//    DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d905      	bls.n	8000e4e <GUI_DrawLine+0x62>
    GUI_Swop(Xstart, Xend);
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff27 	bl	8000c9c <GUI_Swop>
  if (Ystart > Yend)
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d905      	bls.n	8000e62 <GUI_DrawLine+0x76>
    GUI_Swop(Ystart, Yend);
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff1d 	bl	8000c9c <GUI_Swop>

  POINT Xpoint = Xstart;
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	84fb      	strh	r3, [r7, #38]	@ 0x26
  POINT Ypoint = Ystart;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bfb8      	it	lt
 8000e74:	425b      	neglt	r3, r3
 8000e76:	61bb      	str	r3, [r7, #24]
  int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8000e78:	883a      	ldrh	r2, [r7, #0]
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bfb8      	it	lt
 8000e82:	425b      	neglt	r3, r3
 8000e84:	425b      	negs	r3, r3
 8000e86:	617b      	str	r3, [r7, #20]

  // Increment direction, 1 is positive, -1 is counter;
  int XAddway = Xstart < Xend ? 1 : -1;
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d201      	bcs.n	8000e94 <GUI_DrawLine+0xa8>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e001      	b.n	8000e98 <GUI_DrawLine+0xac>
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	613b      	str	r3, [r7, #16]
  int YAddway = Ystart < Yend ? 1 : -1;
 8000e9a:	88ba      	ldrh	r2, [r7, #4]
 8000e9c:	883b      	ldrh	r3, [r7, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d201      	bcs.n	8000ea6 <GUI_DrawLine+0xba>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e001      	b.n	8000eaa <GUI_DrawLine+0xbe>
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	60fb      	str	r3, [r7, #12]

  //Cumulative error
  int Esp = dx + dy;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	623b      	str	r3, [r7, #32]
  char Line_Style_Temp = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	77fb      	strb	r3, [r7, #31]

  for (;;) {
    Line_Style_Temp++;
 8000eb8:	7ffb      	ldrb	r3, [r7, #31]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	77fb      	strb	r3, [r7, #31]
    //Painted dotted line, 2 point is really virtual
    if (Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 8000ebe:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d118      	bne.n	8000ef8 <GUI_DrawLine+0x10c>
 8000ec6:	7ffa      	ldrb	r2, [r7, #31]
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <GUI_DrawLine+0x17c>)
 8000eca:	fba3 1302 	umull	r1, r3, r3, r2
 8000ece:	0859      	lsrs	r1, r3, #1
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	440b      	add	r3, r1
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <GUI_DrawLine+0x10c>
      //DEBUG("LINE_DOTTED\r\n");
      GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8000ede:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000ee2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000ee4:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	9200      	str	r2, [sp, #0]
 8000eea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eee:	f7ff fef7 	bl	8000ce0 <GUI_DrawPoint>
      Line_Style_Temp = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	77fb      	strb	r3, [r7, #31]
 8000ef6:	e008      	b.n	8000f0a <GUI_DrawLine+0x11e>
    } else {
      GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8000ef8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000efc:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000efe:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000f00:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8000f02:	2401      	movs	r4, #1
 8000f04:	9400      	str	r4, [sp, #0]
 8000f06:	f7ff feeb 	bl	8000ce0 <GUI_DrawPoint>
    }
    if (2 * Esp >= dy) {
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dc0c      	bgt.n	8000f2e <GUI_DrawLine+0x142>
      if (Xpoint == Xend) break;
 8000f14:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d01d      	beq.n	8000f58 <GUI_DrawLine+0x16c>
      Esp += dy;
 8000f1c:	6a3a      	ldr	r2, [r7, #32]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4413      	add	r3, r2
 8000f22:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f2a:	4413      	add	r3, r2
 8000f2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx) {
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbbf      	blt.n	8000eb8 <GUI_DrawLine+0xcc>
      if (Ypoint == Yend) break;
 8000f38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d00d      	beq.n	8000f5c <GUI_DrawLine+0x170>
      Esp += dx;
 8000f40:	6a3a      	ldr	r2, [r7, #32]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4413      	add	r3, r2
 8000f46:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f4e:	4413      	add	r3, r2
 8000f50:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Line_Style_Temp++;
 8000f52:	e7b1      	b.n	8000eb8 <GUI_DrawLine+0xcc>
    return;
 8000f54:	bf00      	nop
 8000f56:	e002      	b.n	8000f5e <GUI_DrawLine+0x172>
      if (Xpoint == Xend) break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <GUI_DrawLine+0x172>
      if (Ypoint == Yend) break;
 8000f5c:	bf00      	nop
    }
  }
}
 8000f5e:	372c      	adds	r7, #44	@ 0x2c
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	24000044 	.word	0x24000044
 8000f68:	aaaaaaab 	.word	0xaaaaaaab

08000f6c <GUI_DrawRectangle>:
  Color  ：The color of the Rectangular segment
  Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80bb      	strh	r3, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	807b      	strh	r3, [r7, #2]
 8000f86:	4613      	mov	r3, r2
 8000f88:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8000f8a:	4b39      	ldr	r3, [pc, #228]	@ (8001070 <GUI_DrawRectangle+0x104>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	88fa      	ldrh	r2, [r7, #6]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d868      	bhi.n	8001066 <GUI_DrawRectangle+0xfa>
 8000f94:	4b36      	ldr	r3, [pc, #216]	@ (8001070 <GUI_DrawRectangle+0x104>)
 8000f96:	885b      	ldrh	r3, [r3, #2]
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d863      	bhi.n	8001066 <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8000f9e:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <GUI_DrawRectangle+0x104>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d85e      	bhi.n	8001066 <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8000fa8:	4b31      	ldr	r3, [pc, #196]	@ (8001070 <GUI_DrawRectangle+0x104>)
 8000faa:	885b      	ldrh	r3, [r3, #2]
 8000fac:	883a      	ldrh	r2, [r7, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d859      	bhi.n	8001066 <GUI_DrawRectangle+0xfa>
//    DEBUG("Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d905      	bls.n	8000fc6 <GUI_DrawRectangle+0x5a>
    GUI_Swop(Xstart, Xend);
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe6b 	bl	8000c9c <GUI_Swop>
  if (Ystart > Yend)
 8000fc6:	88ba      	ldrh	r2, [r7, #4]
 8000fc8:	883b      	ldrh	r3, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d905      	bls.n	8000fda <GUI_DrawRectangle+0x6e>
    GUI_Swop(Ystart, Yend);
 8000fce:	883a      	ldrh	r2, [r7, #0]
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe61 	bl	8000c9c <GUI_Swop>

  if (Filled ) {
 8000fda:	7f3b      	ldrb	r3, [r7, #28]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d009      	beq.n	8000ff4 <GUI_DrawRectangle+0x88>
    POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
  #elif HIGH_Speed_Show
    LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8000fe0:	883c      	ldrh	r4, [r7, #0]
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	88b9      	ldrh	r1, [r7, #4]
 8000fe6:	88f8      	ldrh	r0, [r7, #6]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4623      	mov	r3, r4
 8000fee:	f7ff fe11 	bl	8000c14 <LCD_SetArealColor>
 8000ff2:	e039      	b.n	8001068 <GUI_DrawRectangle+0xfc>
  #endif
  } else {
    GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8000ff4:	88bc      	ldrh	r4, [r7, #4]
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	88b9      	ldrh	r1, [r7, #4]
 8000ffa:	88f8      	ldrh	r0, [r7, #6]
 8000ffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2300      	movs	r3, #0
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	8b3b      	ldrh	r3, [r7, #24]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	4623      	mov	r3, r4
 800100c:	f7ff feee 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8001010:	883c      	ldrh	r4, [r7, #0]
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	88b9      	ldrh	r1, [r7, #4]
 8001016:	88f8      	ldrh	r0, [r7, #6]
 8001018:	f897 3020 	ldrb.w	r3, [r7, #32]
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2300      	movs	r3, #0
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	8b3b      	ldrh	r3, [r7, #24]
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	4623      	mov	r3, r4
 8001028:	f7ff fee0 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800102c:	88bc      	ldrh	r4, [r7, #4]
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	8839      	ldrh	r1, [r7, #0]
 8001032:	8878      	ldrh	r0, [r7, #2]
 8001034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2300      	movs	r3, #0
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	8b3b      	ldrh	r3, [r7, #24]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4623      	mov	r3, r4
 8001044:	f7ff fed2 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8001048:	883c      	ldrh	r4, [r7, #0]
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	8839      	ldrh	r1, [r7, #0]
 800104e:	8878      	ldrh	r0, [r7, #2]
 8001050:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2300      	movs	r3, #0
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	8b3b      	ldrh	r3, [r7, #24]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4623      	mov	r3, r4
 8001060:	f7ff fec4 	bl	8000dec <GUI_DrawLine>
 8001064:	e000      	b.n	8001068 <GUI_DrawRectangle+0xfc>
    return;
 8001066:	bf00      	nop
  }
}
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	bf00      	nop
 8001070:	24000044 	.word	0x24000044

08001074 <GUI_DrawCircle>:
  Color     : The color of the ：circle segment
  Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void GUI_DrawCircle(POINT X_Center, POINT Y_Center, LENGTH Radius,
                    COLOR Color, DRAW_FILL  Draw_Fill , DOT_PIXEL Dot_Pixel)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b087      	sub	sp, #28
 8001078:	af02      	add	r7, sp, #8
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4623      	mov	r3, r4
 8001084:	80fb      	strh	r3, [r7, #6]
 8001086:	4603      	mov	r3, r0
 8001088:	80bb      	strh	r3, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
 800108e:	4613      	mov	r3, r2
 8001090:	803b      	strh	r3, [r7, #0]
  if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 8001092:	4b66      	ldr	r3, [pc, #408]	@ (800122c <GUI_DrawCircle+0x1b8>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	429a      	cmp	r2, r3
 800109a:	f200 8171 	bhi.w	8001380 <GUI_DrawCircle+0x30c>
 800109e:	4b63      	ldr	r3, [pc, #396]	@ (800122c <GUI_DrawCircle+0x1b8>)
 80010a0:	885b      	ldrh	r3, [r3, #2]
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f080 816b 	bcs.w	8001380 <GUI_DrawCircle+0x30c>
    return;
  }

  //Draw a circle from(0, R) as a starting point
  int16_t XCurrent, YCurrent;
  XCurrent = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	81fb      	strh	r3, [r7, #14]
  YCurrent = Radius;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	81bb      	strh	r3, [r7, #12]

  //Cumulative error,judge the next point of the logo
  int16_t Esp = 3 - (Radius << 1 );
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	f1c3 0303 	rsb	r3, r3, #3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	817b      	strh	r3, [r7, #10]

  int16_t sCountY;
  if (Draw_Fill == DRAW_FULL) {
 80010c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	f040 8153 	bne.w	8001370 <GUI_DrawCircle+0x2fc>
    while (XCurrent <= YCurrent ) { //Realistic circles
 80010ca:	e0a6      	b.n	800121a <GUI_DrawCircle+0x1a6>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	813b      	strh	r3, [r7, #8]
 80010d0:	e075      	b.n	80011be <GUI_DrawCircle+0x14a>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//1
 80010d2:	89fa      	ldrh	r2, [r7, #14]
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4413      	add	r3, r2
 80010d8:	b298      	uxth	r0, r3
 80010da:	893a      	ldrh	r2, [r7, #8]
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	b299      	uxth	r1, r3
 80010e2:	883a      	ldrh	r2, [r7, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	f7ff fdf9 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//2
 80010ee:	89fb      	ldrh	r3, [r7, #14]
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	b298      	uxth	r0, r3
 80010f6:	893a      	ldrh	r2, [r7, #8]
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	b299      	uxth	r1, r3
 80010fe:	883a      	ldrh	r2, [r7, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	f7ff fdeb 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//3
 800110a:	893b      	ldrh	r3, [r7, #8]
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b298      	uxth	r0, r3
 8001112:	89fa      	ldrh	r2, [r7, #14]
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	b299      	uxth	r1, r3
 800111a:	883a      	ldrh	r2, [r7, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	f7ff fddd 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//4
 8001126:	893b      	ldrh	r3, [r7, #8]
 8001128:	88fa      	ldrh	r2, [r7, #6]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b298      	uxth	r0, r3
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	88ba      	ldrh	r2, [r7, #4]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	b299      	uxth	r1, r3
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	f7ff fdcf 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//5
 8001142:	89fb      	ldrh	r3, [r7, #14]
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	b298      	uxth	r0, r3
 800114a:	893b      	ldrh	r3, [r7, #8]
 800114c:	88ba      	ldrh	r2, [r7, #4]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	b299      	uxth	r1, r3
 8001152:	883a      	ldrh	r2, [r7, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	f7ff fdc1 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//6
 800115e:	89fa      	ldrh	r2, [r7, #14]
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4413      	add	r3, r2
 8001164:	b298      	uxth	r0, r3
 8001166:	893b      	ldrh	r3, [r7, #8]
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b299      	uxth	r1, r3
 800116e:	883a      	ldrh	r2, [r7, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	f7ff fdb3 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//7
 800117a:	893a      	ldrh	r2, [r7, #8]
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	4413      	add	r3, r2
 8001180:	b298      	uxth	r0, r3
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	88ba      	ldrh	r2, [r7, #4]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b299      	uxth	r1, r3
 800118a:	883a      	ldrh	r2, [r7, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	f7ff fda5 	bl	8000ce0 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );
 8001196:	893a      	ldrh	r2, [r7, #8]
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	4413      	add	r3, r2
 800119c:	b298      	uxth	r0, r3
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	b299      	uxth	r1, r3
 80011a6:	883a      	ldrh	r2, [r7, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	f7ff fd97 	bl	8000ce0 <GUI_DrawPoint>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80011b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	813b      	strh	r3, [r7, #8]
 80011be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dd83      	ble.n	80010d2 <GUI_DrawCircle+0x5e>
      }
      if (Esp < 0 )
 80011ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da09      	bge.n	80011e6 <GUI_DrawCircle+0x172>
        Esp += 4 * XCurrent + 6;
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	897b      	ldrh	r3, [r7, #10]
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	3306      	adds	r3, #6
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	817b      	strh	r3, [r7, #10]
 80011e4:	e013      	b.n	800120e <GUI_DrawCircle+0x19a>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 80011e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	897b      	ldrh	r3, [r7, #10]
 80011f8:	4413      	add	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	330a      	adds	r3, #10
 80011fe:	b29b      	uxth	r3, r3
 8001200:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 8001202:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001206:	b29b      	uxth	r3, r3
 8001208:	3b01      	subs	r3, #1
 800120a:	b29b      	uxth	r3, r3
 800120c:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 800120e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) { //Realistic circles
 800121a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800121e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001222:	429a      	cmp	r2, r3
 8001224:	f77f af52 	ble.w	80010cc <GUI_DrawCircle+0x58>
 8001228:	e0ab      	b.n	8001382 <GUI_DrawCircle+0x30e>
 800122a:	bf00      	nop
 800122c:	24000044 	.word	0x24000044
    }
  } else { //Draw a hollow circle
    while (XCurrent <= YCurrent ) {
      GUI_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//1
 8001230:	89fa      	ldrh	r2, [r7, #14]
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4413      	add	r3, r2
 8001236:	b298      	uxth	r0, r3
 8001238:	89ba      	ldrh	r2, [r7, #12]
 800123a:	88bb      	ldrh	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	b299      	uxth	r1, r3
 8001240:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001244:	883a      	ldrh	r2, [r7, #0]
 8001246:	2401      	movs	r4, #1
 8001248:	9400      	str	r4, [sp, #0]
 800124a:	f7ff fd49 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//2
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	88fa      	ldrh	r2, [r7, #6]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b298      	uxth	r0, r3
 8001256:	89ba      	ldrh	r2, [r7, #12]
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	b299      	uxth	r1, r3
 800125e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001262:	883a      	ldrh	r2, [r7, #0]
 8001264:	2401      	movs	r4, #1
 8001266:	9400      	str	r4, [sp, #0]
 8001268:	f7ff fd3a 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//3
 800126c:	89bb      	ldrh	r3, [r7, #12]
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b298      	uxth	r0, r3
 8001274:	89fa      	ldrh	r2, [r7, #14]
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	b299      	uxth	r1, r3
 800127c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001280:	883a      	ldrh	r2, [r7, #0]
 8001282:	2401      	movs	r4, #1
 8001284:	9400      	str	r4, [sp, #0]
 8001286:	f7ff fd2b 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//4
 800128a:	89bb      	ldrh	r3, [r7, #12]
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b298      	uxth	r0, r3
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b299      	uxth	r1, r3
 800129a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	2401      	movs	r4, #1
 80012a2:	9400      	str	r4, [sp, #0]
 80012a4:	f7ff fd1c 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//5
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b298      	uxth	r0, r3
 80012b0:	89bb      	ldrh	r3, [r7, #12]
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	b299      	uxth	r1, r3
 80012b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012bc:	883a      	ldrh	r2, [r7, #0]
 80012be:	2401      	movs	r4, #1
 80012c0:	9400      	str	r4, [sp, #0]
 80012c2:	f7ff fd0d 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//6
 80012c6:	89fa      	ldrh	r2, [r7, #14]
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4413      	add	r3, r2
 80012cc:	b298      	uxth	r0, r3
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	88ba      	ldrh	r2, [r7, #4]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b299      	uxth	r1, r3
 80012d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012da:	883a      	ldrh	r2, [r7, #0]
 80012dc:	2401      	movs	r4, #1
 80012de:	9400      	str	r4, [sp, #0]
 80012e0:	f7ff fcfe 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//7
 80012e4:	89ba      	ldrh	r2, [r7, #12]
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	b298      	uxth	r0, r3
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	88ba      	ldrh	r2, [r7, #4]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b299      	uxth	r1, r3
 80012f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012f8:	883a      	ldrh	r2, [r7, #0]
 80012fa:	2401      	movs	r4, #1
 80012fc:	9400      	str	r4, [sp, #0]
 80012fe:	f7ff fcef 	bl	8000ce0 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//0
 8001302:	89ba      	ldrh	r2, [r7, #12]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4413      	add	r3, r2
 8001308:	b298      	uxth	r0, r3
 800130a:	89fa      	ldrh	r2, [r7, #14]
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	b299      	uxth	r1, r3
 8001312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001316:	883a      	ldrh	r2, [r7, #0]
 8001318:	2401      	movs	r4, #1
 800131a:	9400      	str	r4, [sp, #0]
 800131c:	f7ff fce0 	bl	8000ce0 <GUI_DrawPoint>

      if (Esp < 0 )
 8001320:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da09      	bge.n	800133c <GUI_DrawCircle+0x2c8>
        Esp += 4 * XCurrent + 6;
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	b29a      	uxth	r2, r3
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	3306      	adds	r3, #6
 8001336:	b29b      	uxth	r3, r3
 8001338:	817b      	strh	r3, [r7, #10]
 800133a:	e013      	b.n	8001364 <GUI_DrawCircle+0x2f0>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 800133c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001340:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	b29a      	uxth	r2, r3
 800134c:	897b      	ldrh	r3, [r7, #10]
 800134e:	4413      	add	r3, r2
 8001350:	b29b      	uxth	r3, r3
 8001352:	330a      	adds	r3, #10
 8001354:	b29b      	uxth	r3, r3
 8001356:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 8001358:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800135c:	b29b      	uxth	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 8001364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001368:	b29b      	uxth	r3, r3
 800136a:	3301      	adds	r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) {
 8001370:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001374:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	f77f af59 	ble.w	8001230 <GUI_DrawCircle+0x1bc>
 800137e:	e000      	b.n	8001382 <GUI_DrawCircle+0x30e>
    return;
 8001380:	bf00      	nop
    }
  }
}
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <GUI_DisChar>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af02      	add	r7, sp, #8
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4603      	mov	r3, r0
 8001392:	81fb      	strh	r3, [r7, #14]
 8001394:	460b      	mov	r3, r1
 8001396:	81bb      	strh	r3, [r7, #12]
 8001398:	4613      	mov	r3, r2
 800139a:	72fb      	strb	r3, [r7, #11]
  POINT Page, Column;

  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 800139c:	4b50      	ldr	r3, [pc, #320]	@ (80014e0 <GUI_DisChar+0x158>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	89fa      	ldrh	r2, [r7, #14]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	f200 8097 	bhi.w	80014d6 <GUI_DisChar+0x14e>
 80013a8:	4b4d      	ldr	r3, [pc, #308]	@ (80014e0 <GUI_DisChar+0x158>)
 80013aa:	885b      	ldrh	r3, [r3, #2]
 80013ac:	89ba      	ldrh	r2, [r7, #12]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	f200 8091 	bhi.w	80014d6 <GUI_DisChar+0x14e>
//    DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
    return;
  }

  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	3b20      	subs	r3, #32
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	88d2      	ldrh	r2, [r2, #6]
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	8892      	ldrh	r2, [r2, #4]
 80013c4:	08d2      	lsrs	r2, r2, #3
 80013c6:	b292      	uxth	r2, r2
 80013c8:	4611      	mov	r1, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	8892      	ldrh	r2, [r2, #4]
 80013ce:	f002 0207 	and.w	r2, r2, #7
 80013d2:	b292      	uxth	r2, r2
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2201      	movne	r2, #1
 80013da:	2200      	moveq	r2, #0
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440a      	add	r2, r1
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
  const unsigned char *ptr = &Font->table[Char_Offset];
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]

  for (Page = 0; Page < Font->Height; Page ++ ) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	83fb      	strh	r3, [r7, #30]
 80013f4:	e069      	b.n	80014ca <GUI_DisChar+0x142>
    for (Column = 0; Column < Font->Width; Column ++ ) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	83bb      	strh	r3, [r7, #28]
 80013fa:	e054      	b.n	80014a6 <GUI_DisChar+0x11e>

      //To determine whether the font background color and screen background color is consistent
      if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80013fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001402:	4293      	cmp	r3, r2
 8001404:	d11a      	bne.n	800143c <GUI_DisChar+0xb4>
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8)))
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	8bbb      	ldrh	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	fa42 f303 	asr.w	r3, r2, r3
 8001418:	400b      	ands	r3, r1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d037      	beq.n	800148e <GUI_DisChar+0x106>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	8bbb      	ldrh	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	b298      	uxth	r0, r3
 8001426:	89ba      	ldrh	r2, [r7, #12]
 8001428:	8bfb      	ldrh	r3, [r7, #30]
 800142a:	4413      	add	r3, r2
 800142c:	b299      	uxth	r1, r3
 800142e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001430:	2301      	movs	r3, #1
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	f7ff fc53 	bl	8000ce0 <GUI_DrawPoint>
 800143a:	e028      	b.n	800148e <GUI_DisChar+0x106>
      } else {
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8))) {
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	8bbb      	ldrh	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	2280      	movs	r2, #128	@ 0x80
 800144a:	fa42 f303 	asr.w	r3, r2, r3
 800144e:	400b      	ands	r3, r1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <GUI_DisChar+0xea>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001454:	89fa      	ldrh	r2, [r7, #14]
 8001456:	8bbb      	ldrh	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	b298      	uxth	r0, r3
 800145c:	89ba      	ldrh	r2, [r7, #12]
 800145e:	8bfb      	ldrh	r3, [r7, #30]
 8001460:	4413      	add	r3, r2
 8001462:	b299      	uxth	r1, r3
 8001464:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001466:	2301      	movs	r3, #1
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	f7ff fc38 	bl	8000ce0 <GUI_DrawPoint>
 8001470:	e00d      	b.n	800148e <GUI_DisChar+0x106>
        } else {
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001472:	89fa      	ldrh	r2, [r7, #14]
 8001474:	8bbb      	ldrh	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	b298      	uxth	r0, r3
 800147a:	89ba      	ldrh	r2, [r7, #12]
 800147c:	8bfb      	ldrh	r3, [r7, #30]
 800147e:	4413      	add	r3, r2
 8001480:	b299      	uxth	r1, r3
 8001482:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001484:	2301      	movs	r3, #1
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	f7ff fc29 	bl	8000ce0 <GUI_DrawPoint>
        }
      }
      //One pixel is 8 bits
      if (Column % 8 == 7)
 800148e:	8bbb      	ldrh	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	b29b      	uxth	r3, r3
 8001496:	2b07      	cmp	r3, #7
 8001498:	d102      	bne.n	80014a0 <GUI_DisChar+0x118>
        ptr++;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	3301      	adds	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
    for (Column = 0; Column < Font->Width; Column ++ ) {
 80014a0:	8bbb      	ldrh	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	83bb      	strh	r3, [r7, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	8bba      	ldrh	r2, [r7, #28]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3a5      	bcc.n	80013fc <GUI_DisChar+0x74>
    }/* Write a line */
    if (Font->Width % 8 != 0)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	889b      	ldrh	r3, [r3, #4]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <GUI_DisChar+0x13c>
      ptr++;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  for (Page = 0; Page < Font->Height; Page ++ ) {
 80014c4:	8bfb      	ldrh	r3, [r7, #30]
 80014c6:	3301      	adds	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	88db      	ldrh	r3, [r3, #6]
 80014ce:	8bfa      	ldrh	r2, [r7, #30]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d390      	bcc.n	80013f6 <GUI_DisChar+0x6e>
 80014d4:	e000      	b.n	80014d8 <GUI_DisChar+0x150>
    return;
 80014d6:	bf00      	nop
  }/* Write all */
}
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	24000044 	.word	0x24000044

080014e4 <GUI_DisString_EN>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
 80014f2:	460b      	mov	r3, r1
 80014f4:	81bb      	strh	r3, [r7, #12]
  POINT Xpoint = Xstart;
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	82fb      	strh	r3, [r7, #22]
  POINT Ypoint = Ystart;
 80014fa:	89bb      	ldrh	r3, [r7, #12]
 80014fc:	82bb      	strh	r3, [r7, #20]

  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <GUI_DisString_EN+0xa0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	89fa      	ldrh	r2, [r7, #14]
 8001504:	429a      	cmp	r2, r3
 8001506:	d838      	bhi.n	800157a <GUI_DisString_EN+0x96>
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <GUI_DisString_EN+0xa0>)
 800150a:	885b      	ldrh	r3, [r3, #2]
 800150c:	89ba      	ldrh	r2, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d833      	bhi.n	800157a <GUI_DisString_EN+0x96>
//    DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
    return;
  }

  while (* pString != '\0') {
 8001512:	e02d      	b.n	8001570 <GUI_DisString_EN+0x8c>
    //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
    if ((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	8892      	ldrh	r2, [r2, #4]
 800151a:	4413      	add	r3, r2
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <GUI_DisString_EN+0xa0>)
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	4293      	cmp	r3, r2
 8001522:	dd06      	ble.n	8001532 <GUI_DisString_EN+0x4e>
      Xpoint = Xstart;
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	82fb      	strh	r3, [r7, #22]
      Ypoint += Font->Height;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	88da      	ldrh	r2, [r3, #6]
 800152c:	8abb      	ldrh	r3, [r7, #20]
 800152e:	4413      	add	r3, r2
 8001530:	82bb      	strh	r3, [r7, #20]
    }

    // If the Y direction is full, reposition to(Xstart, Ystart)
    if ((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 8001532:	8abb      	ldrh	r3, [r7, #20]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	88d2      	ldrh	r2, [r2, #6]
 8001538:	4413      	add	r3, r2
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <GUI_DisString_EN+0xa0>)
 800153c:	8852      	ldrh	r2, [r2, #2]
 800153e:	4293      	cmp	r3, r2
 8001540:	dd03      	ble.n	800154a <GUI_DisString_EN+0x66>
      Xpoint = Xstart;
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	82fb      	strh	r3, [r7, #22]
      Ypoint = Ystart;
 8001546:	89bb      	ldrh	r3, [r7, #12]
 8001548:	82bb      	strh	r3, [r7, #20]
    }
    GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	8ab9      	ldrh	r1, [r7, #20]
 8001550:	8af8      	ldrh	r0, [r7, #22]
 8001552:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	8c3b      	ldrh	r3, [r7, #32]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f7ff ff14 	bl	8001388 <GUI_DisChar>

    //The next character of the address
    pString ++;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]

    //The next word of the abscissa increases the font of the broadband
    Xpoint += Font->Width;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	889a      	ldrh	r2, [r3, #4]
 800156a:	8afb      	ldrh	r3, [r7, #22]
 800156c:	4413      	add	r3, r2
 800156e:	82fb      	strh	r3, [r7, #22]
  while (* pString != '\0') {
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1cd      	bne.n	8001514 <GUI_DisString_EN+0x30>
 8001578:	e000      	b.n	800157c <GUI_DisString_EN+0x98>
    return;
 800157a:	bf00      	nop
  }
}
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000044 	.word	0x24000044

08001588 <GUI_DisNum>:
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void GUI_DisNum(POINT Xpoint, POINT Ypoint, int32_t Nummber,
                sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800158e:	af02      	add	r7, sp, #8
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8001598:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800159c:	600a      	str	r2, [r1, #0]
 800159e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80015a2:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015ac:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80015b0:	4622      	mov	r2, r4
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80015bc:	4602      	mov	r2, r0
 80015be:	801a      	strh	r2, [r3, #0]

  int16_t Num_Bit = 0, Str_Bit = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
  uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 80015cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	3304      	adds	r3, #4
 80015da:	22fb      	movs	r2, #251	@ 0xfb
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 f954 	bl	800788c <memset>
 80015e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015e8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	3304      	adds	r3, #4
 80015f2:	22fb      	movs	r2, #251	@ 0xfb
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 f948 	bl	800788c <memset>
  uint8_t *pStr = Str_Array;
 80015fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001600:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8001604:	4b45      	ldr	r3, [pc, #276]	@ (800171c <GUI_DisNum+0x194>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800160c:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d87d      	bhi.n	8001712 <GUI_DisNum+0x18a>
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <GUI_DisNum+0x194>)
 8001618:	885b      	ldrh	r3, [r3, #2]
 800161a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800161e:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8001622:	8812      	ldrh	r2, [r2, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d874      	bhi.n	8001712 <GUI_DisNum+0x18a>
//    DEBUG("GUI_DisNum Input exceeds the normal display range\r\n");
    return;
  }

  //Converts a number to a string
  while (Nummber) {
 8001628:	e030      	b.n	800168c <GUI_DisNum+0x104>
    Num_Array[Num_Bit] = Nummber % 10 + '0';
 800162a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800162e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <GUI_DisNum+0x198>)
 8001636:	fb83 1302 	smull	r1, r3, r3, r2
 800163a:	1099      	asrs	r1, r3, #2
 800163c:	17d3      	asrs	r3, r2, #31
 800163e:	1ac9      	subs	r1, r1, r3
 8001640:	460b      	mov	r3, r1
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	1ad1      	subs	r1, r2, r3
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001650:	3230      	adds	r2, #48	@ 0x30
 8001652:	b2d1      	uxtb	r1, r2
 8001654:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001658:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 800165c:	54d1      	strb	r1, [r2, r3]
    Num_Bit++;
 800165e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001662:	b29b      	uxth	r3, r3
 8001664:	3301      	adds	r3, #1
 8001666:	b29b      	uxth	r3, r3
 8001668:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    Nummber /= 10;
 800166c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001670:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8001674:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001678:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4928      	ldr	r1, [pc, #160]	@ (8001720 <GUI_DisNum+0x198>)
 8001680:	fb81 0103 	smull	r0, r1, r1, r3
 8001684:	1089      	asrs	r1, r1, #2
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1acb      	subs	r3, r1, r3
 800168a:	6013      	str	r3, [r2, #0]
  while (Nummber) {
 800168c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001690:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1c7      	bne.n	800162a <GUI_DisNum+0xa2>
  }

  //The string is inverted
  while (Num_Bit > 0) {
 800169a:	e01c      	b.n	80016d6 <GUI_DisNum+0x14e>
    Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800169c:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80016a6:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80016aa:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 80016ae:	5c89      	ldrb	r1, [r1, r2]
 80016b0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80016b4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80016b8:	54d1      	strb	r1, [r2, r3]
    Str_Bit ++;
 80016ba:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    Num_Bit --;
 80016c8:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
  while (Num_Bit > 0) {
 80016d6:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 80016da:	2b00      	cmp	r3, #0
 80016dc:	dcde      	bgt.n	800169c <GUI_DisNum+0x114>
  }

  //show
  GUI_DisString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground );
 80016de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80016e2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80016e6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80016ea:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80016ee:	8811      	ldrh	r1, [r2, #0]
 80016f0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80016f4:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 80016f8:	8810      	ldrh	r0, [r2, #0]
 80016fa:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 80016fe:	9201      	str	r2, [sp, #4]
 8001700:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 8001704:	9200      	str	r2, [sp, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800170c:	f7ff feea 	bl	80014e4 <GUI_DisString_EN>
 8001710:	e000      	b.n	8001714 <GUI_DisNum+0x18c>
    return;
 8001712:	bf00      	nop
}
 8001714:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	24000044 	.word	0x24000044
 8001720:	66666667 	.word	0x66666667

08001724 <GUI_Show>:
  Draw Olympic Rings,
  Display String,
  Show Pic
******************************************************************************/
void GUI_Show(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	@ 0x40
 8001728:	af04      	add	r7, sp, #16
  GUI_Clear(WHITE);
 800172a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800172e:	f7ff fac9 	bl	8000cc4 <GUI_Clear>
  if (sLCD_DIS.LCD_Dis_Column > sLCD_DIS.LCD_Dis_Page) { //Horizontal screen display
 8001732:	4b89      	ldr	r3, [pc, #548]	@ (8001958 <GUI_Show+0x234>)
 8001734:	881a      	ldrh	r2, [r3, #0]
 8001736:	4b88      	ldr	r3, [pc, #544]	@ (8001958 <GUI_Show+0x234>)
 8001738:	885b      	ldrh	r3, [r3, #2]
 800173a:	429a      	cmp	r2, r3
 800173c:	f240 811a 	bls.w	8001974 <GUI_Show+0x250>

//    DEBUG("Draw Line\r\n");
    GUI_DrawLine(0, 10, LCD_WIDTH, 10, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001740:	2302      	movs	r3, #2
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	230a      	movs	r3, #10
 8001750:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001754:	210a      	movs	r1, #10
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fb48 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(0, 20, LCD_WIDTH, 20, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 800175c:	2301      	movs	r3, #1
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	2301      	movs	r3, #1
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2314      	movs	r3, #20
 800176c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001770:	2114      	movs	r1, #20
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fb3a 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(0, 300, LCD_WIDTH, 300, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 8001778:	2301      	movs	r3, #1
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	2301      	movs	r3, #1
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800178a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800178e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fb2a 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(0, 310, LCD_WIDTH, 310, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001798:	2302      	movs	r3, #2
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80017aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017ae:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fb1a 	bl	8000dec <GUI_DrawLine>

//    DEBUG("Draw Rectangle\r\n");
    GUI_DrawRectangle(10, 30, sLCD_DIS.LCD_Dis_Column - 10, sLCD_DIS.LCD_Dis_Page - 30, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 80017b8:	4b67      	ldr	r3, [pc, #412]	@ (8001958 <GUI_Show+0x234>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	3b0a      	subs	r3, #10
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b65      	ldr	r3, [pc, #404]	@ (8001958 <GUI_Show+0x234>)
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	3b1e      	subs	r3, #30
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2101      	movs	r1, #1
 80017ca:	9102      	str	r1, [sp, #8]
 80017cc:	2100      	movs	r1, #0
 80017ce:	9101      	str	r1, [sp, #4]
 80017d0:	211f      	movs	r1, #31
 80017d2:	9100      	str	r1, [sp, #0]
 80017d4:	211e      	movs	r1, #30
 80017d6:	200a      	movs	r0, #10
 80017d8:	f7ff fbc8 	bl	8000f6c <GUI_DrawRectangle>
    GUI_DrawRectangle(20, 40, sLCD_DIS.LCD_Dis_Column - 20, 60, BLUE, DRAW_FULL, DOT_PIXEL_DFT);
 80017dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001958 <GUI_Show+0x234>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	3b14      	subs	r3, #20
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	2301      	movs	r3, #1
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	231f      	movs	r3, #31
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	233c      	movs	r3, #60	@ 0x3c
 80017f2:	2128      	movs	r1, #40	@ 0x28
 80017f4:	2014      	movs	r0, #20
 80017f6:	f7ff fbb9 	bl	8000f6c <GUI_DrawRectangle>

//    DEBUG("Draw Olympic Rings\r\n");
    uint16_t Cx1 = 190, Cy1 = 240, Cr = 20;
 80017fa:	23be      	movs	r3, #190	@ 0xbe
 80017fc:	833b      	strh	r3, [r7, #24]
 80017fe:	23f0      	movs	r3, #240	@ 0xf0
 8001800:	82fb      	strh	r3, [r7, #22]
 8001802:	2314      	movs	r3, #20
 8001804:	82bb      	strh	r3, [r7, #20]
    uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8001806:	8b3b      	ldrh	r3, [r7, #24]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001810:	8abb      	ldrh	r3, [r7, #20]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800181a:	eeb0 5b04 	vmov.f64	d5, #4	@ 0x40200000  2.5
 800181e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001822:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001826:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800182a:	ee17 3a90 	vmov	r3, s15
 800182e:	827b      	strh	r3, [r7, #18]
 8001830:	8afb      	ldrh	r3, [r7, #22]
 8001832:	823b      	strh	r3, [r7, #16]
    uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8001834:	8abb      	ldrh	r3, [r7, #20]
 8001836:	461a      	mov	r2, r3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4413      	add	r3, r2
 800183c:	b29a      	uxth	r2, r3
 800183e:	8b3b      	ldrh	r3, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	81fb      	strh	r3, [r7, #14]
 8001844:	8afb      	ldrh	r3, [r7, #22]
 8001846:	81bb      	strh	r3, [r7, #12]
    uint16_t Cx4 = ( Cx1 + Cx2 ) / 2, Cy4 = Cy1 + Cr;
 8001848:	8b3a      	ldrh	r2, [r7, #24]
 800184a:	8a7b      	ldrh	r3, [r7, #18]
 800184c:	4413      	add	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	da00      	bge.n	8001854 <GUI_Show+0x130>
 8001852:	3301      	adds	r3, #1
 8001854:	105b      	asrs	r3, r3, #1
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	8afa      	ldrh	r2, [r7, #22]
 800185a:	8abb      	ldrh	r3, [r7, #20]
 800185c:	4413      	add	r3, r2
 800185e:	813b      	strh	r3, [r7, #8]
    uint16_t Cx5 = ( Cx2 + Cx3 ) / 2, Cy5 = Cy1 + Cr;
 8001860:	8a7a      	ldrh	r2, [r7, #18]
 8001862:	89fb      	ldrh	r3, [r7, #14]
 8001864:	4413      	add	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	da00      	bge.n	800186c <GUI_Show+0x148>
 800186a:	3301      	adds	r3, #1
 800186c:	105b      	asrs	r3, r3, #1
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	8afa      	ldrh	r2, [r7, #22]
 8001872:	8abb      	ldrh	r3, [r7, #20]
 8001874:	4413      	add	r3, r2
 8001876:	80bb      	strh	r3, [r7, #4]

    GUI_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001878:	8aba      	ldrh	r2, [r7, #20]
 800187a:	8af9      	ldrh	r1, [r7, #22]
 800187c:	8b38      	ldrh	r0, [r7, #24]
 800187e:	2302      	movs	r3, #2
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	231f      	movs	r3, #31
 8001888:	f7ff fbf4 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_2X2);
 800188c:	8aba      	ldrh	r2, [r7, #20]
 800188e:	8a39      	ldrh	r1, [r7, #16]
 8001890:	8a78      	ldrh	r0, [r7, #18]
 8001892:	2302      	movs	r3, #2
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	2300      	movs	r3, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	f7ff fbea 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_2X2);
 80018a0:	8aba      	ldrh	r2, [r7, #20]
 80018a2:	89b9      	ldrh	r1, [r7, #12]
 80018a4:	89f8      	ldrh	r0, [r7, #14]
 80018a6:	2302      	movs	r3, #2
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018b2:	f7ff fbdf 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_2X2);
 80018b6:	8aba      	ldrh	r2, [r7, #20]
 80018b8:	8939      	ldrh	r1, [r7, #8]
 80018ba:	8978      	ldrh	r0, [r7, #10]
 80018bc:	2302      	movs	r3, #2
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	2300      	movs	r3, #0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80018c8:	f7ff fbd4 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_2X2);
 80018cc:	8aba      	ldrh	r2, [r7, #20]
 80018ce:	88b9      	ldrh	r1, [r7, #4]
 80018d0:	88f8      	ldrh	r0, [r7, #6]
 80018d2:	2302      	movs	r3, #2
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2300      	movs	r3, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018de:	f7ff fbc9 	bl	8001074 <GUI_DrawCircle>

//    DEBUG("Draw Realistic circles\r\n");
    GUI_DrawCircle(50, 250, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 80018e2:	2301      	movs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80018ee:	221e      	movs	r2, #30
 80018f0:	21fa      	movs	r1, #250	@ 0xfa
 80018f2:	2032      	movs	r0, #50	@ 0x32
 80018f4:	f7ff fbbe 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle(sLCD_DIS.LCD_Dis_Column - 50, 250, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <GUI_Show+0x234>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	3b32      	subs	r3, #50	@ 0x32
 80018fe:	b298      	uxth	r0, r3
 8001900:	2301      	movs	r3, #1
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2301      	movs	r3, #1
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800190c:	221e      	movs	r2, #30
 800190e:	21fa      	movs	r1, #250	@ 0xfa
 8001910:	f7ff fbb0 	bl	8001074 <GUI_DrawCircle>

//    DEBUG("Display String\r\n");
    GUI_DisString_EN(80, 80, "TFT STM32 Electronic", &Font24, LCD_BACKGROUND, BLUE);
 8001914:	231f      	movs	r3, #31
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <GUI_Show+0x238>)
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <GUI_Show+0x23c>)
 8001922:	2150      	movs	r1, #80	@ 0x50
 8001924:	2050      	movs	r0, #80	@ 0x50
 8001926:	f7ff fddd 	bl	80014e4 <GUI_DisString_EN>
    GUI_DisString_EN(80, 120, "3.5inch TFTLCD", &Font20, RED, BLUE);
 800192a:	231f      	movs	r3, #31
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <GUI_Show+0x240>)
 8001936:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <GUI_Show+0x244>)
 8001938:	2178      	movs	r1, #120	@ 0x78
 800193a:	2050      	movs	r0, #80	@ 0x50
 800193c:	f7ff fdd2 	bl	80014e4 <GUI_DisString_EN>

//    DEBUG("Display Nummber\r\n");
    GUI_DisNum(80, 150, 1234567890, &Font16, LCD_BACKGROUND, BLUE);
 8001940:	231f      	movs	r3, #31
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <GUI_Show+0x248>)
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <GUI_Show+0x24c>)
 800194e:	2196      	movs	r1, #150	@ 0x96
 8001950:	2050      	movs	r0, #80	@ 0x50
 8001952:	f7ff fe19 	bl	8001588 <GUI_DisNum>

//    DEBUG("Display Nummber\r\n");
    GUI_DisNum(40, 210, 1234567890, &Font16, LCD_BACKGROUND, BLUE);

  }
}
 8001956:	e123      	b.n	8001ba0 <GUI_Show+0x47c>
 8001958:	24000044 	.word	0x24000044
 800195c:	24000010 	.word	0x24000010
 8001960:	08007908 	.word	0x08007908
 8001964:	24000008 	.word	0x24000008
 8001968:	08007920 	.word	0x08007920
 800196c:	24000000 	.word	0x24000000
 8001970:	499602d2 	.word	0x499602d2
    GUI_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column , 10, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001974:	4b8c      	ldr	r3, [pc, #560]	@ (8001ba8 <GUI_Show+0x484>)
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	2302      	movs	r3, #2
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2300      	movs	r3, #0
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	230a      	movs	r3, #10
 8001988:	210a      	movs	r1, #10
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fa2e 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column , 20, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 8001990:	4b85      	ldr	r3, [pc, #532]	@ (8001ba8 <GUI_Show+0x484>)
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	2301      	movs	r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2314      	movs	r3, #20
 80019a4:	2114      	movs	r1, #20
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fa20 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page - 20, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 80019ac:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba8 <GUI_Show+0x484>)
 80019ae:	885b      	ldrh	r3, [r3, #2]
 80019b0:	3b14      	subs	r3, #20
 80019b2:	b299      	uxth	r1, r3
 80019b4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba8 <GUI_Show+0x484>)
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ba8 <GUI_Show+0x484>)
 80019ba:	885b      	ldrh	r3, [r3, #2]
 80019bc:	3b14      	subs	r3, #20
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2001      	movs	r0, #1
 80019c2:	9002      	str	r0, [sp, #8]
 80019c4:	2001      	movs	r0, #1
 80019c6:	9001      	str	r0, [sp, #4]
 80019c8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80019cc:	9000      	str	r0, [sp, #0]
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fa0c 	bl	8000dec <GUI_DrawLine>
    GUI_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page - 10, RED, LINE_SOLID, DOT_PIXEL_2X2);
 80019d4:	4b74      	ldr	r3, [pc, #464]	@ (8001ba8 <GUI_Show+0x484>)
 80019d6:	885b      	ldrh	r3, [r3, #2]
 80019d8:	3b0a      	subs	r3, #10
 80019da:	b299      	uxth	r1, r3
 80019dc:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <GUI_Show+0x484>)
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	4b71      	ldr	r3, [pc, #452]	@ (8001ba8 <GUI_Show+0x484>)
 80019e2:	885b      	ldrh	r3, [r3, #2]
 80019e4:	3b0a      	subs	r3, #10
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2002      	movs	r0, #2
 80019ea:	9002      	str	r0, [sp, #8]
 80019ec:	2000      	movs	r0, #0
 80019ee:	9001      	str	r0, [sp, #4]
 80019f0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80019f4:	9000      	str	r0, [sp, #0]
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff f9f8 	bl	8000dec <GUI_DrawLine>
    GUI_DrawRectangle(10, 30, sLCD_DIS.LCD_Dis_Column - 10, sLCD_DIS.LCD_Dis_Page - 30, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 80019fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <GUI_Show+0x484>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	3b0a      	subs	r3, #10
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <GUI_Show+0x484>)
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	3b1e      	subs	r3, #30
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	9102      	str	r1, [sp, #8]
 8001a10:	2100      	movs	r1, #0
 8001a12:	9101      	str	r1, [sp, #4]
 8001a14:	211f      	movs	r1, #31
 8001a16:	9100      	str	r1, [sp, #0]
 8001a18:	211e      	movs	r1, #30
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f7ff faa6 	bl	8000f6c <GUI_DrawRectangle>
    GUI_DrawRectangle(20, 40, sLCD_DIS.LCD_Dis_Column - 20, 60, BLUE, DRAW_FULL, DOT_PIXEL_DFT);
 8001a20:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <GUI_Show+0x484>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	3b14      	subs	r3, #20
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	231f      	movs	r3, #31
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	233c      	movs	r3, #60	@ 0x3c
 8001a36:	2128      	movs	r1, #40	@ 0x28
 8001a38:	2014      	movs	r0, #20
 8001a3a:	f7ff fa97 	bl	8000f6c <GUI_DrawRectangle>
    uint16_t Cx1 = 120, Cy1 = 300, Cr = 20;
 8001a3e:	2378      	movs	r3, #120	@ 0x78
 8001a40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001a42:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001a46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001a48:	2314      	movs	r3, #20
 8001a4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8001a4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a60:	eeb0 5b04 	vmov.f64	d5, #4	@ 0x40200000  2.5
 8001a64:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001a76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a78:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8001a7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001a86:	4413      	add	r3, r2
 8001a88:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a8c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t Cx4 = ( Cx1 + Cx2 ) / 2, Cy4 = Cy1 + Cr;
 8001a8e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001a90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a92:	4413      	add	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da00      	bge.n	8001a9a <GUI_Show+0x376>
 8001a98:	3301      	adds	r3, #1
 8001a9a:	105b      	asrs	r3, r3, #1
 8001a9c:	843b      	strh	r3, [r7, #32]
 8001a9e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001aa0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001aa2:	4413      	add	r3, r2
 8001aa4:	83fb      	strh	r3, [r7, #30]
    uint16_t Cx5 = ( Cx2 + Cx3 ) / 2, Cy5 = Cy1 + Cr;
 8001aa6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001aa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aaa:	4413      	add	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da00      	bge.n	8001ab2 <GUI_Show+0x38e>
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	105b      	asrs	r3, r3, #1
 8001ab4:	83bb      	strh	r3, [r7, #28]
 8001ab6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001ab8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001aba:	4413      	add	r3, r2
 8001abc:	837b      	strh	r3, [r7, #26]
    GUI_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001abe:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001ac0:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001ac2:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	231f      	movs	r3, #31
 8001ace:	f7ff fad1 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001ad2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001ad4:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001ad6:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8001ad8:	2302      	movs	r3, #2
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2300      	movs	r3, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f7ff fac7 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001ae6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001ae8:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8001aea:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001aec:	2302      	movs	r3, #2
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001af8:	f7ff fabc 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001afc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001afe:	8bf9      	ldrh	r1, [r7, #30]
 8001b00:	8c38      	ldrh	r0, [r7, #32]
 8001b02:	2302      	movs	r3, #2
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b0e:	f7ff fab1 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001b12:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001b14:	8b79      	ldrh	r1, [r7, #26]
 8001b16:	8bb8      	ldrh	r0, [r7, #28]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b24:	f7ff faa6 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle(50, 400, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001b34:	221e      	movs	r2, #30
 8001b36:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001b3a:	2032      	movs	r0, #50	@ 0x32
 8001b3c:	f7ff fa9a 	bl	8001074 <GUI_DrawCircle>
    GUI_DrawCircle(sLCD_DIS.LCD_Dis_Column - 50, 400, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <GUI_Show+0x484>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	3b32      	subs	r3, #50	@ 0x32
 8001b46:	b298      	uxth	r0, r3
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001b54:	221e      	movs	r2, #30
 8001b56:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001b5a:	f7ff fa8b 	bl	8001074 <GUI_DrawCircle>
    GUI_DisString_EN(40, 120, "WaveShare Electronic", &Font24, LCD_BACKGROUND, BLUE);
 8001b5e:	231f      	movs	r3, #31
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <GUI_Show+0x488>)
 8001b6a:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <GUI_Show+0x48c>)
 8001b6c:	2178      	movs	r1, #120	@ 0x78
 8001b6e:	2028      	movs	r0, #40	@ 0x28
 8001b70:	f7ff fcb8 	bl	80014e4 <GUI_DisString_EN>
    GUI_DisString_EN(40, 180, "3.5inch TFTLCD", &Font20, RED, BLUE);
 8001b74:	231f      	movs	r3, #31
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <GUI_Show+0x490>)
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <GUI_Show+0x494>)
 8001b82:	21b4      	movs	r1, #180	@ 0xb4
 8001b84:	2028      	movs	r0, #40	@ 0x28
 8001b86:	f7ff fcad 	bl	80014e4 <GUI_DisString_EN>
    GUI_DisNum(40, 210, 1234567890, &Font16, LCD_BACKGROUND, BLUE);
 8001b8a:	231f      	movs	r3, #31
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <GUI_Show+0x498>)
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <GUI_Show+0x49c>)
 8001b98:	21d2      	movs	r1, #210	@ 0xd2
 8001b9a:	2028      	movs	r0, #40	@ 0x28
 8001b9c:	f7ff fcf4 	bl	8001588 <GUI_DisNum>
}
 8001ba0:	bf00      	nop
 8001ba2:	3730      	adds	r7, #48	@ 0x30
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	24000044 	.word	0x24000044
 8001bac:	24000010 	.word	0x24000010
 8001bb0:	08007930 	.word	0x08007930
 8001bb4:	24000008 	.word	0x24000008
 8001bb8:	08007920 	.word	0x08007920
 8001bbc:	24000000 	.word	0x24000000
 8001bc0:	499602d2 	.word	0x499602d2

08001bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bca:	f000 fcc3 	bl	8002554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bce:	f000 f81d 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd2:	f000 f99b 	bl	8001f0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001bd6:	f000 f945 	bl	8001e64 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001bda:	f000 f98f 	bl	8001efc <MX_USB_OTG_HS_USB_Init>
  MX_RTC_Init();
 8001bde:	f000 f88d 	bl	8001cfc <MX_RTC_Init>
  MX_SPI1_Init();
 8001be2:	f000 f8e9 	bl	8001db8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 8001be6:	2306      	movs	r3, #6
 8001be8:	71fb      	strb	r3, [r7, #7]
  LCD_Init( Lcd_ScanDir, 200);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	21c8      	movs	r1, #200	@ 0xc8
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe ff48 	bl	8000a84 <LCD_Init>
  LCD_Clear(YELLOW);
 8001bf4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001bf8:	f7ff f83a 	bl	8000c70 <LCD_Clear>
  LCD_Clear(LCD_BACKGROUND);
 8001bfc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c00:	f7ff f836 	bl	8000c70 <LCD_Clear>
  GUI_Show();
 8001c04:	f7ff fd8e 	bl	8001724 <GUI_Show>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <main+0x44>

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09c      	sub	sp, #112	@ 0x70
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c16:	224c      	movs	r2, #76	@ 0x4c
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f005 fe36 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2220      	movs	r2, #32
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f005 fe30 	bl	800788c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001c2c:	4b31      	ldr	r3, [pc, #196]	@ (8001cf4 <SystemClock_Config+0xe8>)
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c36:	2004      	movs	r0, #4
 8001c38:	f000 fff0 	bl	8002c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf8 <SystemClock_Config+0xec>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf8 <SystemClock_Config+0xec>)
 8001c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <SystemClock_Config+0xec>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c58:	bf00      	nop
 8001c5a:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <SystemClock_Config+0xec>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c66:	d1f8      	bne.n	8001c5a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001c68:	2329      	movs	r3, #41	@ 0x29
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c72:	2301      	movs	r3, #1
 8001c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c76:	2301      	movs	r3, #1
 8001c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001c86:	2346      	movs	r3, #70	@ 0x46
 8001c88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c96:	230c      	movs	r3, #12
 8001c98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 f812 	bl	8002cd0 <HAL_RCC_OscConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001cb2:	f000 fa59 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb6:	233f      	movs	r3, #63	@ 0x3f
 8001cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cc6:	2340      	movs	r3, #64	@ 0x40
 8001cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cca:	2340      	movs	r3, #64	@ 0x40
 8001ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cd4:	2340      	movs	r3, #64	@ 0x40
 8001cd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2106      	movs	r1, #6
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 fc29 	bl	8003534 <HAL_RCC_ClockConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001ce8:	f000 fa3e 	bl	8002168 <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3770      	adds	r7, #112	@ 0x70
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58024800 	.word	0x58024800

08001cfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d10:	2300      	movs	r3, #0
 8001d12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d14:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d16:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <MX_RTC_Init+0xb8>)
 8001d18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d22:	227f      	movs	r2, #127	@ 0x7f
 8001d24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d28:	22ff      	movs	r2, #255	@ 0xff
 8001d2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d46:	481a      	ldr	r0, [pc, #104]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d48:	f003 fd60 	bl	800580c <HAL_RTC_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d52:	f000 fa09 	bl	8002168 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 8001d56:	2303      	movs	r3, #3
 8001d58:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8001d5a:	2330      	movs	r3, #48	@ 0x30
 8001d5c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8001d5e:	2330      	movs	r3, #48	@ 0x30
 8001d60:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480f      	ldr	r0, [pc, #60]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d72:	f003 fdd1 	bl	8005918 <HAL_RTC_SetTime>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001d7c:	f000 f9f4 	bl	8002168 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d80:	2301      	movs	r3, #1
 8001d82:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d84:	2301      	movs	r3, #1
 8001d86:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	2201      	movs	r2, #1
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	@ (8001db0 <MX_RTC_Init+0xb4>)
 8001d98:	f003 fe5c 	bl	8005a54 <HAL_RTC_SetDate>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001da2:	f000 f9e1 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	24000050 	.word	0x24000050
 8001db4:	58004000 	.word	0x58004000

08001db8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dbe:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <MX_SPI1_Init+0xa8>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001de4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001de8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e48:	f003 ff44 	bl	8005cd4 <HAL_SPI_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001e52:	f000 f989 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24000078 	.word	0x24000078
 8001e60:	40013000 	.word	0x40013000

08001e64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e68:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <MX_USART3_UART_Init+0x94>)
 8001e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e94:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eac:	4811      	ldr	r0, [pc, #68]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001eae:	f004 fb0c 	bl	80064ca <HAL_UART_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001eb8:	f000 f956 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	480d      	ldr	r0, [pc, #52]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001ec0:	f005 fc19 	bl	80076f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001eca:	f000 f94d 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001ed2:	f005 fc4e 	bl	8007772 <HAL_UARTEx_SetRxFifoThreshold>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001edc:	f000 f944 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ee0:	4804      	ldr	r0, [pc, #16]	@ (8001ef4 <MX_USART3_UART_Init+0x90>)
 8001ee2:	f005 fbcf 	bl	8007684 <HAL_UARTEx_DisableFifoMode>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001eec:	f000 f93c 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	24000100 	.word	0x24000100
 8001ef8:	40004800 	.word	0x40004800

08001efc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	@ 0x38
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4b8a      	ldr	r3, [pc, #552]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f28:	4a88      	ldr	r2, [pc, #544]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f32:	4b86      	ldr	r3, [pc, #536]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f40:	4b82      	ldr	r3, [pc, #520]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f46:	4a81      	ldr	r2, [pc, #516]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f48:	f043 0320 	orr.w	r3, r3, #32
 8001f4c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f50:	4b7e      	ldr	r3, [pc, #504]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f64:	4a79      	ldr	r2, [pc, #484]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f6e:	4b77      	ldr	r3, [pc, #476]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b73      	ldr	r3, [pc, #460]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f82:	4a72      	ldr	r2, [pc, #456]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b6c      	ldr	r3, [pc, #432]	@ (800214c <MX_GPIO_Init+0x240>)
 8001f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001faa:	4b68      	ldr	r3, [pc, #416]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb8:	4b64      	ldr	r3, [pc, #400]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fbe:	4a63      	ldr	r2, [pc, #396]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fc8:	4b60      	ldr	r3, [pc, #384]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fe6:	4b59      	ldr	r3, [pc, #356]	@ (800214c <MX_GPIO_Init+0x240>)
 8001fe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff4:	4b55      	ldr	r3, [pc, #340]	@ (800214c <MX_GPIO_Init+0x240>)
 8001ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ffa:	4a54      	ldr	r2, [pc, #336]	@ (800214c <MX_GPIO_Init+0x240>)
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002004:	4b51      	ldr	r3, [pc, #324]	@ (800214c <MX_GPIO_Init+0x240>)
 8002006:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002018:	484d      	ldr	r0, [pc, #308]	@ (8002150 <MX_GPIO_Init+0x244>)
 800201a:	f000 fde5 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f244 1101 	movw	r1, #16641	@ 0x4101
 8002024:	484b      	ldr	r0, [pc, #300]	@ (8002154 <MX_GPIO_Init+0x248>)
 8002026:	f000 fddf 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002030:	4849      	ldr	r0, [pc, #292]	@ (8002158 <MX_GPIO_Init+0x24c>)
 8002032:	f000 fdd9 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	2102      	movs	r1, #2
 800203a:	4848      	ldr	r0, [pc, #288]	@ (800215c <MX_GPIO_Init+0x250>)
 800203c:	f000 fdd4 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	4840      	ldr	r0, [pc, #256]	@ (8002158 <MX_GPIO_Init+0x24c>)
 8002056:	f000 fc17 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800205a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	4837      	ldr	r0, [pc, #220]	@ (8002150 <MX_GPIO_Init+0x244>)
 8002074:	f000 fc08 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LCD_CS_Pin;
 8002078:	f244 1301 	movw	r3, #16641	@ 0x4101
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	4830      	ldr	r0, [pc, #192]	@ (8002154 <MX_GPIO_Init+0x248>)
 8002092:	f000 fbf9 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800209a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	482d      	ldr	r0, [pc, #180]	@ (8002160 <MX_GPIO_Init+0x254>)
 80020ac:	f000 fbec 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 80020b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	4823      	ldr	r0, [pc, #140]	@ (8002158 <MX_GPIO_Init+0x24c>)
 80020ca:	f000 fbdd 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80020ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4820      	ldr	r0, [pc, #128]	@ (8002164 <MX_GPIO_Init+0x258>)
 80020e4:	f000 fbd0 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80020e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80020fa:	230a      	movs	r3, #10
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	4817      	ldr	r0, [pc, #92]	@ (8002164 <MX_GPIO_Init+0x258>)
 8002106:	f000 fbbf 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800210a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	4810      	ldr	r0, [pc, #64]	@ (8002164 <MX_GPIO_Init+0x258>)
 8002124:	f000 fbb0 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002128:	2302      	movs	r3, #2
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	@ (800215c <MX_GPIO_Init+0x250>)
 8002140:	f000 fba2 	bl	8002888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002144:	bf00      	nop
 8002146:	3738      	adds	r7, #56	@ 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	58024400 	.word	0x58024400
 8002150:	58021400 	.word	0x58021400
 8002154:	58020400 	.word	0x58020400
 8002158:	58020800 	.word	0x58020800
 800215c:	58021000 	.word	0x58021000
 8002160:	58021800 	.word	0x58021800
 8002164:	58020000 	.word	0x58020000

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <Error_Handler+0x8>

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_MspInit+0x30>)
 800217c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_MspInit+0x30>)
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_MspInit+0x30>)
 800218c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	58024400 	.word	0x58024400

080021a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0b2      	sub	sp, #200	@ 0xc8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	22c0      	movs	r2, #192	@ 0xc0
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fb67 	bl	800788c <memset>
  if(hrtc->Instance==RTC)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <HAL_RTC_MspInit+0x5c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d119      	bne.n	80021fc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 fd33 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021ec:	f7ff ffbc 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RTC_MspInit+0x60>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_RTC_MspInit+0x60>)
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021fc:	bf00      	nop
 80021fe:	37c8      	adds	r7, #200	@ 0xc8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	58004000 	.word	0x58004000
 8002208:	58024400 	.word	0x58024400

0800220c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0ba      	sub	sp, #232	@ 0xe8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	22c0      	movs	r2, #192	@ 0xc0
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f005 fb2d 	bl	800788c <memset>
  if(hspi->Instance==SPI1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a26      	ldr	r2, [pc, #152]	@ (80022d0 <HAL_SPI_MspInit+0xc4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d144      	bne.n	80022c6 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800223c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002248:	2300      	movs	r3, #0
 800224a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fcfb 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800225c:	f7ff ff84 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002260:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <HAL_SPI_MspInit+0xc8>)
 8002262:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002266:	4a1b      	ldr	r2, [pc, #108]	@ (80022d4 <HAL_SPI_MspInit+0xc8>)
 8002268:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800226c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002270:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_SPI_MspInit+0xc8>)
 8002272:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_SPI_MspInit+0xc8>)
 8002280:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002284:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <HAL_SPI_MspInit+0xc8>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_SPI_MspInit+0xc8>)
 8002290:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800229c:	23e0      	movs	r3, #224	@ 0xe0
 800229e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022b4:	2305      	movs	r3, #5
 80022b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_SPI_MspInit+0xcc>)
 80022c2:	f000 fae1 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	37e8      	adds	r7, #232	@ 0xe8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40013000 	.word	0x40013000
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58020000 	.word	0x58020000

080022dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0ba      	sub	sp, #232	@ 0xe8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	22c0      	movs	r2, #192	@ 0xc0
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 fac5 	bl	800788c <memset>
  if(huart->Instance==USART3)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a27      	ldr	r2, [pc, #156]	@ (80023a4 <HAL_UART_MspInit+0xc8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d146      	bne.n	800239a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800230c:	f04f 0202 	mov.w	r2, #2
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fc92 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800232e:	f7ff ff1b 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002332:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_UART_MspInit+0xcc>)
 8002334:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002338:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <HAL_UART_MspInit+0xcc>)
 800233a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800233e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_UART_MspInit+0xcc>)
 8002344:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_UART_MspInit+0xcc>)
 8002352:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002356:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <HAL_UART_MspInit+0xcc>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002360:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_UART_MspInit+0xcc>)
 8002362:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800236e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002388:	2307      	movs	r3, #7
 800238a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_UART_MspInit+0xd0>)
 8002396:	f000 fa77 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	37e8      	adds	r7, #232	@ 0xe8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40004800 	.word	0x40004800
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020c00 	.word	0x58020c00

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <NMI_Handler+0x4>

080023b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <MemManage_Handler+0x4>

080023c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002406:	f000 f917 	bl	8002638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002414:	4b32      	ldr	r3, [pc, #200]	@ (80024e0 <SystemInit+0xd0>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	4a31      	ldr	r2, [pc, #196]	@ (80024e0 <SystemInit+0xd0>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002424:	4b2f      	ldr	r3, [pc, #188]	@ (80024e4 <SystemInit+0xd4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	2b02      	cmp	r3, #2
 800242e:	d807      	bhi.n	8002440 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002430:	4b2c      	ldr	r3, [pc, #176]	@ (80024e4 <SystemInit+0xd4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	4a2a      	ldr	r2, [pc, #168]	@ (80024e4 <SystemInit+0xd4>)
 800243a:	f043 0303 	orr.w	r3, r3, #3
 800243e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002440:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <SystemInit+0xd8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <SystemInit+0xd8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800244c:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <SystemInit+0xd8>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002452:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <SystemInit+0xd8>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4924      	ldr	r1, [pc, #144]	@ (80024e8 <SystemInit+0xd8>)
 8002458:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <SystemInit+0xdc>)
 800245a:	4013      	ands	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800245e:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <SystemInit+0xd4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <SystemInit+0xd4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 030f 	bic.w	r3, r3, #15
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <SystemInit+0xd4>)
 8002474:	f043 0303 	orr.w	r3, r3, #3
 8002478:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800247a:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <SystemInit+0xd8>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <SystemInit+0xd8>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <SystemInit+0xd8>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <SystemInit+0xd8>)
 800248e:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <SystemInit+0xe0>)
 8002490:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <SystemInit+0xd8>)
 8002494:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <SystemInit+0xe4>)
 8002496:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <SystemInit+0xd8>)
 800249a:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <SystemInit+0xe8>)
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <SystemInit+0xd8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <SystemInit+0xd8>)
 80024a6:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <SystemInit+0xe8>)
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <SystemInit+0xd8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024b0:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <SystemInit+0xd8>)
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <SystemInit+0xe8>)
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <SystemInit+0xd8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <SystemInit+0xd8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <SystemInit+0xd8>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <SystemInit+0xd8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <SystemInit+0xec>)
 80024d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	52002000 	.word	0x52002000
 80024e8:	58024400 	.word	0x58024400
 80024ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80024f0:	02020200 	.word	0x02020200
 80024f4:	01ff0000 	.word	0x01ff0000
 80024f8:	01010280 	.word	0x01010280
 80024fc:	52004000 	.word	0x52004000

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002538 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002504:	f7ff ff84 	bl	8002410 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002508:	480c      	ldr	r0, [pc, #48]	@ (800253c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250a:	490d      	ldr	r1, [pc, #52]	@ (8002540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002520:	4c0a      	ldr	r4, [pc, #40]	@ (800254c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800252e:	f005 f9b5 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7ff fb47 	bl	8001bc4 <main>
  bx  lr
 8002536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002538:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800253c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002540:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8002544:	0800af00 	.word	0x0800af00
  ldr r2, =_sbss
 8002548:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 800254c:	24000198 	.word	0x24000198

08002550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>
	...

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255a:	2003      	movs	r0, #3
 800255c:	f000 f962 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002560:	f001 f99e 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_Init+0x68>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	4913      	ldr	r1, [pc, #76]	@ (80025c0 <HAL_Init+0x6c>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_Init+0x68>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <HAL_Init+0x6c>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_Init+0x70>)
 8002596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_Init+0x74>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 f814 	bl	80025cc <HAL_InitTick>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e002      	b.n	80025b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025ae:	f7ff fde1 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58024400 	.word	0x58024400
 80025c0:	0800aeb8 	.word	0x0800aeb8
 80025c4:	2400001c 	.word	0x2400001c
 80025c8:	24000018 	.word	0x24000018

080025cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_InitTick+0x60>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e021      	b.n	8002624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_InitTick+0x64>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_InitTick+0x60>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f939 	bl	800286e <HAL_SYSTICK_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e00e      	b.n	8002624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d80a      	bhi.n	8002622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800260c:	2200      	movs	r2, #0
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f000 f911 	bl	800283a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002618:	4a06      	ldr	r2, [pc, #24]	@ (8002634 <HAL_InitTick+0x68>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24000024 	.word	0x24000024
 8002630:	24000018 	.word	0x24000018
 8002634:	24000020 	.word	0x24000020

08002638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_IncTick+0x20>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_IncTick+0x24>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	@ (800265c <HAL_IncTick+0x24>)
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	24000024 	.word	0x24000024
 800265c:	24000194 	.word	0x24000194

08002660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <HAL_GetTick+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	24000194 	.word	0x24000194

08002678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff ffee 	bl	8002660 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d005      	beq.n	800269e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002692:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <HAL_Delay+0x44>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269e:	bf00      	nop
 80026a0:	f7ff ffde 	bl	8002660 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8f7      	bhi.n	80026a0 <HAL_Delay+0x28>
  {
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	24000024 	.word	0x24000024

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <__NVIC_SetPriorityGrouping+0x40>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <__NVIC_SetPriorityGrouping+0x40>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00
 8002704:	05fa0000 	.word	0x05fa0000

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	@ (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	@ (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	@ 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f7ff ff8e 	bl	8002724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff47 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff5e 	bl	8002708 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff90 	bl	8002778 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5f 	bl	8002724 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffb2 	bl	80027e0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	@ 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002896:	4b89      	ldr	r3, [pc, #548]	@ (8002abc <HAL_GPIO_Init+0x234>)
 8002898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800289a:	e194      	b.n	8002bc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8186 	beq.w	8002bc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_GPIO_Init+0x44>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d130      	bne.n	800292e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002902:	2201      	movs	r2, #1
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0201 	and.w	r2, r3, #1
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b03      	cmp	r3, #3
 8002938:	d017      	beq.n	800296a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d123      	bne.n	80029be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	69b9      	ldr	r1, [r7, #24]
 80029ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0203 	and.w	r2, r3, #3
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80e0 	beq.w	8002bc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <HAL_GPIO_Init+0x238>)
 8002a02:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002a06:	4a2e      	ldr	r2, [pc, #184]	@ (8002ac0 <HAL_GPIO_Init+0x238>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002a10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_GPIO_Init+0x238>)
 8002a12:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1e:	4a29      	ldr	r2, [pc, #164]	@ (8002ac4 <HAL_GPIO_Init+0x23c>)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a20      	ldr	r2, [pc, #128]	@ (8002ac8 <HAL_GPIO_Init+0x240>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d052      	beq.n	8002af0 <HAL_GPIO_Init+0x268>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002acc <HAL_GPIO_Init+0x244>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d031      	beq.n	8002ab6 <HAL_GPIO_Init+0x22e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad0 <HAL_GPIO_Init+0x248>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02b      	beq.n	8002ab2 <HAL_GPIO_Init+0x22a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad4 <HAL_GPIO_Init+0x24c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d025      	beq.n	8002aae <HAL_GPIO_Init+0x226>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_GPIO_Init+0x250>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01f      	beq.n	8002aaa <HAL_GPIO_Init+0x222>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002adc <HAL_GPIO_Init+0x254>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0x21e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae0 <HAL_GPIO_Init+0x258>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x21a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ae4 <HAL_GPIO_Init+0x25c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x216>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a18      	ldr	r2, [pc, #96]	@ (8002ae8 <HAL_GPIO_Init+0x260>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x212>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <HAL_GPIO_Init+0x264>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a92:	2309      	movs	r3, #9
 8002a94:	e02d      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002a96:	230a      	movs	r3, #10
 8002a98:	e02b      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	e029      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e027      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	e025      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	e023      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	e021      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e01f      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e01d      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01b      	b.n	8002af2 <HAL_GPIO_Init+0x26a>
 8002aba:	bf00      	nop
 8002abc:	58000080 	.word	0x58000080
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	58000400 	.word	0x58000400
 8002ac8:	58020000 	.word	0x58020000
 8002acc:	58020400 	.word	0x58020400
 8002ad0:	58020800 	.word	0x58020800
 8002ad4:	58020c00 	.word	0x58020c00
 8002ad8:	58021000 	.word	0x58021000
 8002adc:	58021400 	.word	0x58021400
 8002ae0:	58021800 	.word	0x58021800
 8002ae4:	58021c00 	.word	0x58021c00
 8002ae8:	58022000 	.word	0x58022000
 8002aec:	58022400 	.word	0x58022400
 8002af0:	2300      	movs	r3, #0
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	f002 0203 	and.w	r2, r2, #3
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	4093      	lsls	r3, r2
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b02:	4938      	ldr	r1, [pc, #224]	@ (8002be4 <HAL_GPIO_Init+0x35c>)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f ae63 	bne.w	800289c <HAL_GPIO_Init+0x14>
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	3724      	adds	r7, #36	@ 0x24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	58000400 	.word	0x58000400

08002be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf8:	787b      	ldrb	r3, [r7, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c04:	e003      	b.n	8002c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	041a      	lsls	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c24:	4b29      	ldr	r3, [pc, #164]	@ (8002ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d00a      	beq.n	8002c46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c30:	4b26      	ldr	r3, [pc, #152]	@ (8002ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e040      	b.n	8002cc4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e03e      	b.n	8002cc4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c46:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002c4e:	491f      	ldr	r1, [pc, #124]	@ (8002ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c56:	f7ff fd03 	bl	8002660 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c5c:	e009      	b.n	8002c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c5e:	f7ff fcff 	bl	8002660 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c6c:	d901      	bls.n	8002c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e028      	b.n	8002cc4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c72:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b1e      	cmp	r3, #30
 8002c84:	d008      	beq.n	8002c98 <HAL_PWREx_ConfigSupply+0x7c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c8a:	d005      	beq.n	8002c98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b1d      	cmp	r3, #29
 8002c90:	d002      	beq.n	8002c98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b2d      	cmp	r3, #45	@ 0x2d
 8002c96:	d114      	bne.n	8002cc2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002c98:	f7ff fce2 	bl	8002660 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c9e:	e009      	b.n	8002cb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ca0:	f7ff fcde 	bl	8002660 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cae:	d901      	bls.n	8002cb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	58024800 	.word	0x58024800

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	@ 0x30
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f000 bc1f 	b.w	8003522 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80b3 	beq.w	8002e58 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4b95      	ldr	r3, [pc, #596]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cfc:	4b92      	ldr	r3, [pc, #584]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d007      	beq.n	8002d18 <HAL_RCC_OscConfig+0x48>
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0a:	2b18      	cmp	r3, #24
 8002d0c:	d112      	bne.n	8002d34 <HAL_RCC_OscConfig+0x64>
 8002d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d10d      	bne.n	8002d34 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4b8b      	ldr	r3, [pc, #556]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8098 	beq.w	8002e56 <HAL_RCC_OscConfig+0x186>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 8093 	bne.w	8002e56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e3f6      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x7c>
 8002d3e:	4b82      	ldr	r3, [pc, #520]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a81      	ldr	r2, [pc, #516]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e058      	b.n	8002dfe <HAL_RCC_OscConfig+0x12e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d112      	bne.n	8002d7a <HAL_RCC_OscConfig+0xaa>
 8002d54:	4b7c      	ldr	r3, [pc, #496]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a7b      	ldr	r2, [pc, #492]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a78      	ldr	r2, [pc, #480]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d66:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b76      	ldr	r3, [pc, #472]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a75      	ldr	r2, [pc, #468]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e041      	b.n	8002dfe <HAL_RCC_OscConfig+0x12e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d82:	d112      	bne.n	8002daa <HAL_RCC_OscConfig+0xda>
 8002d84:	4b70      	ldr	r3, [pc, #448]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6f      	ldr	r2, [pc, #444]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b6d      	ldr	r3, [pc, #436]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6c      	ldr	r2, [pc, #432]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d96:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a69      	ldr	r2, [pc, #420]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e029      	b.n	8002dfe <HAL_RCC_OscConfig+0x12e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_OscConfig+0x10a>
 8002db4:	4b64      	ldr	r3, [pc, #400]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a63      	ldr	r2, [pc, #396]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002dba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a60      	ldr	r2, [pc, #384]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e011      	b.n	8002dfe <HAL_RCC_OscConfig+0x12e>
 8002dda:	4b5b      	ldr	r3, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a5a      	ldr	r2, [pc, #360]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b58      	ldr	r3, [pc, #352]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b55      	ldr	r3, [pc, #340]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a54      	ldr	r2, [pc, #336]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002df8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7ff fc2b 	bl	8002660 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0e:	f7ff fc27 	bl	8002660 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	@ 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e380      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e20:	4b49      	ldr	r3, [pc, #292]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x13e>
 8002e2c:	e014      	b.n	8002e58 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7ff fc17 	bl	8002660 <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e36:	f7ff fc13 	bl	8002660 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	@ 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e36c      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e48:	4b3f      	ldr	r3, [pc, #252]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x166>
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 808c 	beq.w	8002f7e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e70:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1bc>
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2b18      	cmp	r3, #24
 8002e80:	d137      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x222>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d132      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1d4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e33e      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 0219 	bic.w	r2, r3, #25
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4925      	ldr	r1, [pc, #148]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7ff fbd3 	bl	8002660 <HAL_GetTick>
 8002eba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7ff fbcf 	bl	8002660 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e328      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	4917      	ldr	r1, [pc, #92]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef0:	e045      	b.n	8002f7e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d028      	beq.n	8002f4c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002efa:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0219 	bic.w	r2, r3, #25
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4910      	ldr	r1, [pc, #64]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fba8 	bl	8002660 <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f14:	f7ff fba4 	bl	8002660 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e2fd      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	4901      	ldr	r1, [pc, #4]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
 8002f46:	e01a      	b.n	8002f7e <HAL_RCC_OscConfig+0x2ae>
 8002f48:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4c:	4b97      	ldr	r3, [pc, #604]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a96      	ldr	r2, [pc, #600]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7ff fb82 	bl	8002660 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7ff fb7e 	bl	8002660 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e2d7      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f72:	4b8e      	ldr	r3, [pc, #568]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06a      	beq.n	8003060 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b88      	ldr	r3, [pc, #544]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f94:	4b85      	ldr	r3, [pc, #532]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d007      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2e0>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b18      	cmp	r3, #24
 8002fa4:	d11b      	bne.n	8002fde <HAL_RCC_OscConfig+0x30e>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2f8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e2ac      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fc8:	4b78      	ldr	r3, [pc, #480]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4975      	ldr	r1, [pc, #468]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fdc:	e040      	b.n	8003060 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d023      	beq.n	800302e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fe6:	4b71      	ldr	r3, [pc, #452]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a70      	ldr	r2, [pc, #448]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7ff fb35 	bl	8002660 <HAL_GetTick>
 8002ff6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ffa:	f7ff fb31 	bl	8002660 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e28a      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800300c:	4b67      	ldr	r3, [pc, #412]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003018:	4b64      	ldr	r3, [pc, #400]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	4961      	ldr	r1, [pc, #388]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800302e:	4b5f      	ldr	r3, [pc, #380]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5e      	ldr	r2, [pc, #376]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7ff fb11 	bl	8002660 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003042:	f7ff fb0d 	bl	8002660 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e266      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003054:	4b55      	ldr	r3, [pc, #340]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d036      	beq.n	80030da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	4b4d      	ldr	r3, [pc, #308]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003078:	4a4c      	ldr	r2, [pc, #304]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7ff faee 	bl	8002660 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7ff faea 	bl	8002660 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e243      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309a:	4b44      	ldr	r3, [pc, #272]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 800309c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x3b8>
 80030a6:	e018      	b.n	80030da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	4a3f      	ldr	r2, [pc, #252]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7ff fad4 	bl	8002660 <HAL_GetTick>
 80030b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7ff fad0 	bl	8002660 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e229      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ce:	4b37      	ldr	r3, [pc, #220]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d036      	beq.n	8003154 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d019      	beq.n	8003122 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ee:	4b2f      	ldr	r3, [pc, #188]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2e      	ldr	r2, [pc, #184]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 80030f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030fa:	f7ff fab1 	bl	8002660 <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003102:	f7ff faad 	bl	8002660 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e206      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x432>
 8003120:	e018      	b.n	8003154 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003122:	4b22      	ldr	r3, [pc, #136]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 8003128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800312c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800312e:	f7ff fa97 	bl	8002660 <HAL_GetTick>
 8003132:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003136:	f7ff fa93 	bl	8002660 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1ec      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003148:	4b18      	ldr	r3, [pc, #96]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80af 	beq.w	80032c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003162:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <HAL_RCC_OscConfig+0x4e0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <HAL_RCC_OscConfig+0x4e0>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800316e:	f7ff fa77 	bl	8002660 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7ff fa73 	bl	8002660 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b64      	cmp	r3, #100	@ 0x64
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1cc      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCC_OscConfig+0x4e0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10b      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4e4>
 800319c:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a0:	4a02      	ldr	r2, [pc, #8]	@ (80031ac <HAL_RCC_OscConfig+0x4dc>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a8:	e05b      	b.n	8003262 <HAL_RCC_OscConfig+0x592>
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400
 80031b0:	58024800 	.word	0x58024800
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d112      	bne.n	80031e2 <HAL_RCC_OscConfig+0x512>
 80031bc:	4b9d      	ldr	r3, [pc, #628]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	4a9c      	ldr	r2, [pc, #624]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031cc:	4a99      	ldr	r2, [pc, #612]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d4:	4b97      	ldr	r3, [pc, #604]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a96      	ldr	r2, [pc, #600]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e0:	e03f      	b.n	8003262 <HAL_RCC_OscConfig+0x592>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x540>
 80031ea:	4b92      	ldr	r3, [pc, #584]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	4a91      	ldr	r2, [pc, #580]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	4a8e      	ldr	r2, [pc, #568]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80031fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003200:	6713      	str	r3, [r2, #112]	@ 0x70
 8003202:	4b8c      	ldr	r3, [pc, #560]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a8b      	ldr	r2, [pc, #556]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	@ 0x70
 800320e:	e028      	b.n	8003262 <HAL_RCC_OscConfig+0x592>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b85      	cmp	r3, #133	@ 0x85
 8003216:	d112      	bne.n	800323e <HAL_RCC_OscConfig+0x56e>
 8003218:	4b86      	ldr	r3, [pc, #536]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321c:	4a85      	ldr	r2, [pc, #532]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6713      	str	r3, [r2, #112]	@ 0x70
 8003224:	4b83      	ldr	r3, [pc, #524]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a82      	ldr	r2, [pc, #520]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800322a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003230:	4b80      	ldr	r3, [pc, #512]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	4a7f      	ldr	r2, [pc, #508]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70
 800323c:	e011      	b.n	8003262 <HAL_RCC_OscConfig+0x592>
 800323e:	4b7d      	ldr	r3, [pc, #500]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	4a7c      	ldr	r2, [pc, #496]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6713      	str	r3, [r2, #112]	@ 0x70
 800324a:	4b7a      	ldr	r3, [pc, #488]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324e:	4a79      	ldr	r2, [pc, #484]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6713      	str	r3, [r2, #112]	@ 0x70
 8003256:	4b77      	ldr	r3, [pc, #476]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	4a76      	ldr	r2, [pc, #472]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800325c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003260:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d015      	beq.n	8003296 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7ff f9f9 	bl	8002660 <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7ff f9f5 	bl	8002660 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e14c      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003288:	4b6a      	ldr	r3, [pc, #424]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ee      	beq.n	8003272 <HAL_RCC_OscConfig+0x5a2>
 8003294:	e014      	b.n	80032c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7ff f9e3 	bl	8002660 <HAL_GetTick>
 800329a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7ff f9df 	bl	8002660 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e136      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032b4:	4b5f      	ldr	r3, [pc, #380]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ee      	bne.n	800329e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 812b 	beq.w	8003520 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032d2:	2b18      	cmp	r3, #24
 80032d4:	f000 80bb 	beq.w	800344e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f040 8095 	bne.w	800340c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4b54      	ldr	r3, [pc, #336]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a53      	ldr	r2, [pc, #332]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80032e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7ff f9b7 	bl	8002660 <HAL_GetTick>
 80032f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7ff f9b3 	bl	8002660 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003308:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	4b47      	ldr	r3, [pc, #284]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003316:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003318:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <HAL_RCC_OscConfig+0x768>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	430a      	orrs	r2, r1
 8003328:	4942      	ldr	r1, [pc, #264]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800332a:	4313      	orrs	r3, r2
 800332c:	628b      	str	r3, [r1, #40]	@ 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	3b01      	subs	r3, #1
 8003334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333c:	3b01      	subs	r3, #1
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	b29b      	uxth	r3, r3
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	3b01      	subs	r3, #1
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	3b01      	subs	r3, #1
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800335e:	4935      	ldr	r1, [pc, #212]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003360:	4313      	orrs	r3, r2
 8003362:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003364:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	4a32      	ldr	r2, [pc, #200]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003370:	4b30      	ldr	r3, [pc, #192]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003374:	4b31      	ldr	r3, [pc, #196]	@ (800343c <HAL_RCC_OscConfig+0x76c>)
 8003376:	4013      	ands	r3, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800337c:	00d2      	lsls	r2, r2, #3
 800337e:	492d      	ldr	r1, [pc, #180]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003380:	4313      	orrs	r3, r2
 8003382:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003384:	4b2b      	ldr	r3, [pc, #172]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	f023 020c 	bic.w	r2, r3, #12
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	4928      	ldr	r1, [pc, #160]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003392:	4313      	orrs	r3, r2
 8003394:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003396:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	f023 0202 	bic.w	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	4924      	ldr	r1, [pc, #144]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033a8:	4b22      	ldr	r3, [pc, #136]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	4a21      	ldr	r2, [pc, #132]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80033cc:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	4a18      	ldr	r2, [pc, #96]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d8:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7ff f93c 	bl	8002660 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7ff f938 	bl	8002660 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e091      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x71c>
 800340a:	e089      	b.n	8003520 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340c:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <HAL_RCC_OscConfig+0x764>)
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7ff f922 	bl	8002660 <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800341e:	e00f      	b.n	8003440 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7ff f91e 	bl	8002660 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d908      	bls.n	8003440 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e077      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
 8003432:	bf00      	nop
 8003434:	58024400 	.word	0x58024400
 8003438:	fffffc0c 	.word	0xfffffc0c
 800343c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003440:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e9      	bne.n	8003420 <HAL_RCC_OscConfig+0x750>
 800344c:	e068      	b.n	8003520 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800344e:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	2b01      	cmp	r3, #1
 8003460:	d031      	beq.n	80034c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d12a      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d122      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d11a      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	0a5b      	lsrs	r3, r3, #9
 8003494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d111      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d108      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	0e1b      	lsrs	r3, r3, #24
 80034b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e02b      	b.n	8003522 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80034ca:	4b18      	ldr	r3, [pc, #96]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 80034cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d01f      	beq.n	8003520 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034e0:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	4a11      	ldr	r2, [pc, #68]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ec:	f7ff f8b8 	bl	8002660 <HAL_GetTick>
 80034f0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034f2:	bf00      	nop
 80034f4:	f7ff f8b4 	bl	8002660 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d0f9      	beq.n	80034f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 8003502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003504:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <HAL_RCC_OscConfig+0x860>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800350c:	00d2      	lsls	r2, r2, #3
 800350e:	4907      	ldr	r1, [pc, #28]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	4a04      	ldr	r2, [pc, #16]	@ (800352c <HAL_RCC_OscConfig+0x85c>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3730      	adds	r7, #48	@ 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
 8003530:	ffff0007 	.word	0xffff0007

08003534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e19c      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b8a      	ldr	r3, [pc, #552]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d910      	bls.n	8003578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b87      	ldr	r3, [pc, #540]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 020f 	bic.w	r2, r3, #15
 800355e:	4985      	ldr	r1, [pc, #532]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b83      	ldr	r3, [pc, #524]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e184      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	4b7b      	ldr	r3, [pc, #492]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003590:	429a      	cmp	r2, r3
 8003592:	d908      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003594:	4b78      	ldr	r3, [pc, #480]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4975      	ldr	r1, [pc, #468]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	4b70      	ldr	r3, [pc, #448]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035be:	429a      	cmp	r2, r3
 80035c0:	d908      	bls.n	80035d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	496a      	ldr	r1, [pc, #424]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	4b64      	ldr	r3, [pc, #400]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d908      	bls.n	8003602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035f0:	4b61      	ldr	r3, [pc, #388]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	495e      	ldr	r1, [pc, #376]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	4b59      	ldr	r3, [pc, #356]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800361a:	429a      	cmp	r2, r3
 800361c:	d908      	bls.n	8003630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800361e:	4b56      	ldr	r3, [pc, #344]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4953      	ldr	r1, [pc, #332]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 800362c:	4313      	orrs	r3, r2
 800362e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	4b4d      	ldr	r3, [pc, #308]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	429a      	cmp	r2, r3
 800364a:	d908      	bls.n	800365e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b4a      	ldr	r3, [pc, #296]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f023 020f 	bic.w	r2, r3, #15
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4947      	ldr	r1, [pc, #284]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 800365a:	4313      	orrs	r3, r2
 800365c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d055      	beq.n	8003716 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800366a:	4b43      	ldr	r3, [pc, #268]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4940      	ldr	r1, [pc, #256]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003678:	4313      	orrs	r3, r2
 800367a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d107      	bne.n	8003694 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003684:	4b3c      	ldr	r3, [pc, #240]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d121      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0f6      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d107      	bne.n	80036ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800369c:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d115      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0ea      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b4:	4b30      	ldr	r3, [pc, #192]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0de      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0d6      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d4:	4b28      	ldr	r3, [pc, #160]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f023 0207 	bic.w	r2, r3, #7
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4925      	ldr	r1, [pc, #148]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e6:	f7fe ffbb 	bl	8002660 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ee:	f7fe ffb7 	bl	8002660 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0be      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003704:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	429a      	cmp	r2, r3
 8003714:	d1eb      	bne.n	80036ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	429a      	cmp	r2, r3
 8003730:	d208      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003732:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f023 020f 	bic.w	r2, r3, #15
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	490e      	ldr	r1, [pc, #56]	@ (8003778 <HAL_RCC_ClockConfig+0x244>)
 8003740:	4313      	orrs	r3, r2
 8003742:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d214      	bcs.n	800377c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 020f 	bic.w	r2, r3, #15
 800375a:	4906      	ldr	r1, [pc, #24]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <HAL_RCC_ClockConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e086      	b.n	8003882 <HAL_RCC_ClockConfig+0x34e>
 8003774:	52002000 	.word	0x52002000
 8003778:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003794:	429a      	cmp	r2, r3
 8003796:	d208      	bcs.n	80037aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003798:	4b3c      	ldr	r3, [pc, #240]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4939      	ldr	r1, [pc, #228]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	4b34      	ldr	r3, [pc, #208]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d208      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037c6:	4b31      	ldr	r3, [pc, #196]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	492e      	ldr	r1, [pc, #184]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	4b28      	ldr	r3, [pc, #160]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d208      	bcs.n	8003806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037f4:	4b25      	ldr	r3, [pc, #148]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4922      	ldr	r1, [pc, #136]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 8003802:	4313      	orrs	r3, r2
 8003804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d010      	beq.n	8003834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800381e:	429a      	cmp	r2, r3
 8003820:	d208      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4917      	ldr	r1, [pc, #92]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 8003830:	4313      	orrs	r3, r2
 8003832:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003834:	f000 f834 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b14      	ldr	r3, [pc, #80]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	4912      	ldr	r1, [pc, #72]	@ (8003890 <HAL_RCC_ClockConfig+0x35c>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_RCC_ClockConfig+0x358>)
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4a0d      	ldr	r2, [pc, #52]	@ (8003890 <HAL_RCC_ClockConfig+0x35c>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <HAL_RCC_ClockConfig+0x360>)
 800386a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800386c:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <HAL_RCC_ClockConfig+0x364>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_RCC_ClockConfig+0x368>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fea8 	bl	80025cc <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400
 8003890:	0800aeb8 	.word	0x0800aeb8
 8003894:	2400001c 	.word	0x2400001c
 8003898:	24000018 	.word	0x24000018
 800389c:	24000020 	.word	0x24000020

080038a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a6:	4bb3      	ldr	r3, [pc, #716]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ae:	2b18      	cmp	r3, #24
 80038b0:	f200 8155 	bhi.w	8003b5e <HAL_RCC_GetSysClockFreq+0x2be>
 80038b4:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	08003921 	.word	0x08003921
 80038c0:	08003b5f 	.word	0x08003b5f
 80038c4:	08003b5f 	.word	0x08003b5f
 80038c8:	08003b5f 	.word	0x08003b5f
 80038cc:	08003b5f 	.word	0x08003b5f
 80038d0:	08003b5f 	.word	0x08003b5f
 80038d4:	08003b5f 	.word	0x08003b5f
 80038d8:	08003b5f 	.word	0x08003b5f
 80038dc:	08003947 	.word	0x08003947
 80038e0:	08003b5f 	.word	0x08003b5f
 80038e4:	08003b5f 	.word	0x08003b5f
 80038e8:	08003b5f 	.word	0x08003b5f
 80038ec:	08003b5f 	.word	0x08003b5f
 80038f0:	08003b5f 	.word	0x08003b5f
 80038f4:	08003b5f 	.word	0x08003b5f
 80038f8:	08003b5f 	.word	0x08003b5f
 80038fc:	0800394d 	.word	0x0800394d
 8003900:	08003b5f 	.word	0x08003b5f
 8003904:	08003b5f 	.word	0x08003b5f
 8003908:	08003b5f 	.word	0x08003b5f
 800390c:	08003b5f 	.word	0x08003b5f
 8003910:	08003b5f 	.word	0x08003b5f
 8003914:	08003b5f 	.word	0x08003b5f
 8003918:	08003b5f 	.word	0x08003b5f
 800391c:	08003953 	.word	0x08003953
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003920:	4b94      	ldr	r3, [pc, #592]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800392c:	4b91      	ldr	r3, [pc, #580]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	4a90      	ldr	r2, [pc, #576]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
 800393c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800393e:	e111      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003940:	4b8d      	ldr	r3, [pc, #564]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003942:	61bb      	str	r3, [r7, #24]
      break;
 8003944:	e10e      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003946:	4b8d      	ldr	r3, [pc, #564]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003948:	61bb      	str	r3, [r7, #24]
      break;
 800394a:	e10b      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800394c:	4b8c      	ldr	r3, [pc, #560]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800394e:	61bb      	str	r3, [r7, #24]
      break;
 8003950:	e108      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003952:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800395c:	4b85      	ldr	r3, [pc, #532]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003966:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003968:	4b82      	ldr	r3, [pc, #520]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003972:	4b80      	ldr	r3, [pc, #512]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003976:	08db      	lsrs	r3, r3, #3
 8003978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80e1 	beq.w	8003b58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b02      	cmp	r3, #2
 800399a:	f000 8083 	beq.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x204>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	f200 80a1 	bhi.w	8003ae8 <HAL_RCC_GetSysClockFreq+0x248>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x114>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d056      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x1c0>
 80039b2:	e099      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02d      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
 80039d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b62      	ldr	r3, [pc, #392]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a1a:	e087      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b51      	ldr	r3, [pc, #324]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a5e:	e065      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b40      	ldr	r3, [pc, #256]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aa2:	e043      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ae6:	e021      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	0a5b      	lsrs	r3, r3, #9
 8003b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b36:	3301      	adds	r3, #1
 8003b38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b50:	ee17 3a90 	vmov	r3, s15
 8003b54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b56:	e005      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
      break;
 8003b5c:	e002      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b60:	61bb      	str	r3, [r7, #24]
      break;
 8003b62:	bf00      	nop
  }

  return sysclockfreq;
 8003b64:	69bb      	ldr	r3, [r7, #24]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	58024400 	.word	0x58024400
 8003b78:	03d09000 	.word	0x03d09000
 8003b7c:	003d0900 	.word	0x003d0900
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	46000000 	.word	0x46000000
 8003b88:	4c742400 	.word	0x4c742400
 8003b8c:	4a742400 	.word	0x4a742400
 8003b90:	4af42400 	.word	0x4af42400

08003b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b9a:	f7ff fe81 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490f      	ldr	r1, [pc, #60]	@ (8003be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	4a09      	ldr	r2, [pc, #36]	@ (8003be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	4a07      	ldr	r2, [pc, #28]	@ (8003bec <HAL_RCC_GetHCLKFreq+0x58>)
 8003bd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd2:	4a07      	ldr	r2, [pc, #28]	@ (8003bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <HAL_RCC_GetHCLKFreq+0x58>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	58024400 	.word	0x58024400
 8003be8:	0800aeb8 	.word	0x0800aeb8
 8003bec:	2400001c 	.word	0x2400001c
 8003bf0:	24000018 	.word	0x24000018

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bf8:	f7ff ffcc 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4904      	ldr	r1, [pc, #16]	@ (8003c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	0800aeb8 	.word	0x0800aeb8

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003c24:	f7ff ffb6 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	@ (8003c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	58024400 	.word	0x58024400
 8003c48:	0800aeb8 	.word	0x0800aeb8

08003c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b0c8      	sub	sp, #288	@ 0x120
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c70:	2500      	movs	r5, #0
 8003c72:	ea54 0305 	orrs.w	r3, r4, r5
 8003c76:	d049      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c82:	d02f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c88:	d828      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c8e:	d01a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c94:	d822      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9e:	d007      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	4aa6      	ldr	r2, [pc, #664]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cae:	e01a      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 fc43 	bl	8005544 <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cca:	3328      	adds	r3, #40	@ 0x28
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fcea 	bl	80056a8 <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cee:	4b94      	ldr	r3, [pc, #592]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cfc:	4a90      	ldr	r2, [pc, #576]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003d18:	f04f 0900 	mov.w	r9, #0
 8003d1c:	ea58 0309 	orrs.w	r3, r8, r9
 8003d20:	d047      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d82a      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d49 	.word	0x08003d49
 8003d38:	08003d57 	.word	0x08003d57
 8003d3c:	08003d6d 	.word	0x08003d6d
 8003d40:	08003d8b 	.word	0x08003d8b
 8003d44:	08003d8b 	.word	0x08003d8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d48:	4b7d      	ldr	r3, [pc, #500]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d54:	e01a      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 fbf0 	bl	8005544 <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d6a:	e00f      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d70:	3328      	adds	r3, #40	@ 0x28
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 fc97 	bl	80056a8 <RCCEx_PLL3_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d80:	e004      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d94:	4b6a      	ldr	r3, [pc, #424]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d98:	f023 0107 	bic.w	r1, r3, #7
 8003d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	4a67      	ldr	r2, [pc, #412]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003dbe:	f04f 0b00 	mov.w	fp, #0
 8003dc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003dc6:	d054      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003dd2:	d036      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003dd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003dd8:	d82f      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dde:	d032      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de4:	d829      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003de8:	d02f      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dec:	d825      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d018      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d821      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d007      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003dfe:	e01c      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e00:	4b4f      	ldr	r3, [pc, #316]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	4a4e      	ldr	r2, [pc, #312]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e0c:	e01e      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e12:	3308      	adds	r3, #8
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fb94 	bl	8005544 <RCCEx_PLL2_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e22:	e013      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e28:	3328      	adds	r3, #40	@ 0x28
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 fc3b 	bl	80056a8 <RCCEx_PLL3_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e54:	4b3a      	ldr	r3, [pc, #232]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e62:	4a37      	ldr	r2, [pc, #220]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003e7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	d05c      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e98:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003e9c:	d03b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e9e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003ea2:	d834      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea8:	d037      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eae:	d82e      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003eb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003eb4:	d033      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003eb6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003eba:	d828      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec6:	d822      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed0:	d007      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ee0:	e01e      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fb2a 	bl	8005544 <RCCEx_PLL2_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ef6:	e013      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efc:	3328      	adds	r3, #40	@ 0x28
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 fbd1 	bl	80056a8 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003f0c:	e008      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f14:	e004      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f36:	4a02      	ldr	r2, [pc, #8]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003f3e:	bf00      	nop
 8003f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d03a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	2b30      	cmp	r3, #48	@ 0x30
 8003f74:	d01f      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f76:	2b30      	cmp	r3, #48	@ 0x30
 8003f78:	d819      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d00c      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d815      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d111      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8a:	4bae      	ldr	r3, [pc, #696]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	4aad      	ldr	r2, [pc, #692]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f96:	e011      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 facf 	bl	8005544 <RCCEx_PLL2_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fb4:	e002      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fc4:	4b9f      	ldr	r3, [pc, #636]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd2:	4a9c      	ldr	r2, [pc, #624]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd8:	e003      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d051      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800400c:	d035      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800400e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004012:	d82e      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004014:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004018:	d031      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800401a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800401e:	d828      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004024:	d01a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800402a:	d822      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004034:	d007      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004036:	e01c      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004038:	4b82      	ldr	r3, [pc, #520]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403c:	4a81      	ldr	r2, [pc, #516]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800403e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004044:	e01c      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404a:	3308      	adds	r3, #8
 800404c:	2100      	movs	r1, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f001 fa78 	bl	8005544 <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800405a:	e011      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004060:	3328      	adds	r3, #40	@ 0x28
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f001 fb1f 	bl	80056a8 <RCCEx_PLL3_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004070:	e006      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800407e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004080:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004088:	4b6e      	ldr	r3, [pc, #440]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800408a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004096:	4a6b      	ldr	r2, [pc, #428]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6513      	str	r3, [r2, #80]	@ 0x50
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80040bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d053      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040d0:	d033      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80040d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040d6:	d82c      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040dc:	d02f      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80040de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040e2:	d826      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e8:	d02b      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040ee:	d820      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f4:	d012      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80040f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040fa:	d81a      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d022      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004104:	d115      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800410a:	3308      	adds	r3, #8
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fa18 	bl	8005544 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800411a:	e015      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800411c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004120:	3328      	adds	r3, #40	@ 0x28
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fabf 	bl	80056a8 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004130:	e00a      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800413a:	bf00      	nop
 800413c:	e004      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004150:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004154:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800415c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800415e:	4a39      	ldr	r2, [pc, #228]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004160:	430b      	orrs	r3, r1
 8004162:	6513      	str	r3, [r2, #80]	@ 0x50
 8004164:	e003      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004166:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800416a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800416e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800417a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004184:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004188:	460b      	mov	r3, r1
 800418a:	4313      	orrs	r3, r2
 800418c:	d060      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800418e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004196:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800419a:	d039      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800419c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80041a0:	d832      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041a6:	d035      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80041a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ac:	d82c      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d031      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b8:	d826      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041be:	d02d      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80041c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041c4:	d820      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ca:	d012      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d0:	d81a      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d024      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041da:	d115      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041e0:	3308      	adds	r3, #8
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f9ad 	bl	8005544 <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041f0:	e017      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f6:	3328      	adds	r3, #40	@ 0x28
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 fa54 	bl	80056a8 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004206:	e00c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800420e:	e008      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004210:	bf00      	nop
 8004212:	e006      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004214:	bf00      	nop
 8004216:	e004      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004218:	bf00      	nop
 800421a:	e002      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004222:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10e      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800423a:	4a02      	ldr	r2, [pc, #8]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800423c:	430b      	orrs	r3, r1
 800423e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800424c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800425c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d037      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004274:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800427a:	d00e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800427c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004280:	d816      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800428a:	d111      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428c:	4bc4      	ldr	r3, [pc, #784]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	4ac3      	ldr	r2, [pc, #780]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800429e:	3308      	adds	r3, #8
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f94e 	bl	8005544 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042c2:	4bb7      	ldr	r3, [pc, #732]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042d0:	4ab3      	ldr	r2, [pc, #716]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d2:	430b      	orrs	r3, r1
 80042d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d039      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004306:	2b03      	cmp	r3, #3
 8004308:	d81c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	0800434d 	.word	0x0800434d
 8004314:	08004321 	.word	0x08004321
 8004318:	0800432f 	.word	0x0800432f
 800431c:	0800434d 	.word	0x0800434d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4b9f      	ldr	r3, [pc, #636]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4a9e      	ldr	r2, [pc, #632]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800432c:	e00f      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800432e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004332:	3308      	adds	r3, #8
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f904 	bl	8005544 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004342:	e004      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800434c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004356:	4b92      	ldr	r3, [pc, #584]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	f023 0103 	bic.w	r1, r3, #3
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	4a8e      	ldr	r2, [pc, #568]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004366:	430b      	orrs	r3, r1
 8004368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004370:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800438a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	f000 8099 	beq.w	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004396:	4b83      	ldr	r3, [pc, #524]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a82      	ldr	r2, [pc, #520]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a2:	f7fe f95d 	bl	8002660 <HAL_GetTick>
 80043a6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043aa:	e00b      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fe f958 	bl	8002660 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	@ 0x64
 80043ba:	d903      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c4:	4b77      	ldr	r3, [pc, #476]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ed      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80043d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d173      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043d8:	4b71      	ldr	r3, [pc, #452]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043e4:	4053      	eors	r3, r2
 80043e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d015      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ee:	4b6c      	ldr	r3, [pc, #432]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fa:	4b69      	ldr	r3, [pc, #420]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a68      	ldr	r2, [pc, #416]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004406:	4b66      	ldr	r3, [pc, #408]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a65      	ldr	r2, [pc, #404]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004412:	4a63      	ldr	r2, [pc, #396]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800441a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800441e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004426:	d118      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe f91a 	bl	8002660 <HAL_GetTick>
 800442c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004430:	e00d      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe f915 	bl	8002660 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800443c:	1ad2      	subs	r2, r2, r3
 800443e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800444e:	4b54      	ldr	r3, [pc, #336]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0eb      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800445a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800445e:	2b00      	cmp	r3, #0
 8004460:	d129      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800446a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004472:	d10e      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004474:	4b4a      	ldr	r3, [pc, #296]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800447c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004484:	091a      	lsrs	r2, r3, #4
 8004486:	4b48      	ldr	r3, [pc, #288]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004488:	4013      	ands	r3, r2
 800448a:	4a45      	ldr	r2, [pc, #276]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6113      	str	r3, [r2, #16]
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004492:	4b43      	ldr	r3, [pc, #268]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a42      	ldr	r2, [pc, #264]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800449c:	6113      	str	r3, [r2, #16]
 800449e:	4b40      	ldr	r3, [pc, #256]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ae:	4a3c      	ldr	r2, [pc, #240]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b4:	e008      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80044be:	e003      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f002 0301 	and.w	r3, r2, #1
 80044d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f000 8090 	beq.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f2:	2b28      	cmp	r3, #40	@ 0x28
 80044f4:	d870      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80044f6:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	080045e1 	.word	0x080045e1
 8004500:	080045d9 	.word	0x080045d9
 8004504:	080045d9 	.word	0x080045d9
 8004508:	080045d9 	.word	0x080045d9
 800450c:	080045d9 	.word	0x080045d9
 8004510:	080045d9 	.word	0x080045d9
 8004514:	080045d9 	.word	0x080045d9
 8004518:	080045d9 	.word	0x080045d9
 800451c:	080045ad 	.word	0x080045ad
 8004520:	080045d9 	.word	0x080045d9
 8004524:	080045d9 	.word	0x080045d9
 8004528:	080045d9 	.word	0x080045d9
 800452c:	080045d9 	.word	0x080045d9
 8004530:	080045d9 	.word	0x080045d9
 8004534:	080045d9 	.word	0x080045d9
 8004538:	080045d9 	.word	0x080045d9
 800453c:	080045c3 	.word	0x080045c3
 8004540:	080045d9 	.word	0x080045d9
 8004544:	080045d9 	.word	0x080045d9
 8004548:	080045d9 	.word	0x080045d9
 800454c:	080045d9 	.word	0x080045d9
 8004550:	080045d9 	.word	0x080045d9
 8004554:	080045d9 	.word	0x080045d9
 8004558:	080045d9 	.word	0x080045d9
 800455c:	080045e1 	.word	0x080045e1
 8004560:	080045d9 	.word	0x080045d9
 8004564:	080045d9 	.word	0x080045d9
 8004568:	080045d9 	.word	0x080045d9
 800456c:	080045d9 	.word	0x080045d9
 8004570:	080045d9 	.word	0x080045d9
 8004574:	080045d9 	.word	0x080045d9
 8004578:	080045d9 	.word	0x080045d9
 800457c:	080045e1 	.word	0x080045e1
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045d9 	.word	0x080045d9
 8004594:	080045d9 	.word	0x080045d9
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	58024400 	.word	0x58024400
 80045a4:	58024800 	.word	0x58024800
 80045a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b0:	3308      	adds	r3, #8
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 ffc5 	bl	8005544 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045c0:	e00f      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c6:	3328      	adds	r3, #40	@ 0x28
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f86c 	bl	80056a8 <RCCEx_PLL3_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045d6:	e004      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045de:	e000      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80045e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045ea:	4bc0      	ldr	r3, [pc, #768]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fa:	4abc      	ldr	r2, [pc, #752]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004600:	e003      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004606:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800460a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f002 0302 	and.w	r3, r2, #2
 8004616:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800461a:	2300      	movs	r3, #0
 800461c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004620:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004624:	460b      	mov	r3, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	d043      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004632:	2b05      	cmp	r3, #5
 8004634:	d824      	bhi.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004636:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004689 	.word	0x08004689
 8004640:	08004655 	.word	0x08004655
 8004644:	0800466b 	.word	0x0800466b
 8004648:	08004689 	.word	0x08004689
 800464c:	08004689 	.word	0x08004689
 8004650:	08004689 	.word	0x08004689
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004658:	3308      	adds	r3, #8
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 ff71 	bl	8005544 <RCCEx_PLL2_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004668:	e00f      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800466e:	3328      	adds	r3, #40	@ 0x28
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f818 	bl	80056a8 <RCCEx_PLL3_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004692:	4b96      	ldr	r3, [pc, #600]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004696:	f023 0107 	bic.w	r1, r3, #7
 800469a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800469e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a2:	4a92      	ldr	r2, [pc, #584]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f002 0304 	and.w	r3, r2, #4
 80046be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d043      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046da:	2b05      	cmp	r3, #5
 80046dc:	d824      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80046de:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004731 	.word	0x08004731
 80046e8:	080046fd 	.word	0x080046fd
 80046ec:	08004713 	.word	0x08004713
 80046f0:	08004731 	.word	0x08004731
 80046f4:	08004731 	.word	0x08004731
 80046f8:	08004731 	.word	0x08004731
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004700:	3308      	adds	r3, #8
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f000 ff1d 	bl	8005544 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004710:	e00f      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004716:	3328      	adds	r3, #40	@ 0x28
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f000 ffc4 	bl	80056a8 <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004726:	e004      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800473a:	4b6c      	ldr	r3, [pc, #432]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473e:	f023 0107 	bic.w	r1, r3, #7
 8004742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800474a:	4a68      	ldr	r2, [pc, #416]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800474c:	430b      	orrs	r3, r1
 800474e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004750:	e003      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004752:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004756:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800475a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f002 0320 	and.w	r3, r2, #32
 8004766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d055      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800477a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800477e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004786:	d033      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800478c:	d82c      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d02f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d826      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800479a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800479e:	d02b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80047a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047a4:	d820      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047aa:	d012      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b0:	d81a      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d022      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80047b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047ba:	d115      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c0:	3308      	adds	r3, #8
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 febd 	bl	8005544 <RCCEx_PLL2_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047d0:	e015      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d6:	3328      	adds	r3, #40	@ 0x28
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 ff64 	bl	80056a8 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047e6:	e00a      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047ee:	e006      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047f0:	bf00      	nop
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047f4:	bf00      	nop
 80047f6:	e002      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047f8:	bf00      	nop
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004806:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800480e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004816:	4a35      	ldr	r2, [pc, #212]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004818:	430b      	orrs	r3, r1
 800481a:	6553      	str	r3, [r2, #84]	@ 0x54
 800481c:	e003      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800483c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d058      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800484a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800484e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004852:	d033      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004854:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004858:	d82c      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485e:	d02f      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004864:	d826      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004866:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800486a:	d02b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800486c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004870:	d820      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004876:	d012      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800487c:	d81a      	bhi.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d022      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d115      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800488c:	3308      	adds	r3, #8
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fe57 	bl	8005544 <RCCEx_PLL2_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800489c:	e015      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a2:	3328      	adds	r3, #40	@ 0x28
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fefe 	bl	80056a8 <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048b2:	e00a      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80048bc:	bf00      	nop
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10e      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d2:	4b06      	ldr	r3, [pc, #24]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048e2:	4a02      	ldr	r2, [pc, #8]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e8:	e006      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800490e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	d055      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800491c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004920:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004924:	d033      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004926:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800492a:	d82c      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800492c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004930:	d02f      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004936:	d826      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004938:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800493c:	d02b      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800493e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004942:	d820      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004948:	d012      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800494a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800494e:	d81a      	bhi.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d022      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004958:	d115      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800495e:	3308      	adds	r3, #8
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fdee 	bl	8005544 <RCCEx_PLL2_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800496e:	e015      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004974:	3328      	adds	r3, #40	@ 0x28
 8004976:	2102      	movs	r1, #2
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fe95 	bl	80056a8 <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004984:	e00a      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800498c:	e006      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800498e:	bf00      	nop
 8004990:	e004      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004992:	bf00      	nop
 8004994:	e002      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049a4:	4ba1      	ldr	r3, [pc, #644]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049b4:	4a9d      	ldr	r2, [pc, #628]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b6:	430b      	orrs	r3, r1
 80049b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f002 0308 	and.w	r3, r2, #8
 80049d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049de:	460b      	mov	r3, r1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	d01e      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f6:	3328      	adds	r3, #40	@ 0x28
 80049f8:	2102      	movs	r1, #2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fe54 	bl	80056a8 <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a0c:	4b87      	ldr	r3, [pc, #540]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a1c:	4a83      	ldr	r2, [pc, #524]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f002 0310 	and.w	r3, r2, #16
 8004a2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d01e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a4e:	d10c      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a54:	3328      	adds	r3, #40	@ 0x28
 8004a56:	2102      	movs	r1, #2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fe25 	bl	80056a8 <RCCEx_PLL3_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a6a:	4b70      	ldr	r3, [pc, #448]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d03e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aac:	d022      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ab2:	d81b      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004abe:	e015      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fd3b 	bl	8005544 <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ad4:	e00f      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ada:	3328      	adds	r3, #40	@ 0x28
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fde2 	bl	80056a8 <RCCEx_PLL3_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aea:	e004      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afe:	4b4b      	ldr	r3, [pc, #300]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b0e:	4a47      	ldr	r2, [pc, #284]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d03b      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b46:	d01f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004b48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b4c:	d818      	bhi.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b58:	d007      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004b5a:	e011      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4b33      	ldr	r3, [pc, #204]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	4a32      	ldr	r2, [pc, #200]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b68:	e00f      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b6e:	3328      	adds	r3, #40	@ 0x28
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fd98 	bl	80056a8 <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b92:	4b26      	ldr	r3, [pc, #152]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba2:	4a22      	ldr	r2, [pc, #136]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ba8:	e003      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004bbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	d034      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bdc:	d007      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004bde:	e011      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be0:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	4a11      	ldr	r2, [pc, #68]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bec:	e00e      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fca4 	bl	8005544 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10d      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c14:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c22:	4a02      	ldr	r2, [pc, #8]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004c2a:	bf00      	nop
 8004c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c46:	2300      	movs	r3, #0
 8004c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d00c      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c58:	3328      	adds	r3, #40	@ 0x28
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fd23 	bl	80056a8 <RCCEx_PLL3_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d038      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c96:	d018      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c9c:	d811      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca2:	d014      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca8:	d80b      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d011      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4bc3      	ldr	r3, [pc, #780]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	4ac2      	ldr	r2, [pc, #776]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cdc:	4bb9      	ldr	r3, [pc, #740]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cec:	4ab5      	ldr	r2, [pc, #724]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d18:	4baa      	ldr	r3, [pc, #680]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d26:	4aa7      	ldr	r2, [pc, #668]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d48:	4b9e      	ldr	r3, [pc, #632]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	4a9b      	ldr	r2, [pc, #620]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d72:	460b      	mov	r3, r1
 8004d74:	4313      	orrs	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d78:	4b92      	ldr	r3, [pc, #584]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d86:	4a8f      	ldr	r2, [pc, #572]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004da8:	4b86      	ldr	r3, [pc, #536]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	4a85      	ldr	r2, [pc, #532]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004db2:	6113      	str	r3, [r2, #16]
 8004db4:	4b83      	ldr	r3, [pc, #524]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004db6:	6919      	ldr	r1, [r3, #16]
 8004db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004dc0:	4a80      	ldr	r2, [pc, #512]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4313      	orrs	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004de2:	4b78      	ldr	r3, [pc, #480]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	4a74      	ldr	r2, [pc, #464]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004df2:	430b      	orrs	r3, r1
 8004df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e04:	2300      	movs	r3, #0
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e12:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e22:	4a68      	ldr	r2, [pc, #416]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	2100      	movs	r1, #0
 8004e32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d011      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e48:	3308      	adds	r3, #8
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fb79 	bl	8005544 <RCCEx_PLL2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	2100      	movs	r1, #0
 8004e72:	6239      	str	r1, [r7, #32]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d011      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e88:	3308      	adds	r3, #8
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fb59 	bl	8005544 <RCCEx_PLL2_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	61b9      	str	r1, [r7, #24]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d011      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec8:	3308      	adds	r3, #8
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fb39 	bl	8005544 <RCCEx_PLL2_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ee4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6139      	str	r1, [r7, #16]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d011      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f08:	3328      	adds	r3, #40	@ 0x28
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fbcb 	bl	80056a8 <RCCEx_PLL3_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004f18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	2100      	movs	r1, #0
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	d011      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f48:	3328      	adds	r3, #40	@ 0x28
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fbab 	bl	80056a8 <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	2100      	movs	r1, #0
 8004f72:	6039      	str	r1, [r7, #0]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	d011      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f88:	3328      	adds	r3, #40	@ 0x28
 8004f8a:	2102      	movs	r1, #2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fb8b 	bl	80056a8 <RCCEx_PLL3_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004fa8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400

08004fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004fcc:	f7fe fde2 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4904      	ldr	r1, [pc, #16]	@ (8004ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	0800aeb8 	.word	0x0800aeb8

08004ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b089      	sub	sp, #36	@ 0x24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005006:	4b9f      	ldr	r3, [pc, #636]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	0b1b      	lsrs	r3, r3, #12
 800500c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005012:	4b9c      	ldr	r3, [pc, #624]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800501e:	4b99      	ldr	r3, [pc, #612]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005022:	08db      	lsrs	r3, r3, #3
 8005024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8111 	beq.w	8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b02      	cmp	r3, #2
 8005046:	f000 8083 	beq.w	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b02      	cmp	r3, #2
 800504e:	f200 80a1 	bhi.w	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d056      	beq.n	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800505e:	e099      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005060:	4b88      	ldr	r3, [pc, #544]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02d      	beq.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800506c:	4b85      	ldr	r3, [pc, #532]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	08db      	lsrs	r3, r3, #3
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	4a84      	ldr	r2, [pc, #528]	@ (8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
 800507c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005096:	4b7b      	ldr	r3, [pc, #492]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050c6:	e087      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510a:	e065      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b59      	ldr	r3, [pc, #356]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514e:	e043      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b48      	ldr	r3, [pc, #288]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005192:	e021      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b37      	ldr	r3, [pc, #220]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	0a5b      	lsrs	r3, r3, #9
 80051de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fe:	ee17 2a90 	vmov	r2, s15
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005206:	4b1f      	ldr	r3, [pc, #124]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	0c1b      	lsrs	r3, r3, #16
 800520c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800521c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005220:	edd7 6a07 	vldr	s13, [r7, #28]
 8005224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522c:	ee17 2a90 	vmov	r2, s15
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005234:	4b13      	ldr	r3, [pc, #76]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	0e1b      	lsrs	r3, r3, #24
 800523a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800524a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	ee17 2a90 	vmov	r2, s15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005262:	e008      	b.n	8005276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
}
 8005276:	bf00      	nop
 8005278:	3724      	adds	r7, #36	@ 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
 8005288:	03d09000 	.word	0x03d09000
 800528c:	46000000 	.word	0x46000000
 8005290:	4c742400 	.word	0x4c742400
 8005294:	4a742400 	.word	0x4a742400
 8005298:	4af42400 	.word	0x4af42400

0800529c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	@ 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a4:	4ba1      	ldr	r3, [pc, #644]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052ae:	4b9f      	ldr	r3, [pc, #636]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	0d1b      	lsrs	r3, r3, #20
 80052b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ba:	4b9c      	ldr	r3, [pc, #624]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052c6:	4b99      	ldr	r3, [pc, #612]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8111 	beq.w	800550c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f000 8083 	beq.w	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f200 80a1 	bhi.w	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d056      	beq.n	80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005306:	e099      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005308:	4b88      	ldr	r3, [pc, #544]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02d      	beq.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005314:	4b85      	ldr	r3, [pc, #532]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	4a84      	ldr	r2, [pc, #528]	@ (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b7b      	ldr	r3, [pc, #492]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800536e:	e087      	b.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b6a      	ldr	r3, [pc, #424]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053b2:	e065      	b.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800553c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b59      	ldr	r3, [pc, #356]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f6:	e043      	b.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b48      	ldr	r3, [pc, #288]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543a:	e021      	b.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800553c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b37      	ldr	r3, [pc, #220]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005462:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005480:	4b2a      	ldr	r3, [pc, #168]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	0a5b      	lsrs	r3, r3, #9
 8005486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800549a:	edd7 6a07 	vldr	s13, [r7, #28]
 800549e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a6:	ee17 2a90 	vmov	r2, s15
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054ae:	4b1f      	ldr	r3, [pc, #124]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d4:	ee17 2a90 	vmov	r2, s15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054dc:	4b13      	ldr	r3, [pc, #76]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	0e1b      	lsrs	r3, r3, #24
 80054e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005502:	ee17 2a90 	vmov	r2, s15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800550a:	e008      	b.n	800551e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	3724      	adds	r7, #36	@ 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	03d09000 	.word	0x03d09000
 8005534:	46000000 	.word	0x46000000
 8005538:	4c742400 	.word	0x4c742400
 800553c:	4a742400 	.word	0x4a742400
 8005540:	4af42400 	.word	0x4af42400

08005544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005552:	4b53      	ldr	r3, [pc, #332]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d101      	bne.n	8005562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e099      	b.n	8005696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005562:	4b4f      	ldr	r3, [pc, #316]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4e      	ldr	r2, [pc, #312]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005568:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800556c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556e:	f7fd f877 	bl	8002660 <HAL_GetTick>
 8005572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005574:	e008      	b.n	8005588 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005576:	f7fd f873 	bl	8002660 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e086      	b.n	8005696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005588:	4b45      	ldr	r3, [pc, #276]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005594:	4b42      	ldr	r3, [pc, #264]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	031b      	lsls	r3, r3, #12
 80055a2:	493f      	ldr	r1, [pc, #252]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	025b      	lsls	r3, r3, #9
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055d8:	4931      	ldr	r1, [pc, #196]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055de:	4b30      	ldr	r3, [pc, #192]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	492d      	ldr	r1, [pc, #180]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055f0:	4b2b      	ldr	r3, [pc, #172]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	f023 0220 	bic.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	4928      	ldr	r1, [pc, #160]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005602:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	4a26      	ldr	r2, [pc, #152]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005608:	f023 0310 	bic.w	r3, r3, #16
 800560c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005612:	4b24      	ldr	r3, [pc, #144]	@ (80056a4 <RCCEx_PLL2_Config+0x160>)
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	69d2      	ldr	r2, [r2, #28]
 800561a:	00d2      	lsls	r2, r2, #3
 800561c:	4920      	ldr	r1, [pc, #128]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005622:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	4a1e      	ldr	r2, [pc, #120]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005628:	f043 0310 	orr.w	r3, r3, #16
 800562c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005634:	4b1a      	ldr	r3, [pc, #104]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800563a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005640:	e00f      	b.n	8005662 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d106      	bne.n	8005656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005648:	4b15      	ldr	r3, [pc, #84]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a14      	ldr	r2, [pc, #80]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800564e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005654:	e005      	b.n	8005662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005656:	4b12      	ldr	r3, [pc, #72]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	4a11      	ldr	r2, [pc, #68]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800565c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005662:	4b0f      	ldr	r3, [pc, #60]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a0e      	ldr	r2, [pc, #56]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 8005668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800566c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566e:	f7fc fff7 	bl	8002660 <HAL_GetTick>
 8005672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005674:	e008      	b.n	8005688 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005676:	f7fc fff3 	bl	8002660 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e006      	b.n	8005696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <RCCEx_PLL2_Config+0x15c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
 80056a4:	ffff0007 	.word	0xffff0007

080056a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056b6:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d101      	bne.n	80056c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e099      	b.n	80057fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a4e      	ldr	r2, [pc, #312]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d2:	f7fc ffc5 	bl	8002660 <HAL_GetTick>
 80056d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056d8:	e008      	b.n	80056ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056da:	f7fc ffc1 	bl	8002660 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e086      	b.n	80057fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056ec:	4b45      	ldr	r3, [pc, #276]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f0      	bne.n	80056da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056f8:	4b42      	ldr	r3, [pc, #264]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	051b      	lsls	r3, r3, #20
 8005706:	493f      	ldr	r1, [pc, #252]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	628b      	str	r3, [r1, #40]	@ 0x28
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	3b01      	subs	r3, #1
 8005712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	3b01      	subs	r3, #1
 800571c:	025b      	lsls	r3, r3, #9
 800571e:	b29b      	uxth	r3, r3
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	3b01      	subs	r3, #1
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800573c:	4931      	ldr	r1, [pc, #196]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005742:	4b30      	ldr	r3, [pc, #192]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	492d      	ldr	r1, [pc, #180]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005754:	4b2b      	ldr	r3, [pc, #172]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	4928      	ldr	r1, [pc, #160]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005766:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	4a26      	ldr	r2, [pc, #152]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 800576c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005772:	4b24      	ldr	r3, [pc, #144]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005776:	4b24      	ldr	r3, [pc, #144]	@ (8005808 <RCCEx_PLL3_Config+0x160>)
 8005778:	4013      	ands	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	69d2      	ldr	r2, [r2, #28]
 800577e:	00d2      	lsls	r2, r2, #3
 8005780:	4920      	ldr	r1, [pc, #128]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005786:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a1e      	ldr	r2, [pc, #120]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 800578c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005798:	4b1a      	ldr	r3, [pc, #104]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a19      	ldr	r2, [pc, #100]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 800579e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057a4:	e00f      	b.n	80057c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d106      	bne.n	80057ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057ac:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	4a14      	ldr	r2, [pc, #80]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057b8:	e005      	b.n	80057c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	4a11      	ldr	r2, [pc, #68]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d2:	f7fc ff45 	bl	8002660 <HAL_GetTick>
 80057d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057d8:	e008      	b.n	80057ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057da:	f7fc ff41 	bl	8002660 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e006      	b.n	80057fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <RCCEx_PLL3_Config+0x15c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
 8005808:	ffff0007 	.word	0xffff0007

0800580c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d074      	beq.n	8005908 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fcb8 	bl	80021a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d053      	beq.n	80058f6 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	22ca      	movs	r2, #202	@ 0xca
 8005854:	625a      	str	r2, [r3, #36]	@ 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2253      	movs	r2, #83	@ 0x53
 800585c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9a4 	bl	8005bac <RTC_EnterInitMode>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d124      	bne.n	80058b8 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6999      	ldr	r1, [r3, #24]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <HAL_RTC_Init+0x108>)
 800587a:	400b      	ands	r3, r1
 800587c:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6999      	ldr	r1, [r3, #24]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	0419      	lsls	r1, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9b2 	bl	8005c18 <RTC_ExitInitMode>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 80058cc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6999      	ldr	r1, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	22ff      	movs	r2, #255	@ 0xff
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80058f4:	e001      	b.n	80058fa <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  /* return status */
  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	fb8fffbf 	.word	0xfb8fffbf

08005918 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_RTC_SetTime+0x1a>
 800592e:	2302      	movs	r3, #2
 8005930:	e089      	b.n	8005a46 <HAL_RTC_SetTime+0x12e>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	22ca      	movs	r2, #202	@ 0xca
 8005948:	625a      	str	r2, [r3, #36]	@ 0x24
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2253      	movs	r2, #83	@ 0x53
 8005950:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f92a 	bl	8005bac <RTC_EnterInitMode>
 8005958:	4603      	mov	r3, r0
 800595a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800595c:	7cfb      	ldrb	r3, [r7, #19]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d161      	bne.n	8005a26 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d126      	bne.n	80059b6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2200      	movs	r2, #0
 800597a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f987 	bl	8005c94 <RTC_ByteToBcd2>
 8005986:	4603      	mov	r3, r0
 8005988:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f980 	bl	8005c94 <RTC_ByteToBcd2>
 8005994:	4603      	mov	r3, r0
 8005996:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005998:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	789b      	ldrb	r3, [r3, #2]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f978 	bl	8005c94 <RTC_ByteToBcd2>
 80059a4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059a6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	78db      	ldrb	r3, [r3, #3]
 80059ae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e018      	b.n	80059e8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2200      	movs	r2, #0
 80059c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	4b18      	ldr	r3, [pc, #96]	@ (8005a50 <HAL_RTC_SetTime+0x138>)
 80059f0:	400b      	ands	r3, r1
 80059f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a02:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6999      	ldr	r1, [r3, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f8fb 	bl	8005c18 <RTC_ExitInitMode>
 8005a22:	4603      	mov	r3, r0
 8005a24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	22ff      	movs	r2, #255	@ 0xff
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d103      	bne.n	8005a3c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	007f7f7f 	.word	0x007f7f7f

08005a54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_RTC_SetDate+0x1a>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e073      	b.n	8005b56 <HAL_RTC_SetDate+0x102>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10e      	bne.n	8005aa2 <HAL_RTC_SetDate+0x4e>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	f023 0310 	bic.w	r3, r3, #16
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	330a      	adds	r3, #10
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11c      	bne.n	8005ae2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	78db      	ldrb	r3, [r3, #3]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 f8f1 	bl	8005c94 <RTC_ByteToBcd2>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f8ea 	bl	8005c94 <RTC_ByteToBcd2>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ac4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	789b      	ldrb	r3, [r3, #2]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f8e2 	bl	8005c94 <RTC_ByteToBcd2>
 8005ad0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ad2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	e00e      	b.n	8005b00 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	78db      	ldrb	r3, [r3, #3]
 8005ae6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005aee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005af4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	22ca      	movs	r2, #202	@ 0xca
 8005b06:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2253      	movs	r2, #83	@ 0x53
 8005b0e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f84b 	bl	8005bac <RTC_EnterInitMode>
 8005b16:	4603      	mov	r3, r0
 8005b18:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b1a:	7cfb      	ldrb	r3, [r7, #19]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	6979      	ldr	r1, [r7, #20]
 8005b26:	4b0e      	ldr	r3, [pc, #56]	@ (8005b60 <HAL_RTC_SetDate+0x10c>)
 8005b28:	400b      	ands	r3, r1
 8005b2a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f873 	bl	8005c18 <RTC_ExitInitMode>
 8005b32:	4603      	mov	r3, r0
 8005b34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	22ff      	movs	r2, #255	@ 0xff
 8005b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005b3e:	7cfb      	ldrb	r3, [r7, #19]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005b54:	7cfb      	ldrb	r3, [r7, #19]


}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd90      	pop	{r4, r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	00ffff3f 	.word	0x00ffff3f

08005b64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba8 <HAL_RTC_WaitForSynchro+0x44>)
 8005b72:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005b74:	f7fc fd74 	bl	8002660 <HAL_GetTick>
 8005b78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005b7a:	e009      	b.n	8005b90 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b7c:	f7fc fd70 	bl	8002660 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b8a:	d901      	bls.n	8005b90 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e007      	b.n	8005ba0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0ee      	beq.n	8005b7c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	0001005f 	.word	0x0001005f

08005bac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d123      	bne.n	8005c0e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bd4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005bd6:	f7fc fd43 	bl	8002660 <HAL_GetTick>
 8005bda:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bdc:	e00d      	b.n	8005bfa <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005bde:	f7fc fd3f 	bl	8002660 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bec:	d905      	bls.n	8005bfa <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <RTC_EnterInitMode+0x62>
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d1e7      	bne.n	8005bde <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c24:	4b1a      	ldr	r3, [pc, #104]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a19      	ldr	r2, [pc, #100]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c2e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c30:	4b17      	ldr	r3, [pc, #92]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10c      	bne.n	8005c56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff91 	bl	8005b64 <HAL_RTC_WaitForSynchro>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01e      	beq.n	8005c86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	e017      	b.n	8005c86 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c56:	4b0e      	ldr	r3, [pc, #56]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c5c:	f023 0320 	bic.w	r3, r3, #32
 8005c60:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff ff7e 	bl	8005b64 <HAL_RTC_WaitForSynchro>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2203      	movs	r2, #3
 8005c72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c7a:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <RTC_ExitInitMode+0x78>)
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	58004000 	.word	0x58004000

08005c94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005ca6:	e005      	b.n	8005cb4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	3b0a      	subs	r3, #10
 8005cb2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	2b09      	cmp	r3, #9
 8005cb8:	d8f6      	bhi.n	8005ca8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	b2db      	uxtb	r3, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e10f      	b.n	8005f06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a87      	ldr	r2, [pc, #540]	@ (8005f10 <HAL_SPI_Init+0x23c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00f      	beq.n	8005d16 <HAL_SPI_Init+0x42>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a86      	ldr	r2, [pc, #536]	@ (8005f14 <HAL_SPI_Init+0x240>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00a      	beq.n	8005d16 <HAL_SPI_Init+0x42>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a84      	ldr	r2, [pc, #528]	@ (8005f18 <HAL_SPI_Init+0x244>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d005      	beq.n	8005d16 <HAL_SPI_Init+0x42>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	d901      	bls.n	8005d16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0f7      	b.n	8005f06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fbbc 	bl	8006494 <SPI_GetPacketSize>
 8005d1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a7b      	ldr	r2, [pc, #492]	@ (8005f10 <HAL_SPI_Init+0x23c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00c      	beq.n	8005d42 <HAL_SPI_Init+0x6e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a79      	ldr	r2, [pc, #484]	@ (8005f14 <HAL_SPI_Init+0x240>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <HAL_SPI_Init+0x6e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a78      	ldr	r2, [pc, #480]	@ (8005f18 <HAL_SPI_Init+0x244>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Init+0x6e>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d811      	bhi.n	8005d66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d46:	4a72      	ldr	r2, [pc, #456]	@ (8005f10 <HAL_SPI_Init+0x23c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a70      	ldr	r2, [pc, #448]	@ (8005f14 <HAL_SPI_Init+0x240>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_SPI_Init+0x8c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8005f18 <HAL_SPI_Init+0x244>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d104      	bne.n	8005d6a <HAL_SPI_Init+0x96>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d901      	bls.n	8005d6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0cd      	b.n	8005f06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fc fa44 	bl	800220c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005da6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005db0:	d119      	bne.n	8005de6 <HAL_SPI_Init+0x112>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dba:	d103      	bne.n	8005dc4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10c      	bne.n	8005de6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dd4:	d107      	bne.n	8005de6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005de4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <HAL_SPI_Init+0x13e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b06      	cmp	r3, #6
 8005df8:	d90b      	bls.n	8005e12 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e007      	b.n	8005e22 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e34:	ea42 0103 	orr.w	r1, r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e82:	ea42 0103 	orr.w	r1, r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d113      	bne.n	8005ec2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ec0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40013000 	.word	0x40013000
 8005f14:	40003800 	.word	0x40003800
 8005f18:	40003c00 	.word	0x40003c00

08005f1c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3320      	adds	r3, #32
 8005f32:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f34:	f7fc fb94 	bl	8002660 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d001      	beq.n	8005f4a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
 8005f48:	e1d1      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_Transmit+0x3a>
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e1c9      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_SPI_Transmit+0x4c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e1c2      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005fc0:	d108      	bne.n	8005fd4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e009      	b.n	8005fe8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fe6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	4b96      	ldr	r3, [pc, #600]	@ (8006248 <HAL_SPI_Transmit+0x32c>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	88f9      	ldrh	r1, [r7, #6]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006014:	d107      	bne.n	8006026 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b0f      	cmp	r3, #15
 800602c:	d947      	bls.n	80060be <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800602e:	e03f      	b.n	80060b0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d114      	bne.n	8006068 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006066:	e023      	b.n	80060b0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006068:	f7fc fafa 	bl	8002660 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d803      	bhi.n	8006080 <HAL_SPI_Transmit+0x164>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d102      	bne.n	8006086 <HAL_SPI_Transmit+0x16a>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d114      	bne.n	80060b0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f936 	bl	80062f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006092:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e11e      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1b9      	bne.n	8006030 <HAL_SPI_Transmit+0x114>
 80060bc:	e0f1      	b.n	80062a2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2b07      	cmp	r3, #7
 80060c4:	f240 80e6 	bls.w	8006294 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80060c8:	e05d      	b.n	8006186 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d132      	bne.n	800613e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d918      	bls.n	8006116 <HAL_SPI_Transmit+0x1fa>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d014      	beq.n	8006116 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fc:	1d1a      	adds	r2, r3, #4
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b02      	subs	r3, #2
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006114:	e037      	b.n	8006186 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800613c:	e023      	b.n	8006186 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613e:	f7fc fa8f 	bl	8002660 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d803      	bhi.n	8006156 <HAL_SPI_Transmit+0x23a>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d102      	bne.n	800615c <HAL_SPI_Transmit+0x240>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d114      	bne.n	8006186 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f8cb 	bl	80062f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006168:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e0b3      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d19b      	bne.n	80060ca <HAL_SPI_Transmit+0x1ae>
 8006192:	e086      	b.n	80062a2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d154      	bne.n	800624c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d918      	bls.n	80061e0 <HAL_SPI_Transmit+0x2c4>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	2b40      	cmp	r3, #64	@ 0x40
 80061b4:	d914      	bls.n	80061e0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b04      	subs	r3, #4
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061de:	e059      	b.n	8006294 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d917      	bls.n	800621c <HAL_SPI_Transmit+0x300>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b02      	subs	r3, #2
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800621a:	e03b      	b.n	8006294 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3320      	adds	r3, #32
 8006226:	7812      	ldrb	r2, [r2, #0]
 8006228:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006246:	e025      	b.n	8006294 <HAL_SPI_Transmit+0x378>
 8006248:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624c:	f7fc fa08 	bl	8002660 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d803      	bhi.n	8006264 <HAL_SPI_Transmit+0x348>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d102      	bne.n	800626a <HAL_SPI_Transmit+0x34e>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d114      	bne.n	8006294 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f844 	bl	80062f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006276:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e02c      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	f47f af79 	bne.w	8006194 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2108      	movs	r1, #8
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f8c3 	bl	8006438 <SPI_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f815 	bl	80062f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0208 	orr.w	r2, r2, #8
 8006316:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0210 	orr.w	r2, r2, #16
 8006326:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6919      	ldr	r1, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b3c      	ldr	r3, [pc, #240]	@ (8006434 <SPI_CloseTransfer+0x13c>)
 8006344:	400b      	ands	r3, r1
 8006346:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006356:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b04      	cmp	r3, #4
 8006362:	d014      	beq.n	800638e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00f      	beq.n	800638e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006374:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0220 	orr.w	r2, r2, #32
 800638c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d014      	beq.n	80063c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00f      	beq.n	80063c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063aa:	f043 0204 	orr.w	r2, r3, #4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00f      	beq.n	80063ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d4:	f043 0201 	orr.w	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00f      	beq.n	8006418 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063fe:	f043 0208 	orr.w	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006416:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	fffffc90 	.word	0xfffffc90

08006438 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006448:	e010      	b.n	800646c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800644a:	f7fc f909 	bl	8002660 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d803      	bhi.n	8006462 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d102      	bne.n	8006468 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e00f      	b.n	800648c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	429a      	cmp	r2, r3
 8006488:	d0df      	beq.n	800644a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	3307      	adds	r3, #7
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e042      	b.n	8006562 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb fef4 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2224      	movs	r2, #36	@ 0x24
 80064f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fe95 	bl	8007244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f826 	bl	800656c <UART_SetConfig>
 8006520:	4603      	mov	r3, r0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e01b      	b.n	8006562 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006538:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006548:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 ff14 	bl	8007388 <UART_CheckIdleState>
 8006560:	4603      	mov	r3, r0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800656c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006570:	b092      	sub	sp, #72	@ 0x48
 8006572:	af00      	add	r7, sp, #0
 8006574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	431a      	orrs	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	431a      	orrs	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	4313      	orrs	r3, r2
 8006592:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4bbe      	ldr	r3, [pc, #760]	@ (8006894 <UART_SetConfig+0x328>)
 800659c:	4013      	ands	r3, r2
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4ab3      	ldr	r2, [pc, #716]	@ (8006898 <UART_SetConfig+0x32c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d4:	4313      	orrs	r3, r2
 80065d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	4baf      	ldr	r3, [pc, #700]	@ (800689c <UART_SetConfig+0x330>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	f023 010f 	bic.w	r1, r3, #15
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4aa6      	ldr	r2, [pc, #664]	@ (80068a0 <UART_SetConfig+0x334>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d177      	bne.n	80066fc <UART_SetConfig+0x190>
 800660c:	4ba5      	ldr	r3, [pc, #660]	@ (80068a4 <UART_SetConfig+0x338>)
 800660e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006614:	2b28      	cmp	r3, #40	@ 0x28
 8006616:	d86d      	bhi.n	80066f4 <UART_SetConfig+0x188>
 8006618:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <UART_SetConfig+0xb4>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	080066c5 	.word	0x080066c5
 8006624:	080066f5 	.word	0x080066f5
 8006628:	080066f5 	.word	0x080066f5
 800662c:	080066f5 	.word	0x080066f5
 8006630:	080066f5 	.word	0x080066f5
 8006634:	080066f5 	.word	0x080066f5
 8006638:	080066f5 	.word	0x080066f5
 800663c:	080066f5 	.word	0x080066f5
 8006640:	080066cd 	.word	0x080066cd
 8006644:	080066f5 	.word	0x080066f5
 8006648:	080066f5 	.word	0x080066f5
 800664c:	080066f5 	.word	0x080066f5
 8006650:	080066f5 	.word	0x080066f5
 8006654:	080066f5 	.word	0x080066f5
 8006658:	080066f5 	.word	0x080066f5
 800665c:	080066f5 	.word	0x080066f5
 8006660:	080066d5 	.word	0x080066d5
 8006664:	080066f5 	.word	0x080066f5
 8006668:	080066f5 	.word	0x080066f5
 800666c:	080066f5 	.word	0x080066f5
 8006670:	080066f5 	.word	0x080066f5
 8006674:	080066f5 	.word	0x080066f5
 8006678:	080066f5 	.word	0x080066f5
 800667c:	080066f5 	.word	0x080066f5
 8006680:	080066dd 	.word	0x080066dd
 8006684:	080066f5 	.word	0x080066f5
 8006688:	080066f5 	.word	0x080066f5
 800668c:	080066f5 	.word	0x080066f5
 8006690:	080066f5 	.word	0x080066f5
 8006694:	080066f5 	.word	0x080066f5
 8006698:	080066f5 	.word	0x080066f5
 800669c:	080066f5 	.word	0x080066f5
 80066a0:	080066e5 	.word	0x080066e5
 80066a4:	080066f5 	.word	0x080066f5
 80066a8:	080066f5 	.word	0x080066f5
 80066ac:	080066f5 	.word	0x080066f5
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	080066f5 	.word	0x080066f5
 80066b8:	080066f5 	.word	0x080066f5
 80066bc:	080066f5 	.word	0x080066f5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e326      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e322      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e31e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e31a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066e4:	2320      	movs	r3, #32
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e316      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066ec:	2340      	movs	r3, #64	@ 0x40
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e312      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e30e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a69      	ldr	r2, [pc, #420]	@ (80068a8 <UART_SetConfig+0x33c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d130      	bne.n	8006768 <UART_SetConfig+0x1fc>
 8006706:	4b67      	ldr	r3, [pc, #412]	@ (80068a4 <UART_SetConfig+0x338>)
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b05      	cmp	r3, #5
 8006710:	d826      	bhi.n	8006760 <UART_SetConfig+0x1f4>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <UART_SetConfig+0x1ac>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	08006731 	.word	0x08006731
 800671c:	08006739 	.word	0x08006739
 8006720:	08006741 	.word	0x08006741
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e2f0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e2ec      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e2e8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e2e4      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006750:	2320      	movs	r3, #32
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e2e0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006758:	2340      	movs	r3, #64	@ 0x40
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e2dc      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006760:	2380      	movs	r3, #128	@ 0x80
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e2d8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a4f      	ldr	r2, [pc, #316]	@ (80068ac <UART_SetConfig+0x340>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d130      	bne.n	80067d4 <UART_SetConfig+0x268>
 8006772:	4b4c      	ldr	r3, [pc, #304]	@ (80068a4 <UART_SetConfig+0x338>)
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b05      	cmp	r3, #5
 800677c:	d826      	bhi.n	80067cc <UART_SetConfig+0x260>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <UART_SetConfig+0x218>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	0800679d 	.word	0x0800679d
 8006788:	080067a5 	.word	0x080067a5
 800678c:	080067ad 	.word	0x080067ad
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e2ba      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067a4:	2304      	movs	r3, #4
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e2b6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067ac:	2308      	movs	r3, #8
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e2b2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067b4:	2310      	movs	r3, #16
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e2ae      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067bc:	2320      	movs	r3, #32
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c2:	e2aa      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067c4:	2340      	movs	r3, #64	@ 0x40
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e2a6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067cc:	2380      	movs	r3, #128	@ 0x80
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e2a2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a35      	ldr	r2, [pc, #212]	@ (80068b0 <UART_SetConfig+0x344>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d130      	bne.n	8006840 <UART_SetConfig+0x2d4>
 80067de:	4b31      	ldr	r3, [pc, #196]	@ (80068a4 <UART_SetConfig+0x338>)
 80067e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	d826      	bhi.n	8006838 <UART_SetConfig+0x2cc>
 80067ea:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x284>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006829 	.word	0x08006829
 8006804:	08006831 	.word	0x08006831
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e284      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006816:	e280      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681e:	e27c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006826:	e278      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006828:	2320      	movs	r3, #32
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682e:	e274      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006830:	2340      	movs	r3, #64	@ 0x40
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e270      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683e:	e26c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <UART_SetConfig+0x348>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d142      	bne.n	80068d0 <UART_SetConfig+0x364>
 800684a:	4b16      	ldr	r3, [pc, #88]	@ (80068a4 <UART_SetConfig+0x338>)
 800684c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b05      	cmp	r3, #5
 8006854:	d838      	bhi.n	80068c8 <UART_SetConfig+0x35c>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <UART_SetConfig+0x2f0>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006875 	.word	0x08006875
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006885 	.word	0x08006885
 8006868:	0800688d 	.word	0x0800688d
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068c1 	.word	0x080068c1
 8006874:	2300      	movs	r3, #0
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e24e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e24a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688a:	e246      	b.n	8006d1a <UART_SetConfig+0x7ae>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006892:	e242      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006894:	cfff69f3 	.word	0xcfff69f3
 8006898:	58000c00 	.word	0x58000c00
 800689c:	11fff4ff 	.word	0x11fff4ff
 80068a0:	40011000 	.word	0x40011000
 80068a4:	58024400 	.word	0x58024400
 80068a8:	40004400 	.word	0x40004400
 80068ac:	40004800 	.word	0x40004800
 80068b0:	40004c00 	.word	0x40004c00
 80068b4:	40005000 	.word	0x40005000
 80068b8:	2320      	movs	r3, #32
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e22c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80068c0:	2340      	movs	r3, #64	@ 0x40
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e228      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80068c8:	2380      	movs	r3, #128	@ 0x80
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e224      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4ab1      	ldr	r2, [pc, #708]	@ (8006b9c <UART_SetConfig+0x630>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d176      	bne.n	80069c8 <UART_SetConfig+0x45c>
 80068da:	4bb1      	ldr	r3, [pc, #708]	@ (8006ba0 <UART_SetConfig+0x634>)
 80068dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068e2:	2b28      	cmp	r3, #40	@ 0x28
 80068e4:	d86c      	bhi.n	80069c0 <UART_SetConfig+0x454>
 80068e6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0x380>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006991 	.word	0x08006991
 80068f0:	080069c1 	.word	0x080069c1
 80068f4:	080069c1 	.word	0x080069c1
 80068f8:	080069c1 	.word	0x080069c1
 80068fc:	080069c1 	.word	0x080069c1
 8006900:	080069c1 	.word	0x080069c1
 8006904:	080069c1 	.word	0x080069c1
 8006908:	080069c1 	.word	0x080069c1
 800690c:	08006999 	.word	0x08006999
 8006910:	080069c1 	.word	0x080069c1
 8006914:	080069c1 	.word	0x080069c1
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069c1 	.word	0x080069c1
 8006920:	080069c1 	.word	0x080069c1
 8006924:	080069c1 	.word	0x080069c1
 8006928:	080069c1 	.word	0x080069c1
 800692c:	080069a1 	.word	0x080069a1
 8006930:	080069c1 	.word	0x080069c1
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069c1 	.word	0x080069c1
 800693c:	080069c1 	.word	0x080069c1
 8006940:	080069c1 	.word	0x080069c1
 8006944:	080069c1 	.word	0x080069c1
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069a9 	.word	0x080069a9
 8006950:	080069c1 	.word	0x080069c1
 8006954:	080069c1 	.word	0x080069c1
 8006958:	080069c1 	.word	0x080069c1
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069c1 	.word	0x080069c1
 8006964:	080069c1 	.word	0x080069c1
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069b1 	.word	0x080069b1
 8006970:	080069c1 	.word	0x080069c1
 8006974:	080069c1 	.word	0x080069c1
 8006978:	080069c1 	.word	0x080069c1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069c1 	.word	0x080069c1
 8006984:	080069c1 	.word	0x080069c1
 8006988:	080069c1 	.word	0x080069c1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e1c0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006998:	2304      	movs	r3, #4
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e1bc      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e1b8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069a8:	2310      	movs	r3, #16
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e1b4      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069b0:	2320      	movs	r3, #32
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e1b0      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069b8:	2340      	movs	r3, #64	@ 0x40
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e1ac      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e1a8      	b.n	8006d1a <UART_SetConfig+0x7ae>
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a75      	ldr	r2, [pc, #468]	@ (8006ba4 <UART_SetConfig+0x638>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d130      	bne.n	8006a34 <UART_SetConfig+0x4c8>
 80069d2:	4b73      	ldr	r3, [pc, #460]	@ (8006ba0 <UART_SetConfig+0x634>)
 80069d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b05      	cmp	r3, #5
 80069dc:	d826      	bhi.n	8006a2c <UART_SetConfig+0x4c0>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <UART_SetConfig+0x478>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069fd 	.word	0x080069fd
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	08006a0d 	.word	0x08006a0d
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e18a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e186      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e182      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e17e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e17a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a24:	2340      	movs	r3, #64	@ 0x40
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e176      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a2c:	2380      	movs	r3, #128	@ 0x80
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e172      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a5b      	ldr	r2, [pc, #364]	@ (8006ba8 <UART_SetConfig+0x63c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d130      	bne.n	8006aa0 <UART_SetConfig+0x534>
 8006a3e:	4b58      	ldr	r3, [pc, #352]	@ (8006ba0 <UART_SetConfig+0x634>)
 8006a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b05      	cmp	r3, #5
 8006a48:	d826      	bhi.n	8006a98 <UART_SetConfig+0x52c>
 8006a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0x4e4>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a69 	.word	0x08006a69
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	08006a79 	.word	0x08006a79
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a91 	.word	0x08006a91
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e154      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e150      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e14c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a86:	e148      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a88:	2320      	movs	r3, #32
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e144      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a90:	2340      	movs	r3, #64	@ 0x40
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e140      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006a98:	2380      	movs	r3, #128	@ 0x80
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e13c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a41      	ldr	r2, [pc, #260]	@ (8006bac <UART_SetConfig+0x640>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f040 8082 	bne.w	8006bb0 <UART_SetConfig+0x644>
 8006aac:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba0 <UART_SetConfig+0x634>)
 8006aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ab4:	2b28      	cmp	r3, #40	@ 0x28
 8006ab6:	d86d      	bhi.n	8006b94 <UART_SetConfig+0x628>
 8006ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x554>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006b65 	.word	0x08006b65
 8006ac4:	08006b95 	.word	0x08006b95
 8006ac8:	08006b95 	.word	0x08006b95
 8006acc:	08006b95 	.word	0x08006b95
 8006ad0:	08006b95 	.word	0x08006b95
 8006ad4:	08006b95 	.word	0x08006b95
 8006ad8:	08006b95 	.word	0x08006b95
 8006adc:	08006b95 	.word	0x08006b95
 8006ae0:	08006b6d 	.word	0x08006b6d
 8006ae4:	08006b95 	.word	0x08006b95
 8006ae8:	08006b95 	.word	0x08006b95
 8006aec:	08006b95 	.word	0x08006b95
 8006af0:	08006b95 	.word	0x08006b95
 8006af4:	08006b95 	.word	0x08006b95
 8006af8:	08006b95 	.word	0x08006b95
 8006afc:	08006b95 	.word	0x08006b95
 8006b00:	08006b75 	.word	0x08006b75
 8006b04:	08006b95 	.word	0x08006b95
 8006b08:	08006b95 	.word	0x08006b95
 8006b0c:	08006b95 	.word	0x08006b95
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006b95 	.word	0x08006b95
 8006b18:	08006b95 	.word	0x08006b95
 8006b1c:	08006b95 	.word	0x08006b95
 8006b20:	08006b7d 	.word	0x08006b7d
 8006b24:	08006b95 	.word	0x08006b95
 8006b28:	08006b95 	.word	0x08006b95
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006b95 	.word	0x08006b95
 8006b38:	08006b95 	.word	0x08006b95
 8006b3c:	08006b95 	.word	0x08006b95
 8006b40:	08006b85 	.word	0x08006b85
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006b95 	.word	0x08006b95
 8006b4c:	08006b95 	.word	0x08006b95
 8006b50:	08006b95 	.word	0x08006b95
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006b95 	.word	0x08006b95
 8006b5c:	08006b95 	.word	0x08006b95
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e0d6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e0d2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e0ce      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b82:	e0ca      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b84:	2320      	movs	r3, #32
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8a:	e0c6      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b8c:	2340      	movs	r3, #64	@ 0x40
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b92:	e0c2      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9a:	e0be      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006b9c:	40011400 	.word	0x40011400
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	40007800 	.word	0x40007800
 8006ba8:	40007c00 	.word	0x40007c00
 8006bac:	40011800 	.word	0x40011800
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4aad      	ldr	r2, [pc, #692]	@ (8006e6c <UART_SetConfig+0x900>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d176      	bne.n	8006ca8 <UART_SetConfig+0x73c>
 8006bba:	4bad      	ldr	r3, [pc, #692]	@ (8006e70 <UART_SetConfig+0x904>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bc2:	2b28      	cmp	r3, #40	@ 0x28
 8006bc4:	d86c      	bhi.n	8006ca0 <UART_SetConfig+0x734>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <UART_SetConfig+0x660>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006ca1 	.word	0x08006ca1
 8006bd4:	08006ca1 	.word	0x08006ca1
 8006bd8:	08006ca1 	.word	0x08006ca1
 8006bdc:	08006ca1 	.word	0x08006ca1
 8006be0:	08006ca1 	.word	0x08006ca1
 8006be4:	08006ca1 	.word	0x08006ca1
 8006be8:	08006ca1 	.word	0x08006ca1
 8006bec:	08006c79 	.word	0x08006c79
 8006bf0:	08006ca1 	.word	0x08006ca1
 8006bf4:	08006ca1 	.word	0x08006ca1
 8006bf8:	08006ca1 	.word	0x08006ca1
 8006bfc:	08006ca1 	.word	0x08006ca1
 8006c00:	08006ca1 	.word	0x08006ca1
 8006c04:	08006ca1 	.word	0x08006ca1
 8006c08:	08006ca1 	.word	0x08006ca1
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006ca1 	.word	0x08006ca1
 8006c14:	08006ca1 	.word	0x08006ca1
 8006c18:	08006ca1 	.word	0x08006ca1
 8006c1c:	08006ca1 	.word	0x08006ca1
 8006c20:	08006ca1 	.word	0x08006ca1
 8006c24:	08006ca1 	.word	0x08006ca1
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006ca1 	.word	0x08006ca1
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c76:	e050      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e04c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e048      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e044      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e040      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006c98:	2340      	movs	r3, #64	@ 0x40
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e03c      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006ca0:	2380      	movs	r3, #128	@ 0x80
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e038      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a71      	ldr	r2, [pc, #452]	@ (8006e74 <UART_SetConfig+0x908>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d130      	bne.n	8006d14 <UART_SetConfig+0x7a8>
 8006cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <UART_SetConfig+0x904>)
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d826      	bhi.n	8006d0c <UART_SetConfig+0x7a0>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <UART_SetConfig+0x758>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006ce5 	.word	0x08006ce5
 8006ccc:	08006ced 	.word	0x08006ced
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e01a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cea:	e016      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e012      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e00e      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d02:	e00a      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006d04:	2340      	movs	r3, #64	@ 0x40
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0a:	e006      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006d0c:	2380      	movs	r3, #128	@ 0x80
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d12:	e002      	b.n	8006d1a <UART_SetConfig+0x7ae>
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a55      	ldr	r2, [pc, #340]	@ (8006e74 <UART_SetConfig+0x908>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	f040 80f8 	bne.w	8006f16 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	dc46      	bgt.n	8006dbc <UART_SetConfig+0x850>
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	db75      	blt.n	8006e1e <UART_SetConfig+0x8b2>
 8006d32:	3b02      	subs	r3, #2
 8006d34:	2b1e      	cmp	r3, #30
 8006d36:	d872      	bhi.n	8006e1e <UART_SetConfig+0x8b2>
 8006d38:	a201      	add	r2, pc, #4	@ (adr r2, 8006d40 <UART_SetConfig+0x7d4>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006dc3 	.word	0x08006dc3
 8006d44:	08006e1f 	.word	0x08006e1f
 8006d48:	08006dcb 	.word	0x08006dcb
 8006d4c:	08006e1f 	.word	0x08006e1f
 8006d50:	08006e1f 	.word	0x08006e1f
 8006d54:	08006e1f 	.word	0x08006e1f
 8006d58:	08006ddb 	.word	0x08006ddb
 8006d5c:	08006e1f 	.word	0x08006e1f
 8006d60:	08006e1f 	.word	0x08006e1f
 8006d64:	08006e1f 	.word	0x08006e1f
 8006d68:	08006e1f 	.word	0x08006e1f
 8006d6c:	08006e1f 	.word	0x08006e1f
 8006d70:	08006e1f 	.word	0x08006e1f
 8006d74:	08006e1f 	.word	0x08006e1f
 8006d78:	08006deb 	.word	0x08006deb
 8006d7c:	08006e1f 	.word	0x08006e1f
 8006d80:	08006e1f 	.word	0x08006e1f
 8006d84:	08006e1f 	.word	0x08006e1f
 8006d88:	08006e1f 	.word	0x08006e1f
 8006d8c:	08006e1f 	.word	0x08006e1f
 8006d90:	08006e1f 	.word	0x08006e1f
 8006d94:	08006e1f 	.word	0x08006e1f
 8006d98:	08006e1f 	.word	0x08006e1f
 8006d9c:	08006e1f 	.word	0x08006e1f
 8006da0:	08006e1f 	.word	0x08006e1f
 8006da4:	08006e1f 	.word	0x08006e1f
 8006da8:	08006e1f 	.word	0x08006e1f
 8006dac:	08006e1f 	.word	0x08006e1f
 8006db0:	08006e1f 	.word	0x08006e1f
 8006db4:	08006e1f 	.word	0x08006e1f
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	2b40      	cmp	r3, #64	@ 0x40
 8006dbe:	d02a      	beq.n	8006e16 <UART_SetConfig+0x8aa>
 8006dc0:	e02d      	b.n	8006e1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006dc2:	f7fe f901 	bl	8004fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dc8:	e02f      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe f910 	bl	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd8:	e027      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dda:	f107 0318 	add.w	r3, r7, #24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fa5c 	bl	800529c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de8:	e01f      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dea:	4b21      	ldr	r3, [pc, #132]	@ (8006e70 <UART_SetConfig+0x904>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006df6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e70 <UART_SetConfig+0x904>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	08db      	lsrs	r3, r3, #3
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <UART_SetConfig+0x90c>)
 8006e02:	fa22 f303 	lsr.w	r3, r2, r3
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e08:	e00f      	b.n	8006e2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e78 <UART_SetConfig+0x90c>)
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0e:	e00c      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e10:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <UART_SetConfig+0x910>)
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e14:	e009      	b.n	8006e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1c:	e005      	b.n	8006e2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 81ee 	beq.w	800720e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	4a12      	ldr	r2, [pc, #72]	@ (8006e80 <UART_SetConfig+0x914>)
 8006e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d305      	bcc.n	8006e62 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d910      	bls.n	8006e84 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e68:	e1d1      	b.n	800720e <UART_SetConfig+0xca2>
 8006e6a:	bf00      	nop
 8006e6c:	40011c00 	.word	0x40011c00
 8006e70:	58024400 	.word	0x58024400
 8006e74:	58000c00 	.word	0x58000c00
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	003d0900 	.word	0x003d0900
 8006e80:	0800aec8 	.word	0x0800aec8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	2200      	movs	r2, #0
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	60fa      	str	r2, [r7, #12]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	4ac0      	ldr	r2, [pc, #768]	@ (8007194 <UART_SetConfig+0xc28>)
 8006e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2200      	movs	r2, #0
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ea6:	f7f9 fa21 	bl	80002ec <__aeabi_uldivmod>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	020b      	lsls	r3, r1, #8
 8006ebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ec0:	0202      	lsls	r2, r0, #8
 8006ec2:	6979      	ldr	r1, [r7, #20]
 8006ec4:	6849      	ldr	r1, [r1, #4]
 8006ec6:	0849      	lsrs	r1, r1, #1
 8006ec8:	2000      	movs	r0, #0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	4605      	mov	r5, r0
 8006ece:	eb12 0804 	adds.w	r8, r2, r4
 8006ed2:	eb43 0905 	adc.w	r9, r3, r5
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	469a      	mov	sl, r3
 8006ede:	4693      	mov	fp, r2
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	465b      	mov	r3, fp
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 fa00 	bl	80002ec <__aeabi_uldivmod>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006efa:	d308      	bcc.n	8006f0e <UART_SetConfig+0x9a2>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f02:	d204      	bcs.n	8006f0e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	e17f      	b.n	800720e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f14:	e17b      	b.n	800720e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f1e:	f040 80bd 	bne.w	800709c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006f22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	dc48      	bgt.n	8006fbc <UART_SetConfig+0xa50>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	db7b      	blt.n	8007026 <UART_SetConfig+0xaba>
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d879      	bhi.n	8007026 <UART_SetConfig+0xaba>
 8006f32:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <UART_SetConfig+0x9cc>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006fc3 	.word	0x08006fc3
 8006f3c:	08006fcb 	.word	0x08006fcb
 8006f40:	08007027 	.word	0x08007027
 8006f44:	08007027 	.word	0x08007027
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08007027 	.word	0x08007027
 8006f50:	08007027 	.word	0x08007027
 8006f54:	08007027 	.word	0x08007027
 8006f58:	08006fe3 	.word	0x08006fe3
 8006f5c:	08007027 	.word	0x08007027
 8006f60:	08007027 	.word	0x08007027
 8006f64:	08007027 	.word	0x08007027
 8006f68:	08007027 	.word	0x08007027
 8006f6c:	08007027 	.word	0x08007027
 8006f70:	08007027 	.word	0x08007027
 8006f74:	08007027 	.word	0x08007027
 8006f78:	08006ff3 	.word	0x08006ff3
 8006f7c:	08007027 	.word	0x08007027
 8006f80:	08007027 	.word	0x08007027
 8006f84:	08007027 	.word	0x08007027
 8006f88:	08007027 	.word	0x08007027
 8006f8c:	08007027 	.word	0x08007027
 8006f90:	08007027 	.word	0x08007027
 8006f94:	08007027 	.word	0x08007027
 8006f98:	08007027 	.word	0x08007027
 8006f9c:	08007027 	.word	0x08007027
 8006fa0:	08007027 	.word	0x08007027
 8006fa4:	08007027 	.word	0x08007027
 8006fa8:	08007027 	.word	0x08007027
 8006fac:	08007027 	.word	0x08007027
 8006fb0:	08007027 	.word	0x08007027
 8006fb4:	08007027 	.word	0x08007027
 8006fb8:	08007019 	.word	0x08007019
 8006fbc:	2b40      	cmp	r3, #64	@ 0x40
 8006fbe:	d02e      	beq.n	800701e <UART_SetConfig+0xab2>
 8006fc0:	e031      	b.n	8007026 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fc fe17 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fc8:	e033      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fca:	f7fc fe29 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8006fce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fd0:	e02f      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe f80c 	bl	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe0:	e027      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe2:	f107 0318 	add.w	r3, r7, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe f958 	bl	800529c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff0:	e01f      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff2:	4b69      	ldr	r3, [pc, #420]	@ (8007198 <UART_SetConfig+0xc2c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ffe:	4b66      	ldr	r3, [pc, #408]	@ (8007198 <UART_SetConfig+0xc2c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	4a64      	ldr	r2, [pc, #400]	@ (800719c <UART_SetConfig+0xc30>)
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007010:	e00f      	b.n	8007032 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007012:	4b62      	ldr	r3, [pc, #392]	@ (800719c <UART_SetConfig+0xc30>)
 8007014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007016:	e00c      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007018:	4b61      	ldr	r3, [pc, #388]	@ (80071a0 <UART_SetConfig+0xc34>)
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800701c:	e009      	b.n	8007032 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007024:	e005      	b.n	8007032 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80ea 	beq.w	800720e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	4a55      	ldr	r2, [pc, #340]	@ (8007194 <UART_SetConfig+0xc28>)
 8007040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007044:	461a      	mov	r2, r3
 8007046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007048:	fbb3 f3f2 	udiv	r3, r3, r2
 800704c:	005a      	lsls	r2, r3, #1
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	441a      	add	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	2b0f      	cmp	r3, #15
 8007064:	d916      	bls.n	8007094 <UART_SetConfig+0xb28>
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706c:	d212      	bcs.n	8007094 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	b29b      	uxth	r3, r3
 8007072:	f023 030f 	bic.w	r3, r3, #15
 8007076:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	b29b      	uxth	r3, r3
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	b29a      	uxth	r2, r3
 8007084:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007086:	4313      	orrs	r3, r2
 8007088:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e0bc      	b.n	800720e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800709a:	e0b8      	b.n	800720e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800709c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	dc4b      	bgt.n	800713c <UART_SetConfig+0xbd0>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f2c0 8087 	blt.w	80071b8 <UART_SetConfig+0xc4c>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	f200 8084 	bhi.w	80071b8 <UART_SetConfig+0xc4c>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <UART_SetConfig+0xb4c>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	08007143 	.word	0x08007143
 80070bc:	0800714b 	.word	0x0800714b
 80070c0:	080071b9 	.word	0x080071b9
 80070c4:	080071b9 	.word	0x080071b9
 80070c8:	08007153 	.word	0x08007153
 80070cc:	080071b9 	.word	0x080071b9
 80070d0:	080071b9 	.word	0x080071b9
 80070d4:	080071b9 	.word	0x080071b9
 80070d8:	08007163 	.word	0x08007163
 80070dc:	080071b9 	.word	0x080071b9
 80070e0:	080071b9 	.word	0x080071b9
 80070e4:	080071b9 	.word	0x080071b9
 80070e8:	080071b9 	.word	0x080071b9
 80070ec:	080071b9 	.word	0x080071b9
 80070f0:	080071b9 	.word	0x080071b9
 80070f4:	080071b9 	.word	0x080071b9
 80070f8:	08007173 	.word	0x08007173
 80070fc:	080071b9 	.word	0x080071b9
 8007100:	080071b9 	.word	0x080071b9
 8007104:	080071b9 	.word	0x080071b9
 8007108:	080071b9 	.word	0x080071b9
 800710c:	080071b9 	.word	0x080071b9
 8007110:	080071b9 	.word	0x080071b9
 8007114:	080071b9 	.word	0x080071b9
 8007118:	080071b9 	.word	0x080071b9
 800711c:	080071b9 	.word	0x080071b9
 8007120:	080071b9 	.word	0x080071b9
 8007124:	080071b9 	.word	0x080071b9
 8007128:	080071b9 	.word	0x080071b9
 800712c:	080071b9 	.word	0x080071b9
 8007130:	080071b9 	.word	0x080071b9
 8007134:	080071b9 	.word	0x080071b9
 8007138:	080071ab 	.word	0x080071ab
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	d037      	beq.n	80071b0 <UART_SetConfig+0xc44>
 8007140:	e03a      	b.n	80071b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fc fd57 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007146:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007148:	e03c      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800714a:	f7fc fd69 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 800714e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007150:	e038      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd ff4c 	bl	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007160:	e030      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007162:	f107 0318 	add.w	r3, r7, #24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe f898 	bl	800529c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007170:	e028      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007172:	4b09      	ldr	r3, [pc, #36]	@ (8007198 <UART_SetConfig+0xc2c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d012      	beq.n	80071a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800717e:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <UART_SetConfig+0xc2c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	08db      	lsrs	r3, r3, #3
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	4a04      	ldr	r2, [pc, #16]	@ (800719c <UART_SetConfig+0xc30>)
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007190:	e018      	b.n	80071c4 <UART_SetConfig+0xc58>
 8007192:	bf00      	nop
 8007194:	0800aec8 	.word	0x0800aec8
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80071a4:	4b24      	ldr	r3, [pc, #144]	@ (8007238 <UART_SetConfig+0xccc>)
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a8:	e00c      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071aa:	4b24      	ldr	r3, [pc, #144]	@ (800723c <UART_SetConfig+0xcd0>)
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ae:	e009      	b.n	80071c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b6:	e005      	b.n	80071c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071c2:	bf00      	nop
    }

    if (pclk != 0U)
 80071c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d021      	beq.n	800720e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007240 <UART_SetConfig+0xcd4>)
 80071d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d4:	461a      	mov	r2, r3
 80071d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	441a      	add	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	2b0f      	cmp	r3, #15
 80071f2:	d909      	bls.n	8007208 <UART_SetConfig+0xc9c>
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071fa:	d205      	bcs.n	8007208 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	b29a      	uxth	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	e002      	b.n	800720e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2201      	movs	r2, #1
 8007212:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2201      	movs	r2, #1
 800721a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2200      	movs	r2, #0
 8007222:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2200      	movs	r2, #0
 8007228:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800722a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800722e:	4618      	mov	r0, r3
 8007230:	3748      	adds	r7, #72	@ 0x48
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007238:	03d09000 	.word	0x03d09000
 800723c:	003d0900 	.word	0x003d0900
 8007240:	0800aec8 	.word	0x0800aec8

08007244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01a      	beq.n	800735a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007342:	d10a      	bne.n	800735a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b098      	sub	sp, #96	@ 0x60
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007398:	f7fb f962 	bl	8002660 <HAL_GetTick>
 800739c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d12f      	bne.n	800740c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f88e 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d022      	beq.n	800740c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073da:	653b      	str	r3, [r7, #80]	@ 0x50
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e6      	bne.n	80073c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e063      	b.n	80074d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d149      	bne.n	80074ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800741a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007422:	2200      	movs	r2, #0
 8007424:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f857 	bl	80074dc <UART_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d03c      	beq.n	80074ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	623b      	str	r3, [r7, #32]
   return(result);
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007452:	633b      	str	r3, [r7, #48]	@ 0x30
 8007454:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	60fb      	str	r3, [r7, #12]
   return(result);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007486:	61fa      	str	r2, [r7, #28]
 8007488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	69b9      	ldr	r1, [r7, #24]
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	617b      	str	r3, [r7, #20]
   return(result);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e012      	b.n	80074d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3758      	adds	r7, #88	@ 0x58
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	4613      	mov	r3, r2
 80074ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ec:	e04f      	b.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d04b      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f6:	f7fb f8b3 	bl	8002660 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <UART_WaitOnFlagUntilTimeout+0x30>
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e04e      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d037      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b80      	cmp	r3, #128	@ 0x80
 8007522:	d034      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b40      	cmp	r3, #64	@ 0x40
 8007528:	d031      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b08      	cmp	r3, #8
 8007536:	d110      	bne.n	800755a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2208      	movs	r2, #8
 800753e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f839 	bl	80075b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2208      	movs	r2, #8
 800754a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e029      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007568:	d111      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f81f 	bl	80075b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e00f      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4013      	ands	r3, r2
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	bf0c      	ite	eq
 800759e:	2301      	moveq	r3, #1
 80075a0:	2300      	movne	r3, #0
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d0a0      	beq.n	80074ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b095      	sub	sp, #84	@ 0x54
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075de:	643b      	str	r3, [r7, #64]	@ 0x40
 80075e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	61fb      	str	r3, [r7, #28]
   return(result);
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	4b1e      	ldr	r3, [pc, #120]	@ (8007680 <UART_EndRxTransfer+0xc8>)
 8007606:	4013      	ands	r3, r2
 8007608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d118      	bne.n	8007660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60bb      	str	r3, [r7, #8]
   return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	647b      	str	r3, [r7, #68]	@ 0x44
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007674:	bf00      	nop
 8007676:	3754      	adds	r7, #84	@ 0x54
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	effffffe 	.word	0xeffffffe

08007684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_UARTEx_DisableFifoMode+0x16>
 8007696:	2302      	movs	r3, #2
 8007698:	e027      	b.n	80076ea <HAL_UARTEx_DisableFifoMode+0x66>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2224      	movs	r2, #36	@ 0x24
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800770a:	2302      	movs	r3, #2
 800770c:	e02d      	b.n	800776a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2224      	movs	r2, #36	@ 0x24
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f850 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007786:	2302      	movs	r3, #2
 8007788:	e02d      	b.n	80077e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2224      	movs	r2, #36	@ 0x24
 8007796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f812 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d108      	bne.n	8007812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007810:	e031      	b.n	8007876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007812:	2310      	movs	r3, #16
 8007814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007816:	2310      	movs	r3, #16
 8007818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	0e5b      	lsrs	r3, r3, #25
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0f5b      	lsrs	r3, r3, #29
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	7b3a      	ldrb	r2, [r7, #12]
 800783e:	4911      	ldr	r1, [pc, #68]	@ (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 8007840:	5c8a      	ldrb	r2, [r1, r2]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007846:	7b3a      	ldrb	r2, [r7, #12]
 8007848:	490f      	ldr	r1, [pc, #60]	@ (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 800784a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800784c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	7b7a      	ldrb	r2, [r7, #13]
 800785c:	4909      	ldr	r1, [pc, #36]	@ (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 800785e:	5c8a      	ldrb	r2, [r1, r2]
 8007860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007864:	7b7a      	ldrb	r2, [r7, #13]
 8007866:	4908      	ldr	r1, [pc, #32]	@ (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 8007868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800786a:	fb93 f3f2 	sdiv	r3, r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	0800aee0 	.word	0x0800aee0
 8007888:	0800aee8 	.word	0x0800aee8

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4d0d      	ldr	r5, [pc, #52]	@ (80078d4 <__libc_init_array+0x38>)
 80078a0:	4c0d      	ldr	r4, [pc, #52]	@ (80078d8 <__libc_init_array+0x3c>)
 80078a2:	1b64      	subs	r4, r4, r5
 80078a4:	10a4      	asrs	r4, r4, #2
 80078a6:	2600      	movs	r6, #0
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	4d0b      	ldr	r5, [pc, #44]	@ (80078dc <__libc_init_array+0x40>)
 80078ae:	4c0c      	ldr	r4, [pc, #48]	@ (80078e0 <__libc_init_array+0x44>)
 80078b0:	f000 f818 	bl	80078e4 <_init>
 80078b4:	1b64      	subs	r4, r4, r5
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	2600      	movs	r6, #0
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	0800aef8 	.word	0x0800aef8
 80078d8:	0800aef8 	.word	0x0800aef8
 80078dc:	0800aef8 	.word	0x0800aef8
 80078e0:	0800aefc 	.word	0x0800aefc

080078e4 <_init>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	bf00      	nop
 80078e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ea:	bc08      	pop	{r3}
 80078ec:	469e      	mov	lr, r3
 80078ee:	4770      	bx	lr

080078f0 <_fini>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	bf00      	nop
 80078f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f6:	bc08      	pop	{r3}
 80078f8:	469e      	mov	lr, r3
 80078fa:	4770      	bx	lr
