
ILI9486 Waveshare SPI STM32F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004760  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035cc  08004924  08004924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef0  08007ef0  00009024  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef0  08007ef0  00008ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef8  08007ef8  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007efc  08007efc  00008efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007f00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000024  08007f24  00009024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08007f24  000090c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009647  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6c  00000000  00000000  0001269b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00014208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000696  00000000  00000000  00014ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021160  00000000  00000000  0001515e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b127  00000000  00000000  000362be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca882  00000000  00000000  000413e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bc67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  0010bcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dd  00000000  00000000  0010e08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800490c 	.word	0x0800490c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	0800490c 	.word	0x0800490c

08000204 <__aeabi_dmul>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800020e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000212:	bf1d      	ittte	ne
 8000214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000218:	ea94 0f0c 	teqne	r4, ip
 800021c:	ea95 0f0c 	teqne	r5, ip
 8000220:	f000 f8de 	bleq	80003e0 <__aeabi_dmul+0x1dc>
 8000224:	442c      	add	r4, r5
 8000226:	ea81 0603 	eor.w	r6, r1, r3
 800022a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000236:	bf18      	it	ne
 8000238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800023c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000244:	d038      	beq.n	80002b8 <__aeabi_dmul+0xb4>
 8000246:	fba0 ce02 	umull	ip, lr, r0, r2
 800024a:	f04f 0500 	mov.w	r5, #0
 800024e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000252:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000256:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025a:	f04f 0600 	mov.w	r6, #0
 800025e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000262:	f09c 0f00 	teq	ip, #0
 8000266:	bf18      	it	ne
 8000268:	f04e 0e01 	orrne.w	lr, lr, #1
 800026c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000270:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000274:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000278:	d204      	bcs.n	8000284 <__aeabi_dmul+0x80>
 800027a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027e:	416d      	adcs	r5, r5
 8000280:	eb46 0606 	adc.w	r6, r6, r6
 8000284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800028c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000298:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800029c:	bf88      	it	hi
 800029e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a2:	d81e      	bhi.n	80002e2 <__aeabi_dmul+0xde>
 80002a4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002bc:	ea46 0101 	orr.w	r1, r6, r1
 80002c0:	ea40 0002 	orr.w	r0, r0, r2
 80002c4:	ea81 0103 	eor.w	r1, r1, r3
 80002c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002cc:	bfc2      	ittt	gt
 80002ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	popgt	{r4, r5, r6, pc}
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f04f 0e00 	mov.w	lr, #0
 80002e0:	3c01      	subs	r4, #1
 80002e2:	f300 80ab 	bgt.w	800043c <__aeabi_dmul+0x238>
 80002e6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ea:	bfde      	ittt	le
 80002ec:	2000      	movle	r0, #0
 80002ee:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f2:	bd70      	pople	{r4, r5, r6, pc}
 80002f4:	f1c4 0400 	rsb	r4, r4, #0
 80002f8:	3c20      	subs	r4, #32
 80002fa:	da35      	bge.n	8000368 <__aeabi_dmul+0x164>
 80002fc:	340c      	adds	r4, #12
 80002fe:	dc1b      	bgt.n	8000338 <__aeabi_dmul+0x134>
 8000300:	f104 0414 	add.w	r4, r4, #20
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f305 	lsl.w	r3, r0, r5
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f205 	lsl.w	r2, r1, r5
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800031c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	fa21 f604 	lsr.w	r6, r1, r4
 8000328:	eb42 0106 	adc.w	r1, r2, r6
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 040c 	rsb	r4, r4, #12
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f304 	lsl.w	r3, r0, r4
 8000344:	fa20 f005 	lsr.w	r0, r0, r5
 8000348:	fa01 f204 	lsl.w	r2, r1, r4
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	f141 0100 	adc.w	r1, r1, #0
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f205 	lsl.w	r2, r0, r5
 8000370:	ea4e 0e02 	orr.w	lr, lr, r2
 8000374:	fa20 f304 	lsr.w	r3, r0, r4
 8000378:	fa01 f205 	lsl.w	r2, r1, r5
 800037c:	ea43 0302 	orr.w	r3, r3, r2
 8000380:	fa21 f004 	lsr.w	r0, r1, r4
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	fa21 f204 	lsr.w	r2, r1, r4
 800038c:	ea20 0002 	bic.w	r0, r0, r2
 8000390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000398:	bf08      	it	eq
 800039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f094 0f00 	teq	r4, #0
 80003a4:	d10f      	bne.n	80003c6 <__aeabi_dmul+0x1c2>
 80003a6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003aa:	0040      	lsls	r0, r0, #1
 80003ac:	eb41 0101 	adc.w	r1, r1, r1
 80003b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b4:	bf08      	it	eq
 80003b6:	3c01      	subeq	r4, #1
 80003b8:	d0f7      	beq.n	80003aa <__aeabi_dmul+0x1a6>
 80003ba:	ea41 0106 	orr.w	r1, r1, r6
 80003be:	f095 0f00 	teq	r5, #0
 80003c2:	bf18      	it	ne
 80003c4:	4770      	bxne	lr
 80003c6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	eb43 0303 	adc.w	r3, r3, r3
 80003d0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3d01      	subeq	r5, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1c6>
 80003da:	ea43 0306 	orr.w	r3, r3, r6
 80003de:	4770      	bx	lr
 80003e0:	ea94 0f0c 	teq	r4, ip
 80003e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e8:	bf18      	it	ne
 80003ea:	ea95 0f0c 	teqne	r5, ip
 80003ee:	d00c      	beq.n	800040a <__aeabi_dmul+0x206>
 80003f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f4:	bf18      	it	ne
 80003f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fa:	d1d1      	bne.n	80003a0 <__aeabi_dmul+0x19c>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd70      	pop	{r4, r5, r6, pc}
 800040a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040e:	bf06      	itte	eq
 8000410:	4610      	moveq	r0, r2
 8000412:	4619      	moveq	r1, r3
 8000414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000418:	d019      	beq.n	800044e <__aeabi_dmul+0x24a>
 800041a:	ea94 0f0c 	teq	r4, ip
 800041e:	d102      	bne.n	8000426 <__aeabi_dmul+0x222>
 8000420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000424:	d113      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000426:	ea95 0f0c 	teq	r5, ip
 800042a:	d105      	bne.n	8000438 <__aeabi_dmul+0x234>
 800042c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000430:	bf1c      	itt	ne
 8000432:	4610      	movne	r0, r2
 8000434:	4619      	movne	r1, r3
 8000436:	d10a      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000440:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd70      	pop	{r4, r5, r6, pc}
 800044e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000452:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000456:	bd70      	pop	{r4, r5, r6, pc}

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	@ 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295
 8000820:	f04f 30ff 	movne.w	r0, #4294967295
 8000824:	f000 b96a 	b.w	8000afc <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	460c      	mov	r4, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d14e      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084c:	4694      	mov	ip, r2
 800084e:	458c      	cmp	ip, r1
 8000850:	4686      	mov	lr, r0
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	d962      	bls.n	800091e <__udivmoddi4+0xde>
 8000858:	b14a      	cbz	r2, 800086e <__udivmoddi4+0x2e>
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	4091      	lsls	r1, r2
 8000860:	fa20 f303 	lsr.w	r3, r0, r3
 8000864:	fa0c fc02 	lsl.w	ip, ip, r2
 8000868:	4319      	orrs	r1, r3
 800086a:	fa00 fe02 	lsl.w	lr, r0, r2
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f f68c 	uxth.w	r6, ip
 8000876:	fbb1 f4f7 	udiv	r4, r1, r7
 800087a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087e:	fb07 1114 	mls	r1, r7, r4, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb04 f106 	mul.w	r1, r4, r6
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f104 30ff 	add.w	r0, r4, #4294967295
 8000896:	f080 8112 	bcs.w	8000abe <__udivmoddi4+0x27e>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 810f 	bls.w	8000abe <__udivmoddi4+0x27e>
 80008a0:	3c02      	subs	r4, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a59      	subs	r1, r3, r1
 80008a6:	fa1f f38e 	uxth.w	r3, lr
 80008aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ae:	fb07 1110 	mls	r1, r7, r0, r1
 80008b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b6:	fb00 f606 	mul.w	r6, r0, r6
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d90a      	bls.n	80008d4 <__udivmoddi4+0x94>
 80008be:	eb1c 0303 	adds.w	r3, ip, r3
 80008c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c6:	f080 80fc 	bcs.w	8000ac2 <__udivmoddi4+0x282>
 80008ca:	429e      	cmp	r6, r3
 80008cc:	f240 80f9 	bls.w	8000ac2 <__udivmoddi4+0x282>
 80008d0:	4463      	add	r3, ip
 80008d2:	3802      	subs	r0, #2
 80008d4:	1b9b      	subs	r3, r3, r6
 80008d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008da:	2100      	movs	r1, #0
 80008dc:	b11d      	cbz	r5, 80008e6 <__udivmoddi4+0xa6>
 80008de:	40d3      	lsrs	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	e9c5 3200 	strd	r3, r2, [r5]
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d905      	bls.n	80008fa <__udivmoddi4+0xba>
 80008ee:	b10d      	cbz	r5, 80008f4 <__udivmoddi4+0xb4>
 80008f0:	e9c5 0100 	strd	r0, r1, [r5]
 80008f4:	2100      	movs	r1, #0
 80008f6:	4608      	mov	r0, r1
 80008f8:	e7f5      	b.n	80008e6 <__udivmoddi4+0xa6>
 80008fa:	fab3 f183 	clz	r1, r3
 80008fe:	2900      	cmp	r1, #0
 8000900:	d146      	bne.n	8000990 <__udivmoddi4+0x150>
 8000902:	42a3      	cmp	r3, r4
 8000904:	d302      	bcc.n	800090c <__udivmoddi4+0xcc>
 8000906:	4290      	cmp	r0, r2
 8000908:	f0c0 80f0 	bcc.w	8000aec <__udivmoddi4+0x2ac>
 800090c:	1a86      	subs	r6, r0, r2
 800090e:	eb64 0303 	sbc.w	r3, r4, r3
 8000912:	2001      	movs	r0, #1
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0e6      	beq.n	80008e6 <__udivmoddi4+0xa6>
 8000918:	e9c5 6300 	strd	r6, r3, [r5]
 800091c:	e7e3      	b.n	80008e6 <__udivmoddi4+0xa6>
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8090 	bne.w	8000a44 <__udivmoddi4+0x204>
 8000924:	eba1 040c 	sub.w	r4, r1, ip
 8000928:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800092c:	fa1f f78c 	uxth.w	r7, ip
 8000930:	2101      	movs	r1, #1
 8000932:	fbb4 f6f8 	udiv	r6, r4, r8
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb08 4416 	mls	r4, r8, r6, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb07 f006 	mul.w	r0, r7, r6
 8000946:	4298      	cmp	r0, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x11c>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x11a>
 8000954:	4298      	cmp	r0, r3
 8000956:	f200 80cd 	bhi.w	8000af4 <__udivmoddi4+0x2b4>
 800095a:	4626      	mov	r6, r4
 800095c:	1a1c      	subs	r4, r3, r0
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb4 f0f8 	udiv	r0, r4, r8
 8000966:	fb08 4410 	mls	r4, r8, r0, r4
 800096a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096e:	fb00 f707 	mul.w	r7, r0, r7
 8000972:	429f      	cmp	r7, r3
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x148>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 34ff 	add.w	r4, r0, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x146>
 8000980:	429f      	cmp	r7, r3
 8000982:	f200 80b0 	bhi.w	8000ae6 <__udivmoddi4+0x2a6>
 8000986:	4620      	mov	r0, r4
 8000988:	1bdb      	subs	r3, r3, r7
 800098a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098e:	e7a5      	b.n	80008dc <__udivmoddi4+0x9c>
 8000990:	f1c1 0620 	rsb	r6, r1, #32
 8000994:	408b      	lsls	r3, r1
 8000996:	fa22 f706 	lsr.w	r7, r2, r6
 800099a:	431f      	orrs	r7, r3
 800099c:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a0:	fa04 f301 	lsl.w	r3, r4, r1
 80009a4:	ea43 030c 	orr.w	r3, r3, ip
 80009a8:	40f4      	lsrs	r4, r6
 80009aa:	fa00 f801 	lsl.w	r8, r0, r1
 80009ae:	0c38      	lsrs	r0, r7, #16
 80009b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b4:	fbb4 fef0 	udiv	lr, r4, r0
 80009b8:	fa1f fc87 	uxth.w	ip, r7
 80009bc:	fb00 441e 	mls	r4, r0, lr, r4
 80009c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c4:	fb0e f90c 	mul.w	r9, lr, ip
 80009c8:	45a1      	cmp	r9, r4
 80009ca:	fa02 f201 	lsl.w	r2, r2, r1
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x1a6>
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009d6:	f080 8084 	bcs.w	8000ae2 <__udivmoddi4+0x2a2>
 80009da:	45a1      	cmp	r9, r4
 80009dc:	f240 8081 	bls.w	8000ae2 <__udivmoddi4+0x2a2>
 80009e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	eba4 0409 	sub.w	r4, r4, r9
 80009ea:	fa1f f983 	uxth.w	r9, r3
 80009ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f2:	fb00 4413 	mls	r4, r0, r3, r4
 80009f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80009fe:	45a4      	cmp	ip, r4
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x1d2>
 8000a02:	193c      	adds	r4, r7, r4
 8000a04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a08:	d267      	bcs.n	8000ada <__udivmoddi4+0x29a>
 8000a0a:	45a4      	cmp	ip, r4
 8000a0c:	d965      	bls.n	8000ada <__udivmoddi4+0x29a>
 8000a0e:	3b02      	subs	r3, #2
 8000a10:	443c      	add	r4, r7
 8000a12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a16:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1a:	eba4 040c 	sub.w	r4, r4, ip
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	46ce      	mov	lr, r9
 8000a22:	469c      	mov	ip, r3
 8000a24:	d351      	bcc.n	8000aca <__udivmoddi4+0x28a>
 8000a26:	d04e      	beq.n	8000ac6 <__udivmoddi4+0x286>
 8000a28:	b155      	cbz	r5, 8000a40 <__udivmoddi4+0x200>
 8000a2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000a2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000a32:	fa04 f606 	lsl.w	r6, r4, r6
 8000a36:	40cb      	lsrs	r3, r1
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	40cc      	lsrs	r4, r1
 8000a3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	e750      	b.n	80008e6 <__udivmoddi4+0xa6>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f103 	lsr.w	r1, r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa24 f303 	lsr.w	r3, r4, r3
 8000a54:	4094      	lsls	r4, r2
 8000a56:	430c      	orrs	r4, r1
 8000a58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3110 	mls	r1, r8, r0, r3
 8000a6c:	0c23      	lsrs	r3, r4, #16
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f107 	mul.w	r1, r0, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x24c>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a82:	d22c      	bcs.n	8000ade <__udivmoddi4+0x29e>
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d92a      	bls.n	8000ade <__udivmoddi4+0x29e>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a94:	fb08 3311 	mls	r3, r8, r1, r3
 8000a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9c:	fb01 f307 	mul.w	r3, r1, r7
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x276>
 8000aa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000aac:	d213      	bcs.n	8000ad6 <__udivmoddi4+0x296>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d911      	bls.n	8000ad6 <__udivmoddi4+0x296>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4464      	add	r4, ip
 8000ab6:	1ae4      	subs	r4, r4, r3
 8000ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000abc:	e739      	b.n	8000932 <__udivmoddi4+0xf2>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	e6f0      	b.n	80008a4 <__udivmoddi4+0x64>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e706      	b.n	80008d4 <__udivmoddi4+0x94>
 8000ac6:	45c8      	cmp	r8, r9
 8000ac8:	d2ae      	bcs.n	8000a28 <__udivmoddi4+0x1e8>
 8000aca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ace:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7a8      	b.n	8000a28 <__udivmoddi4+0x1e8>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	e7ed      	b.n	8000ab6 <__udivmoddi4+0x276>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e799      	b.n	8000a12 <__udivmoddi4+0x1d2>
 8000ade:	4630      	mov	r0, r6
 8000ae0:	e7d4      	b.n	8000a8c <__udivmoddi4+0x24c>
 8000ae2:	46d6      	mov	lr, sl
 8000ae4:	e77f      	b.n	80009e6 <__udivmoddi4+0x1a6>
 8000ae6:	4463      	add	r3, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e74d      	b.n	8000988 <__udivmoddi4+0x148>
 8000aec:	4606      	mov	r6, r0
 8000aee:	4623      	mov	r3, r4
 8000af0:	4608      	mov	r0, r1
 8000af2:	e70f      	b.n	8000914 <__udivmoddi4+0xd4>
 8000af4:	3e02      	subs	r6, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	e730      	b.n	800095c <__udivmoddi4+0x11c>
 8000afa:	bf00      	nop

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <Driver_Delay_ms>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
void Driver_Delay_ms(unsigned long xms)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f001 fe03 	bl	8002714 <HAL_Delay>

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <LCD_Reset>:
  for (int j = xus; j > 0; j--);
}


static void LCD_Reset(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b22:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <LCD_Reset+0x44>)
 8000b24:	f002 f894 	bl	8002c50 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8000b28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2c:	f7ff ffe8 	bl	8000b00 <Driver_Delay_ms>
    LCD_RST_0;
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <LCD_Reset+0x44>)
 8000b38:	f002 f88a 	bl	8002c50 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8000b3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b40:	f7ff ffde 	bl	8000b00 <Driver_Delay_ms>
    LCD_RST_1;
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b4a:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <LCD_Reset+0x44>)
 8000b4c:	f002 f880 	bl	8002c50 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8000b50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b54:	f7ff ffd4 	bl	8000b00 <Driver_Delay_ms>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40020000 	.word	0x40020000

08000b60 <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
//    PWM_SetValue(value);
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b88:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <LCD_WriteReg+0x40>)
 8000b8a:	f002 f861 	bl	8002c50 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2140      	movs	r1, #64	@ 0x40
 8000b92:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <LCD_WriteReg+0x44>)
 8000b94:	f002 f85c 	bl	8002c50 <HAL_GPIO_WritePin>
//    SPI4W_Write_Byte(Reg);
    HAL_SPI_Transmit(&hspi1, &Reg, 1U, 100U);
 8000b98:	1df9      	adds	r1, r7, #7
 8000b9a:	2364      	movs	r3, #100	@ 0x64
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4808      	ldr	r0, [pc, #32]	@ (8000bc0 <LCD_WriteReg+0x48>)
 8000ba0:	f003 fc69 	bl	8004476 <HAL_SPI_Transmit>
    LCD_CS_1;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2140      	movs	r1, #64	@ 0x40
 8000ba8:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <LCD_WriteReg+0x44>)
 8000baa:	f002 f851 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	2000006c 	.word	0x2000006c

08000bc4 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bd4:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <LCD_WriteData+0x40>)
 8000bd6:	f002 f83b 	bl	8002c50 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2140      	movs	r1, #64	@ 0x40
 8000bde:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <LCD_WriteData+0x44>)
 8000be0:	f002 f836 	bl	8002c50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &Data, 1U, 100U);
 8000be4:	1df9      	adds	r1, r7, #7
 8000be6:	2364      	movs	r3, #100	@ 0x64
 8000be8:	2201      	movs	r2, #1
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <LCD_WriteData+0x48>)
 8000bec:	f003 fc43 	bl	8004476 <HAL_SPI_Transmit>
//    HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//    SPI4W_Write_Byte(Data >> 8);
//    SPI4W_Write_Byte(Data & 0XFF);
    LCD_CS_1;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	@ 0x40
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <LCD_WriteData+0x44>)
 8000bf6:	f002 f82b 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	2000006c 	.word	0x2000006c

08000c10 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c22:	4815      	ldr	r0, [pc, #84]	@ (8000c78 <LCD_Write_AllData+0x68>)
 8000c24:	f002 f814 	bl	8002c50 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2140      	movs	r1, #64	@ 0x40
 8000c2c:	4813      	ldr	r0, [pc, #76]	@ (8000c7c <LCD_Write_AllData+0x6c>)
 8000c2e:	f002 f80f 	bl	8002c50 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e012      	b.n	8000c5e <LCD_Write_AllData+0x4e>
//        HAL_SPI_Transmit(&hspi1, &Data, 1U, 100U);

    	uint8_t data[2];
    	data[0] = Data >> 8;
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	723b      	strb	r3, [r7, #8]
    	data[1] = Data;
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	727b      	strb	r3, [r7, #9]

        HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 2, 1000);
 8000c48:	f107 0108 	add.w	r1, r7, #8
 8000c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c50:	2202      	movs	r2, #2
 8000c52:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <LCD_Write_AllData+0x70>)
 8000c54:	f003 fc0f 	bl	8004476 <HAL_SPI_Transmit>
    for(i = 0; i < DataLen; i++) {
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3e8      	bcc.n	8000c38 <LCD_Write_AllData+0x28>
//        HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 1000);
//        HAL_SPI_Transmit(&hspi1, &(Data & 0XFF), 1U, 100U);
//        SPI4W_Write_Byte(Data >> 8);
//        SPI4W_Write_Byte(Data & 0XFF);
    }
    LCD_CS_1;
 8000c66:	2201      	movs	r2, #1
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <LCD_Write_AllData+0x6c>)
 8000c6c:	f001 fff0 	bl	8002c50 <HAL_GPIO_WritePin>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	2000006c 	.word	0x2000006c

08000c84 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8000c88:	20f9      	movs	r0, #249	@ 0xf9
 8000c8a:	f7ff ff75 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ff98 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x08);
 8000c94:	2008      	movs	r0, #8
 8000c96:	f7ff ff95 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8000c9a:	20c0      	movs	r0, #192	@ 0xc0
 8000c9c:	f7ff ff6c 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8000ca0:	2019      	movs	r0, #25
 8000ca2:	f7ff ff8f 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8000ca6:	201a      	movs	r0, #26
 8000ca8:	f7ff ff8c 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8000cac:	20c1      	movs	r0, #193	@ 0xc1
 8000cae:	f7ff ff63 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8000cb2:	2045      	movs	r0, #69	@ 0x45
 8000cb4:	f7ff ff86 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff83 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8000cbe:	20c2      	movs	r0, #194	@ 0xc2
 8000cc0:	f7ff ff5a 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x33);
 8000cc4:	2033      	movs	r0, #51	@ 0x33
 8000cc6:	f7ff ff7d 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 8000cca:	20c5      	movs	r0, #197	@ 0xc5
 8000ccc:	f7ff ff54 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ff77 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 8000cd6:	2028      	movs	r0, #40	@ 0x28
 8000cd8:	f7ff ff74 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8000cdc:	20b1      	movs	r0, #177	@ 0xb1
 8000cde:	f7ff ff4b 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8000ce2:	20a0      	movs	r0, #160	@ 0xa0
 8000ce4:	f7ff ff6e 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x11);
 8000ce8:	2011      	movs	r0, #17
 8000cea:	f7ff ff6b 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8000cee:	20b4      	movs	r0, #180	@ 0xb4
 8000cf0:	f7ff ff42 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f7ff ff65 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 8000cfa:	20b6      	movs	r0, #182	@ 0xb6
 8000cfc:	f7ff ff3c 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff5f 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 8000d06:	2042      	movs	r0, #66	@ 0x42
 8000d08:	f7ff ff5c 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x3B);
 8000d0c:	203b      	movs	r0, #59	@ 0x3b
 8000d0e:	f7ff ff59 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 8000d12:	20b7      	movs	r0, #183	@ 0xb7
 8000d14:	f7ff ff30 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x07);
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f7ff ff53 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8000d1e:	20e0      	movs	r0, #224	@ 0xe0
 8000d20:	f7ff ff2a 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8000d24:	201f      	movs	r0, #31
 8000d26:	f7ff ff4d 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x25);
 8000d2a:	2025      	movs	r0, #37	@ 0x25
 8000d2c:	f7ff ff4a 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x22);
 8000d30:	2022      	movs	r0, #34	@ 0x22
 8000d32:	f7ff ff47 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8000d36:	200b      	movs	r0, #11
 8000d38:	f7ff ff44 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x06);
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f7ff ff41 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x0A);
 8000d42:	200a      	movs	r0, #10
 8000d44:	f7ff ff3e 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x4E);
 8000d48:	204e      	movs	r0, #78	@ 0x4e
 8000d4a:	f7ff ff3b 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0xC6);
 8000d4e:	20c6      	movs	r0, #198	@ 0xc6
 8000d50:	f7ff ff38 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x39);
 8000d54:	2039      	movs	r0, #57	@ 0x39
 8000d56:	f7ff ff35 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff32 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff2f 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ff2c 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ff29 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff26 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff23 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 8000d7e:	20e1      	movs	r0, #225	@ 0xe1
 8000d80:	f7ff fefa 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8000d84:	201f      	movs	r0, #31
 8000d86:	f7ff ff1d 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8000d8a:	203f      	movs	r0, #63	@ 0x3f
 8000d8c:	f7ff ff1a 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8000d90:	203f      	movs	r0, #63	@ 0x3f
 8000d92:	f7ff ff17 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f7ff ff14 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8000d9c:	201f      	movs	r0, #31
 8000d9e:	f7ff ff11 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8000da2:	200f      	movs	r0, #15
 8000da4:	f7ff ff0e 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x46);
 8000da8:	2046      	movs	r0, #70	@ 0x46
 8000daa:	f7ff ff0b 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x49);
 8000dae:	2049      	movs	r0, #73	@ 0x49
 8000db0:	f7ff ff08 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x31);
 8000db4:	2031      	movs	r0, #49	@ 0x31
 8000db6:	f7ff ff05 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x05);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f7ff ff02 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x09);
 8000dc0:	2009      	movs	r0, #9
 8000dc2:	f7ff feff 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x03);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f7ff fefc 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x1C);
 8000dcc:	201c      	movs	r0, #28
 8000dce:	f7ff fef9 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x1A);
 8000dd2:	201a      	movs	r0, #26
 8000dd4:	f7ff fef6 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fef3 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 8000dde:	20f1      	movs	r0, #241	@ 0xf1
 8000de0:	f7ff feca 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x36);
 8000de4:	2036      	movs	r0, #54	@ 0x36
 8000de6:	f7ff feed 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x04);
 8000dea:	2004      	movs	r0, #4
 8000dec:	f7ff feea 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fee7 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x3C);
 8000df6:	203c      	movs	r0, #60	@ 0x3c
 8000df8:	f7ff fee4 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f7ff fee1 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f7ff fede 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0xA4);
 8000e08:	20a4      	movs	r0, #164	@ 0xa4
 8000e0a:	f7ff fedb 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x02);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff fed8 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 8000e14:	20f2      	movs	r0, #242	@ 0xf2
 8000e16:	f7ff feaf 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x18);
 8000e1a:	2018      	movs	r0, #24
 8000e1c:	f7ff fed2 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0xA3);
 8000e20:	20a3      	movs	r0, #163	@ 0xa3
 8000e22:	f7ff fecf 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x12);
 8000e26:	2012      	movs	r0, #18
 8000e28:	f7ff fecc 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x02);
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f7ff fec9 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x32);
 8000e32:	2032      	movs	r0, #50	@ 0x32
 8000e34:	f7ff fec6 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x12);
 8000e38:	2012      	movs	r0, #18
 8000e3a:	f7ff fec3 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0xFF);
 8000e3e:	20ff      	movs	r0, #255	@ 0xff
 8000e40:	f7ff fec0 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x32);
 8000e44:	2032      	movs	r0, #50	@ 0x32
 8000e46:	f7ff febd 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff feba 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 8000e50:	20f4      	movs	r0, #244	@ 0xf4
 8000e52:	f7ff fe91 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x40);
 8000e56:	2040      	movs	r0, #64	@ 0x40
 8000e58:	f7ff feb4 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff feb1 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x08);
 8000e62:	2008      	movs	r0, #8
 8000e64:	f7ff feae 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x91);
 8000e68:	2091      	movs	r0, #145	@ 0x91
 8000e6a:	f7ff feab 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x04);
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fea8 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8000e74:	20f8      	movs	r0, #248	@ 0xf8
 8000e76:	f7ff fe7f 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x21);
 8000e7a:	2021      	movs	r0, #33	@ 0x21
 8000e7c:	f7ff fea2 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(0x04);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f7ff fe9f 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 8000e86:	203a      	movs	r0, #58	@ 0x3a
 8000e88:	f7ff fe76 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0x55);
 8000e8c:	2055      	movs	r0, #85	@ 0x55
 8000e8e:	f7ff fe99 	bl	8000bc4 <LCD_WriteData>

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	d83b      	bhi.n	8000f28 <LCD_SetGramScanWay+0x90>
 8000eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb8 <LCD_SetGramScanWay+0x20>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08000ed9 	.word	0x08000ed9
 8000ebc:	08000ee3 	.word	0x08000ee3
 8000ec0:	08000eed 	.word	0x08000eed
 8000ec4:	08000ef7 	.word	0x08000ef7
 8000ec8:	08000f01 	.word	0x08000f01
 8000ecc:	08000f0b 	.word	0x08000f0b
 8000ed0:	08000f15 	.word	0x08000f15
 8000ed4:	08000f1f 	.word	0x08000f1f
    case L2R_U2D:                       // Rotation=        0
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8000ed8:	2308      	movs	r3, #8
 8000eda:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=1, GS=0
 8000edc:	2322      	movs	r3, #34	@ 0x22
 8000ede:	81bb      	strh	r3, [r7, #12]
        break;
 8000ee0:	e022      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 8000ee6:	2362      	movs	r3, #98	@ 0x62
 8000ee8:	81bb      	strh	r3, [r7, #12]
        break;
 8000eea:	e01d      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8000eec:	2308      	movs	r3, #8
 8000eee:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	81bb      	strh	r3, [r7, #12]
        break;
 8000ef4:	e018      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC                 // Rotation=        2
        MemoryAccessReg_Data = 0x08;    // MADCTL:          BGR
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=1
 8000efa:	2342      	movs	r3, #66	@ 0x42
 8000efc:	81bb      	strh	r3, [r7, #12]
        break;
 8000efe:	e013      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 8000f00:	2328      	movs	r3, #40	@ 0x28
 8000f02:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 8000f04:	2322      	movs	r3, #34	@ 0x22
 8000f06:	81bb      	strh	r3, [r7, #12]
        break;
 8000f08:	e00e      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6                 // Rotation=        1
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 8000f0a:	2328      	movs	r3, #40	@ 0x28
 8000f0c:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;          // DISPFUNCCTL:     ISC='b0010, SM=0, SS=0, GS=0
 8000f0e:	2302      	movs	r3, #2
 8000f10:	81bb      	strh	r3, [r7, #12]
        break;
 8000f12:	e009      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA                 // Rotation=        3
        MemoryAccessReg_Data = 0x28;    // MADCTL:          BGR, MV
 8000f14:	2328      	movs	r3, #40	@ 0x28
 8000f16:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;          // DISPFUNCCTRL:    ISC='b0010, SM=0, SS=1, GS=1
 8000f18:	2362      	movs	r3, #98	@ 0x62
 8000f1a:	81bb      	strh	r3, [r7, #12]
        break;
 8000f1c:	e004      	b.n	8000f28 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;    // MADCTL: BGR | MV
 8000f1e:	2328      	movs	r3, #40	@ 0x28
 8000f20:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8000f22:	2342      	movs	r3, #66	@ 0x42
 8000f24:	81bb      	strh	r3, [r7, #12]
        break;
 8000f26:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8000f28:	4a1b      	ldr	r2, [pc, #108]	@ (8000f98 <LCD_SetGramScanWay+0x100>)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <LCD_SetGramScanWay+0xae>
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <LCD_SetGramScanWay+0xae>
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d002      	beq.n	8000f46 <LCD_SetGramScanWay+0xae>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d108      	bne.n	8000f58 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <LCD_SetGramScanWay+0x100>)
 8000f48:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f4c:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <LCD_SetGramScanWay+0x100>)
 8000f50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000f54:	805a      	strh	r2, [r3, #2]
 8000f56:	e007      	b.n	8000f68 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <LCD_SetGramScanWay+0x100>)
 8000f5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000f5e:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <LCD_SetGramScanWay+0x100>)
 8000f62:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f66:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 8000f68:	20b6      	movs	r0, #182	@ 0xb6
 8000f6a:	f7ff fe05 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(0X00);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fe28 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fe23 	bl	8000bc4 <LCD_WriteData>

    LCD_WriteReg(0x36);
 8000f7e:	2036      	movs	r0, #54	@ 0x36
 8000f80:	f7ff fdfa 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe1b 	bl	8000bc4 <LCD_WriteData>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000040 	.word	0x20000040

08000f9c <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 8000fac:	f7ff fdb4 	bl	8000b18 <LCD_Reset>
    
    if(LCD_BLval > 255)
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d901      	bls.n	8000fba <LCD_Init+0x1e>
        LCD_BLval = 255;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	80bb      	strh	r3, [r7, #4]
    LCD_SetBackLight(LCD_BLval);
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fdcf 	bl	8000b60 <LCD_SetBackLight>
    
    //Set the initialization register
    LCD_InitReg();
 8000fc2:	f7ff fe5f 	bl	8000c84 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff65 	bl	8000e98 <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 8000fce:	20c8      	movs	r0, #200	@ 0xc8
 8000fd0:	f7ff fd96 	bl	8000b00 <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 8000fd4:	2011      	movs	r0, #17
 8000fd6:	f7ff fdcf 	bl	8000b78 <LCD_WriteReg>
    Driver_Delay_ms(120);
 8000fda:	2078      	movs	r0, #120	@ 0x78
 8000fdc:	f7ff fd90 	bl	8000b00 <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 8000fe0:	2029      	movs	r0, #41	@ 0x29
 8000fe2:	f7ff fdc9 	bl	8000b78 <LCD_WriteReg>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4623      	mov	r3, r4
 8000ffe:	80fb      	strh	r3, [r7, #6]
 8001000:	4603      	mov	r3, r0
 8001002:	80bb      	strh	r3, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 800100c:	202a      	movs	r0, #42	@ 0x2a
 800100e:	f7ff fdb3 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fdd2 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fdcd 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	3b01      	subs	r3, #1
 800102e:	121b      	asrs	r3, r3, #8
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fdc6 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fdbf 	bl	8000bc4 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 8001046:	202b      	movs	r0, #43	@ 0x2b
 8001048:	f7ff fd96 	bl	8000b78 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fdb5 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 800105a:	88bb      	ldrh	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fdb0 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 8001064:	883b      	ldrh	r3, [r7, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	121b      	asrs	r3, r3, #8
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fda9 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 8001072:	883b      	ldrh	r3, [r7, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	3b01      	subs	r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fda2 	bl	8000bc4 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8001080:	202c      	movs	r0, #44	@ 0x2c
 8001082:	f7ff fd79 	bl	8000b78 <LCD_WriteReg>
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}

0800108e <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	460a      	mov	r2, r1
 8001098:	80fb      	strh	r3, [r7, #6]
 800109a:	4613      	mov	r3, r2
 800109c:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	88b9      	ldrh	r1, [r7, #4]
 80010a4:	88f8      	ldrh	r0, [r7, #6]
 80010a6:	f7ff ffa2 	bl	8000fee <LCD_SetWindow>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	80fb      	strh	r3, [r7, #6]
 80010bc:	460b      	mov	r3, r1
 80010be:	80bb      	strh	r3, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 80010c4:	88bb      	ldrh	r3, [r7, #4]
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	fb03 f202 	mul.w	r2, r3, r2
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fd9d 	bl	8000c10 <LCD_Write_AllData>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	460b      	mov	r3, r1
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <LCD_SetPointlColor+0x48>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	88fa      	ldrh	r2, [r7, #6]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d810      	bhi.n	800111e <LCD_SetPointlColor+0x3e>
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <LCD_SetPointlColor+0x48>)
 80010fe:	885b      	ldrh	r3, [r3, #2]
 8001100:	88ba      	ldrh	r2, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d80b      	bhi.n	800111e <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 8001106:	88ba      	ldrh	r2, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffbe 	bl	800108e <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	2201      	movs	r2, #1
 8001116:	2101      	movs	r1, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffca 	bl	80010b2 <LCD_SetColor>
    }
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000040 	.word	0x20000040

0800112c <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4623      	mov	r3, r4
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	4603      	mov	r3, r0
 8001140:	80bb      	strh	r3, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
 8001146:	4613      	mov	r3, r2
 8001148:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	429a      	cmp	r2, r3
 8001150:	d915      	bls.n	800117e <LCD_SetArealColor+0x52>
 8001152:	883a      	ldrh	r2, [r7, #0]
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d911      	bls.n	800117e <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	88b9      	ldrh	r1, [r7, #4]
 8001160:	88f8      	ldrh	r0, [r7, #6]
 8001162:	f7ff ff44 	bl	8000fee <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b299      	uxth	r1, r3
 800116e:	883a      	ldrh	r2, [r7, #0]
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	8b3b      	ldrh	r3, [r7, #24]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff9a 	bl	80010b2 <LCD_SetColor>
    }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}
	...

08001188 <LCD_Clear>:

void LCD_Clear(COLOR  Color)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <LCD_Clear+0x28>)
 8001194:	881a      	ldrh	r2, [r3, #0]
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <LCD_Clear+0x28>)
 8001198:	8859      	ldrh	r1, [r3, #2]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	460b      	mov	r3, r1
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ffc2 	bl	800112c <LCD_SetArealColor>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000040 	.word	0x20000040

080011b4 <GUI_Swop>:
/******************************************************************************
  function: Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	80fb      	strh	r3, [r7, #6]
 80011c0:	4613      	mov	r3, r2
 80011c2:	80bb      	strh	r3, [r7, #4]
  POINT Temp;
  Temp = Point1;
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	81fb      	strh	r3, [r7, #14]
  Point1 = Point2;
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	80fb      	strh	r3, [r7, #6]
  Point2 = Temp;
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	80bb      	strh	r3, [r7, #4]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <GUI_Clear>:

/******************************************************************************
  function: Coordinate conversion
******************************************************************************/
void GUI_Clear(COLOR Color)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
  LCD_Clear(Color);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffcd 	bl	8001188 <LCD_Clear>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <GUI_DrawPoint>:
  Color     :   Set color
  Dot_Pixel :   point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	4603      	mov	r3, r0
 800120c:	80bb      	strh	r3, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	707b      	strb	r3, [r7, #1]
  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8001216:	4b3a      	ldr	r3, [pc, #232]	@ (8001300 <GUI_DrawPoint+0x108>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	88fa      	ldrh	r2, [r7, #6]
 800121c:	429a      	cmp	r2, r3
 800121e:	d86a      	bhi.n	80012f6 <GUI_DrawPoint+0xfe>
 8001220:	4b37      	ldr	r3, [pc, #220]	@ (8001300 <GUI_DrawPoint+0x108>)
 8001222:	885b      	ldrh	r3, [r3, #2]
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	d865      	bhi.n	80012f6 <GUI_DrawPoint+0xfe>
//    DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
    return;
  }

  int16_t XDir_Num , YDir_Num;
  if (DOT_STYLE == DOT_STYLE_DFT) {
 800122a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d138      	bne.n	80012a4 <GUI_DrawPoint+0xac>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001232:	2300      	movs	r3, #0
 8001234:	81fb      	strh	r3, [r7, #14]
 8001236:	e02d      	b.n	8001294 <GUI_DrawPoint+0x9c>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001238:	2300      	movs	r3, #0
 800123a:	81bb      	strh	r3, [r7, #12]
 800123c:	e01d      	b.n	800127a <GUI_DrawPoint+0x82>
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel + 1, Ypoint + YDir_Num - Dot_Pixel + 1, Color);
 800123e:	89fa      	ldrh	r2, [r7, #14]
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	787b      	ldrb	r3, [r7, #1]
 8001248:	b29b      	uxth	r3, r3
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	3301      	adds	r3, #1
 8001250:	b298      	uxth	r0, r3
 8001252:	89ba      	ldrh	r2, [r7, #12]
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	b29a      	uxth	r2, r3
 800125a:	787b      	ldrb	r3, [r7, #1]
 800125c:	b29b      	uxth	r3, r3
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	3301      	adds	r3, #1
 8001264:	b29b      	uxth	r3, r3
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff ff39 	bl	80010e0 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800126e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001272:	b29b      	uxth	r3, r3
 8001274:	3301      	adds	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	81bb      	strh	r3, [r7, #12]
 800127a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800127e:	787b      	ldrb	r3, [r7, #1]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	3b01      	subs	r3, #1
 8001284:	429a      	cmp	r2, r3
 8001286:	dbda      	blt.n	800123e <GUI_DrawPoint+0x46>
    for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8001288:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800128c:	b29b      	uxth	r3, r3
 800128e:	3301      	adds	r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	81fb      	strh	r3, [r7, #14]
 8001294:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	3b01      	subs	r3, #1
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbca      	blt.n	8001238 <GUI_DrawPoint+0x40>
 80012a2:	e029      	b.n	80012f8 <GUI_DrawPoint+0x100>
      }
    }
  } else {
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e01f      	b.n	80012ea <GUI_DrawPoint+0xf2>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	81bb      	strh	r3, [r7, #12]
 80012ae:	e011      	b.n	80012d4 <GUI_DrawPoint+0xdc>
        //CAL! The following appears to have a bug that causes the Xpoint to be
        //CAL! shifted by -1 and the Ypoint to be shifted by -1. The net result
        //CAL! is that attempts to write to X=0 or Y=0 will cause an underflow,
        //CAL! leading to a Column/Page Address out of bounds.
        //CAL! LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
        LCD_SetPointlColor(Xpoint + XDir_Num, Ypoint + YDir_Num, Color);
 80012b0:	89fa      	ldrh	r2, [r7, #14]
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4413      	add	r3, r2
 80012b6:	b298      	uxth	r0, r3
 80012b8:	89ba      	ldrh	r2, [r7, #12]
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff ff0c 	bl	80010e0 <LCD_SetPointlColor>
      for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80012c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	81bb      	strh	r3, [r7, #12]
 80012d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	429a      	cmp	r2, r3
 80012dc:	dbe8      	blt.n	80012b0 <GUI_DrawPoint+0xb8>
    for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80012de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbda      	blt.n	80012aa <GUI_DrawPoint+0xb2>
 80012f4:	e000      	b.n	80012f8 <GUI_DrawPoint+0x100>
    return;
 80012f6:	bf00      	nop
      }
    }
  }
}
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000040 	.word	0x20000040

08001304 <GUI_DrawLine>:
  Yend   ：End point y coordinate
  Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b08d      	sub	sp, #52	@ 0x34
 8001308:	af02      	add	r7, sp, #8
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	80fb      	strh	r3, [r7, #6]
 8001316:	4603      	mov	r3, r0
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]
 800131e:	4613      	mov	r3, r2
 8001320:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8001322:	4b56      	ldr	r3, [pc, #344]	@ (800147c <GUI_DrawLine+0x178>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	429a      	cmp	r2, r3
 800132a:	f200 809f 	bhi.w	800146c <GUI_DrawLine+0x168>
 800132e:	4b53      	ldr	r3, [pc, #332]	@ (800147c <GUI_DrawLine+0x178>)
 8001330:	885b      	ldrh	r3, [r3, #2]
 8001332:	88ba      	ldrh	r2, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	f200 8099 	bhi.w	800146c <GUI_DrawLine+0x168>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800133a:	4b50      	ldr	r3, [pc, #320]	@ (800147c <GUI_DrawLine+0x178>)
 800133c:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	429a      	cmp	r2, r3
 8001342:	f200 8093 	bhi.w	800146c <GUI_DrawLine+0x168>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <GUI_DrawLine+0x178>)
 8001348:	885b      	ldrh	r3, [r3, #2]
 800134a:	883a      	ldrh	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	f200 808d 	bhi.w	800146c <GUI_DrawLine+0x168>
//    DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	429a      	cmp	r2, r3
 8001358:	d905      	bls.n	8001366 <GUI_DrawLine+0x62>
    GUI_Swop(Xstart, Xend);
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff27 	bl	80011b4 <GUI_Swop>
  if (Ystart > Yend)
 8001366:	88ba      	ldrh	r2, [r7, #4]
 8001368:	883b      	ldrh	r3, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d905      	bls.n	800137a <GUI_DrawLine+0x76>
    GUI_Swop(Ystart, Yend);
 800136e:	883a      	ldrh	r2, [r7, #0]
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff1d 	bl	80011b4 <GUI_Swop>

  POINT Xpoint = Xstart;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  POINT Ypoint = Ystart;
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	bfb8      	it	lt
 800138c:	425b      	neglt	r3, r3
 800138e:	61bb      	str	r3, [r7, #24]
  int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001390:	883a      	ldrh	r2, [r7, #0]
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	425b      	negs	r3, r3
 800139e:	617b      	str	r3, [r7, #20]

  // Increment direction, 1 is positive, -1 is counter;
  int XAddway = Xstart < Xend ? 1 : -1;
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d201      	bcs.n	80013ac <GUI_DrawLine+0xa8>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e001      	b.n	80013b0 <GUI_DrawLine+0xac>
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	613b      	str	r3, [r7, #16]
  int YAddway = Ystart < Yend ? 1 : -1;
 80013b2:	88ba      	ldrh	r2, [r7, #4]
 80013b4:	883b      	ldrh	r3, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d201      	bcs.n	80013be <GUI_DrawLine+0xba>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e001      	b.n	80013c2 <GUI_DrawLine+0xbe>
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	60fb      	str	r3, [r7, #12]

  //Cumulative error
  int Esp = dx + dy;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	623b      	str	r3, [r7, #32]
  char Line_Style_Temp = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]

  for (;;) {
    Line_Style_Temp++;
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	3301      	adds	r3, #1
 80013d4:	77fb      	strb	r3, [r7, #31]
    //Painted dotted line, 2 point is really virtual
    if (Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 80013d6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d118      	bne.n	8001410 <GUI_DrawLine+0x10c>
 80013de:	7ffa      	ldrb	r2, [r7, #31]
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <GUI_DrawLine+0x17c>)
 80013e2:	fba3 1302 	umull	r1, r3, r3, r2
 80013e6:	0859      	lsrs	r1, r3, #1
 80013e8:	460b      	mov	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	440b      	add	r3, r1
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <GUI_DrawLine+0x10c>
      //DEBUG("LINE_DOTTED\r\n");
      GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 80013f6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80013fa:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80013fc:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80013fe:	2201      	movs	r2, #1
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001406:	f7ff fef7 	bl	80011f8 <GUI_DrawPoint>
      Line_Style_Temp = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	77fb      	strb	r3, [r7, #31]
 800140e:	e008      	b.n	8001422 <GUI_DrawLine+0x11e>
    } else {
      GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 8001410:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001414:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001416:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001418:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800141a:	2401      	movs	r4, #1
 800141c:	9400      	str	r4, [sp, #0]
 800141e:	f7ff feeb 	bl	80011f8 <GUI_DrawPoint>
    }
    if (2 * Esp >= dy) {
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	dc0c      	bgt.n	8001446 <GUI_DrawLine+0x142>
      if (Xpoint == Xend) break;
 800142c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	429a      	cmp	r2, r3
 8001432:	d01d      	beq.n	8001470 <GUI_DrawLine+0x16c>
      Esp += dy;
 8001434:	6a3a      	ldr	r2, [r7, #32]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4413      	add	r3, r2
 800143a:	623b      	str	r3, [r7, #32]
      Xpoint += XAddway;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	b29a      	uxth	r2, r3
 8001440:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001442:	4413      	add	r3, r2
 8001444:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
    if (2 * Esp <= dx) {
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbbf      	blt.n	80013d0 <GUI_DrawLine+0xcc>
      if (Ypoint == Yend) break;
 8001450:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d00d      	beq.n	8001474 <GUI_DrawLine+0x170>
      Esp += dx;
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4413      	add	r3, r2
 800145e:	623b      	str	r3, [r7, #32]
      Ypoint += YAddway;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	b29a      	uxth	r2, r3
 8001464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001466:	4413      	add	r3, r2
 8001468:	84bb      	strh	r3, [r7, #36]	@ 0x24
    Line_Style_Temp++;
 800146a:	e7b1      	b.n	80013d0 <GUI_DrawLine+0xcc>
    return;
 800146c:	bf00      	nop
 800146e:	e002      	b.n	8001476 <GUI_DrawLine+0x172>
      if (Xpoint == Xend) break;
 8001470:	bf00      	nop
 8001472:	e000      	b.n	8001476 <GUI_DrawLine+0x172>
      if (Ypoint == Yend) break;
 8001474:	bf00      	nop
    }
  }
}
 8001476:	372c      	adds	r7, #44	@ 0x2c
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20000040 	.word	0x20000040
 8001480:	aaaaaaab 	.word	0xaaaaaaab

08001484 <GUI_DrawRectangle>:
  Color  ：The color of the Rectangular segment
  Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b087      	sub	sp, #28
 8001488:	af04      	add	r7, sp, #16
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80014a2:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <GUI_DrawRectangle+0x104>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d868      	bhi.n	800157e <GUI_DrawRectangle+0xfa>
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <GUI_DrawRectangle+0x104>)
 80014ae:	885b      	ldrh	r3, [r3, #2]
 80014b0:	88ba      	ldrh	r2, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d863      	bhi.n	800157e <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <GUI_DrawRectangle+0x104>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d85e      	bhi.n	800157e <GUI_DrawRectangle+0xfa>
      Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <GUI_DrawRectangle+0x104>)
 80014c2:	885b      	ldrh	r3, [r3, #2]
 80014c4:	883a      	ldrh	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d859      	bhi.n	800157e <GUI_DrawRectangle+0xfa>
//    DEBUG("Input exceeds the normal display range\r\n");
    return;
  }

  if (Xstart > Xend)
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d905      	bls.n	80014de <GUI_DrawRectangle+0x5a>
    GUI_Swop(Xstart, Xend);
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe6b 	bl	80011b4 <GUI_Swop>
  if (Ystart > Yend)
 80014de:	88ba      	ldrh	r2, [r7, #4]
 80014e0:	883b      	ldrh	r3, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d905      	bls.n	80014f2 <GUI_DrawRectangle+0x6e>
    GUI_Swop(Ystart, Yend);
 80014e6:	883a      	ldrh	r2, [r7, #0]
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe61 	bl	80011b4 <GUI_Swop>

  if (Filled ) {
 80014f2:	7f3b      	ldrb	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <GUI_DrawRectangle+0x88>
    POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
  #elif HIGH_Speed_Show
    LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 80014f8:	883c      	ldrh	r4, [r7, #0]
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	88b9      	ldrh	r1, [r7, #4]
 80014fe:	88f8      	ldrh	r0, [r7, #6]
 8001500:	8b3b      	ldrh	r3, [r7, #24]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4623      	mov	r3, r4
 8001506:	f7ff fe11 	bl	800112c <LCD_SetArealColor>
 800150a:	e039      	b.n	8001580 <GUI_DrawRectangle+0xfc>
  #endif
  } else {
    GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800150c:	88bc      	ldrh	r4, [r7, #4]
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	88b9      	ldrh	r1, [r7, #4]
 8001512:	88f8      	ldrh	r0, [r7, #6]
 8001514:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2300      	movs	r3, #0
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	8b3b      	ldrh	r3, [r7, #24]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4623      	mov	r3, r4
 8001524:	f7ff feee 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8001528:	883c      	ldrh	r4, [r7, #0]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	88b9      	ldrh	r1, [r7, #4]
 800152e:	88f8      	ldrh	r0, [r7, #6]
 8001530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	2300      	movs	r3, #0
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	8b3b      	ldrh	r3, [r7, #24]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4623      	mov	r3, r4
 8001540:	f7ff fee0 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8001544:	88bc      	ldrh	r4, [r7, #4]
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	8839      	ldrh	r1, [r7, #0]
 800154a:	8878      	ldrh	r0, [r7, #2]
 800154c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2300      	movs	r3, #0
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	8b3b      	ldrh	r3, [r7, #24]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4623      	mov	r3, r4
 800155c:	f7ff fed2 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8001560:	883c      	ldrh	r4, [r7, #0]
 8001562:	88fa      	ldrh	r2, [r7, #6]
 8001564:	8839      	ldrh	r1, [r7, #0]
 8001566:	8878      	ldrh	r0, [r7, #2]
 8001568:	f897 3020 	ldrb.w	r3, [r7, #32]
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4623      	mov	r3, r4
 8001578:	f7ff fec4 	bl	8001304 <GUI_DrawLine>
 800157c:	e000      	b.n	8001580 <GUI_DrawRectangle+0xfc>
    return;
 800157e:	bf00      	nop
  }
}
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	20000040 	.word	0x20000040

0800158c <GUI_DrawCircle>:
  Color     : The color of the ：circle segment
  Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void GUI_DrawCircle(POINT X_Center, POINT Y_Center, LENGTH Radius,
                    COLOR Color, DRAW_FILL  Draw_Fill , DOT_PIXEL Dot_Pixel)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b087      	sub	sp, #28
 8001590:	af02      	add	r7, sp, #8
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4623      	mov	r3, r4
 800159c:	80fb      	strh	r3, [r7, #6]
 800159e:	4603      	mov	r3, r0
 80015a0:	80bb      	strh	r3, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	807b      	strh	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	803b      	strh	r3, [r7, #0]
  if (X_Center > sLCD_DIS.LCD_Dis_Column || Y_Center >= sLCD_DIS.LCD_Dis_Page) {
 80015aa:	4b66      	ldr	r3, [pc, #408]	@ (8001744 <GUI_DrawCircle+0x1b8>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f200 8171 	bhi.w	8001898 <GUI_DrawCircle+0x30c>
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <GUI_DrawCircle+0x1b8>)
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	88ba      	ldrh	r2, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f080 816b 	bcs.w	8001898 <GUI_DrawCircle+0x30c>
    return;
  }

  //Draw a circle from(0, R) as a starting point
  int16_t XCurrent, YCurrent;
  XCurrent = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	81fb      	strh	r3, [r7, #14]
  YCurrent = Radius;
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	81bb      	strh	r3, [r7, #12]

  //Cumulative error,judge the next point of the logo
  int16_t Esp = 3 - (Radius << 1 );
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f1c3 0303 	rsb	r3, r3, #3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	817b      	strh	r3, [r7, #10]

  int16_t sCountY;
  if (Draw_Fill == DRAW_FULL) {
 80015d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	f040 8153 	bne.w	8001888 <GUI_DrawCircle+0x2fc>
    while (XCurrent <= YCurrent ) { //Realistic circles
 80015e2:	e0a6      	b.n	8001732 <GUI_DrawCircle+0x1a6>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	813b      	strh	r3, [r7, #8]
 80015e8:	e075      	b.n	80016d6 <GUI_DrawCircle+0x14a>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//1
 80015ea:	89fa      	ldrh	r2, [r7, #14]
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	4413      	add	r3, r2
 80015f0:	b298      	uxth	r0, r3
 80015f2:	893a      	ldrh	r2, [r7, #8]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	b299      	uxth	r1, r3
 80015fa:	883a      	ldrh	r2, [r7, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	f7ff fdf9 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//2
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	88fa      	ldrh	r2, [r7, #6]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	b298      	uxth	r0, r3
 800160e:	893a      	ldrh	r2, [r7, #8]
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	b299      	uxth	r1, r3
 8001616:	883a      	ldrh	r2, [r7, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	f7ff fdeb 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//3
 8001622:	893b      	ldrh	r3, [r7, #8]
 8001624:	88fa      	ldrh	r2, [r7, #6]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	b298      	uxth	r0, r3
 800162a:	89fa      	ldrh	r2, [r7, #14]
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	b299      	uxth	r1, r3
 8001632:	883a      	ldrh	r2, [r7, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	f7ff fddd 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//4
 800163e:	893b      	ldrh	r3, [r7, #8]
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b298      	uxth	r0, r3
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	88ba      	ldrh	r2, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b299      	uxth	r1, r3
 800164e:	883a      	ldrh	r2, [r7, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	f7ff fdcf 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//5
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b298      	uxth	r0, r3
 8001662:	893b      	ldrh	r3, [r7, #8]
 8001664:	88ba      	ldrh	r2, [r7, #4]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b299      	uxth	r1, r3
 800166a:	883a      	ldrh	r2, [r7, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	f7ff fdc1 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//6
 8001676:	89fa      	ldrh	r2, [r7, #14]
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4413      	add	r3, r2
 800167c:	b298      	uxth	r0, r3
 800167e:	893b      	ldrh	r3, [r7, #8]
 8001680:	88ba      	ldrh	r2, [r7, #4]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	b299      	uxth	r1, r3
 8001686:	883a      	ldrh	r2, [r7, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	f7ff fdb3 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );//7
 8001692:	893a      	ldrh	r2, [r7, #8]
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4413      	add	r3, r2
 8001698:	b298      	uxth	r0, r3
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b299      	uxth	r1, r3
 80016a2:	883a      	ldrh	r2, [r7, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	f7ff fda5 	bl	80011f8 <GUI_DrawPoint>
        GUI_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT );
 80016ae:	893a      	ldrh	r2, [r7, #8]
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	89fa      	ldrh	r2, [r7, #14]
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	b299      	uxth	r1, r3
 80016be:	883a      	ldrh	r2, [r7, #0]
 80016c0:	2301      	movs	r3, #1
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	f7ff fd97 	bl	80011f8 <GUI_DrawPoint>
      for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80016ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	813b      	strh	r3, [r7, #8]
 80016d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dd83      	ble.n	80015ea <GUI_DrawCircle+0x5e>
      }
      if (Esp < 0 )
 80016e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da09      	bge.n	80016fe <GUI_DrawCircle+0x172>
        Esp += 4 * XCurrent + 6;
 80016ea:	89fb      	ldrh	r3, [r7, #14]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	897b      	ldrh	r3, [r7, #10]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3306      	adds	r3, #6
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	817b      	strh	r3, [r7, #10]
 80016fc:	e013      	b.n	8001726 <GUI_DrawCircle+0x19a>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 80016fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	b29a      	uxth	r2, r3
 800170e:	897b      	ldrh	r3, [r7, #10]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	330a      	adds	r3, #10
 8001716:	b29b      	uxth	r3, r3
 8001718:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 800171a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b01      	subs	r3, #1
 8001722:	b29b      	uxth	r3, r3
 8001724:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 8001726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3301      	adds	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) { //Realistic circles
 8001732:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001736:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800173a:	429a      	cmp	r2, r3
 800173c:	f77f af52 	ble.w	80015e4 <GUI_DrawCircle+0x58>
 8001740:	e0ab      	b.n	800189a <GUI_DrawCircle+0x30e>
 8001742:	bf00      	nop
 8001744:	20000040 	.word	0x20000040
    }
  } else { //Draw a hollow circle
    while (XCurrent <= YCurrent ) {
      GUI_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//1
 8001748:	89fa      	ldrh	r2, [r7, #14]
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4413      	add	r3, r2
 800174e:	b298      	uxth	r0, r3
 8001750:	89ba      	ldrh	r2, [r7, #12]
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	b299      	uxth	r1, r3
 8001758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800175c:	883a      	ldrh	r2, [r7, #0]
 800175e:	2401      	movs	r4, #1
 8001760:	9400      	str	r4, [sp, #0]
 8001762:	f7ff fd49 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//2
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	88fa      	ldrh	r2, [r7, #6]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b298      	uxth	r0, r3
 800176e:	89ba      	ldrh	r2, [r7, #12]
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	b299      	uxth	r1, r3
 8001776:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800177a:	883a      	ldrh	r2, [r7, #0]
 800177c:	2401      	movs	r4, #1
 800177e:	9400      	str	r4, [sp, #0]
 8001780:	f7ff fd3a 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//3
 8001784:	89bb      	ldrh	r3, [r7, #12]
 8001786:	88fa      	ldrh	r2, [r7, #6]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b298      	uxth	r0, r3
 800178c:	89fa      	ldrh	r2, [r7, #14]
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	b299      	uxth	r1, r3
 8001794:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001798:	883a      	ldrh	r2, [r7, #0]
 800179a:	2401      	movs	r4, #1
 800179c:	9400      	str	r4, [sp, #0]
 800179e:	f7ff fd2b 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//4
 80017a2:	89bb      	ldrh	r3, [r7, #12]
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	b298      	uxth	r0, r3
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b299      	uxth	r1, r3
 80017b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017b6:	883a      	ldrh	r2, [r7, #0]
 80017b8:	2401      	movs	r4, #1
 80017ba:	9400      	str	r4, [sp, #0]
 80017bc:	f7ff fd1c 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//5
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	b298      	uxth	r0, r3
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	88ba      	ldrh	r2, [r7, #4]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	b299      	uxth	r1, r3
 80017d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017d4:	883a      	ldrh	r2, [r7, #0]
 80017d6:	2401      	movs	r4, #1
 80017d8:	9400      	str	r4, [sp, #0]
 80017da:	f7ff fd0d 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//6
 80017de:	89fa      	ldrh	r2, [r7, #14]
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4413      	add	r3, r2
 80017e4:	b298      	uxth	r0, r3
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	88ba      	ldrh	r2, [r7, #4]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	b299      	uxth	r1, r3
 80017ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017f2:	883a      	ldrh	r2, [r7, #0]
 80017f4:	2401      	movs	r4, #1
 80017f6:	9400      	str	r4, [sp, #0]
 80017f8:	f7ff fcfe 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//7
 80017fc:	89ba      	ldrh	r2, [r7, #12]
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4413      	add	r3, r2
 8001802:	b298      	uxth	r0, r3
 8001804:	89fb      	ldrh	r3, [r7, #14]
 8001806:	88ba      	ldrh	r2, [r7, #4]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b299      	uxth	r1, r3
 800180c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001810:	883a      	ldrh	r2, [r7, #0]
 8001812:	2401      	movs	r4, #1
 8001814:	9400      	str	r4, [sp, #0]
 8001816:	f7ff fcef 	bl	80011f8 <GUI_DrawPoint>
      GUI_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Dot_Pixel, DOT_STYLE_DFT );//0
 800181a:	89ba      	ldrh	r2, [r7, #12]
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	4413      	add	r3, r2
 8001820:	b298      	uxth	r0, r3
 8001822:	89fa      	ldrh	r2, [r7, #14]
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	b299      	uxth	r1, r3
 800182a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800182e:	883a      	ldrh	r2, [r7, #0]
 8001830:	2401      	movs	r4, #1
 8001832:	9400      	str	r4, [sp, #0]
 8001834:	f7ff fce0 	bl	80011f8 <GUI_DrawPoint>

      if (Esp < 0 )
 8001838:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da09      	bge.n	8001854 <GUI_DrawCircle+0x2c8>
        Esp += 4 * XCurrent + 6;
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	b29a      	uxth	r2, r3
 8001846:	897b      	ldrh	r3, [r7, #10]
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	3306      	adds	r3, #6
 800184e:	b29b      	uxth	r3, r3
 8001850:	817b      	strh	r3, [r7, #10]
 8001852:	e013      	b.n	800187c <GUI_DrawCircle+0x2f0>
      else {
        Esp += 10 + 4 * (XCurrent - YCurrent );
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	b29a      	uxth	r2, r3
 8001864:	897b      	ldrh	r3, [r7, #10]
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	330a      	adds	r3, #10
 800186c:	b29b      	uxth	r3, r3
 800186e:	817b      	strh	r3, [r7, #10]
        YCurrent --;
 8001870:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	81bb      	strh	r3, [r7, #12]
      }
      XCurrent ++;
 800187c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001880:	b29b      	uxth	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b29b      	uxth	r3, r3
 8001886:	81fb      	strh	r3, [r7, #14]
    while (XCurrent <= YCurrent ) {
 8001888:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800188c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	f77f af59 	ble.w	8001748 <GUI_DrawCircle+0x1bc>
 8001896:	e000      	b.n	800189a <GUI_DrawCircle+0x30e>
    return;
 8001898:	bf00      	nop
    }
  }
}
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}

080018a0 <GUI_DisChar>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4603      	mov	r3, r0
 80018aa:	81fb      	strh	r3, [r7, #14]
 80018ac:	460b      	mov	r3, r1
 80018ae:	81bb      	strh	r3, [r7, #12]
 80018b0:	4613      	mov	r3, r2
 80018b2:	72fb      	strb	r3, [r7, #11]
  POINT Page, Column;

  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80018b4:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <GUI_DisChar+0x158>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	89fa      	ldrh	r2, [r7, #14]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	f200 8097 	bhi.w	80019ee <GUI_DisChar+0x14e>
 80018c0:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <GUI_DisChar+0x158>)
 80018c2:	885b      	ldrh	r3, [r3, #2]
 80018c4:	89ba      	ldrh	r2, [r7, #12]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	f200 8091 	bhi.w	80019ee <GUI_DisChar+0x14e>
//    DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
    return;
  }

  uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	3b20      	subs	r3, #32
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	88d2      	ldrh	r2, [r2, #6]
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	8892      	ldrh	r2, [r2, #4]
 80018dc:	08d2      	lsrs	r2, r2, #3
 80018de:	b292      	uxth	r2, r2
 80018e0:	4611      	mov	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	8892      	ldrh	r2, [r2, #4]
 80018e6:	f002 0207 	and.w	r2, r2, #7
 80018ea:	b292      	uxth	r2, r2
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2201      	movne	r2, #1
 80018f2:	2200      	moveq	r2, #0
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440a      	add	r2, r1
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
  const unsigned char *ptr = &Font->table[Char_Offset];
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4413      	add	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

  for (Page = 0; Page < Font->Height; Page ++ ) {
 8001908:	2300      	movs	r3, #0
 800190a:	83fb      	strh	r3, [r7, #30]
 800190c:	e069      	b.n	80019e2 <GUI_DisChar+0x142>
    for (Column = 0; Column < Font->Width; Column ++ ) {
 800190e:	2300      	movs	r3, #0
 8001910:	83bb      	strh	r3, [r7, #28]
 8001912:	e054      	b.n	80019be <GUI_DisChar+0x11e>

      //To determine whether the font background color and screen background color is consistent
      if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001914:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191a:	4293      	cmp	r3, r2
 800191c:	d11a      	bne.n	8001954 <GUI_DisChar+0xb4>
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8)))
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	fa42 f303 	asr.w	r3, r2, r3
 8001930:	400b      	ands	r3, r1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d037      	beq.n	80019a6 <GUI_DisChar+0x106>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001936:	89fa      	ldrh	r2, [r7, #14]
 8001938:	8bbb      	ldrh	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	b298      	uxth	r0, r3
 800193e:	89ba      	ldrh	r2, [r7, #12]
 8001940:	8bfb      	ldrh	r3, [r7, #30]
 8001942:	4413      	add	r3, r2
 8001944:	b299      	uxth	r1, r3
 8001946:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001948:	2301      	movs	r3, #1
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2301      	movs	r3, #1
 800194e:	f7ff fc53 	bl	80011f8 <GUI_DrawPoint>
 8001952:	e028      	b.n	80019a6 <GUI_DisChar+0x106>
      } else {
        if (pgm_read_byte(ptr) & (0x80 >> (Column % 8))) {
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	8bbb      	ldrh	r3, [r7, #28]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	fa42 f303 	asr.w	r3, r2, r3
 8001966:	400b      	ands	r3, r1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00e      	beq.n	800198a <GUI_DisChar+0xea>
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800196c:	89fa      	ldrh	r2, [r7, #14]
 800196e:	8bbb      	ldrh	r3, [r7, #28]
 8001970:	4413      	add	r3, r2
 8001972:	b298      	uxth	r0, r3
 8001974:	89ba      	ldrh	r2, [r7, #12]
 8001976:	8bfb      	ldrh	r3, [r7, #30]
 8001978:	4413      	add	r3, r2
 800197a:	b299      	uxth	r1, r3
 800197c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800197e:	2301      	movs	r3, #1
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	f7ff fc38 	bl	80011f8 <GUI_DrawPoint>
 8001988:	e00d      	b.n	80019a6 <GUI_DisChar+0x106>
        } else {
          GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	8bbb      	ldrh	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	b298      	uxth	r0, r3
 8001992:	89ba      	ldrh	r2, [r7, #12]
 8001994:	8bfb      	ldrh	r3, [r7, #30]
 8001996:	4413      	add	r3, r2
 8001998:	b299      	uxth	r1, r3
 800199a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800199c:	2301      	movs	r3, #1
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2301      	movs	r3, #1
 80019a2:	f7ff fc29 	bl	80011f8 <GUI_DrawPoint>
        }
      }
      //One pixel is 8 bits
      if (Column % 8 == 7)
 80019a6:	8bbb      	ldrh	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d102      	bne.n	80019b8 <GUI_DisChar+0x118>
        ptr++;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]
    for (Column = 0; Column < Font->Width; Column ++ ) {
 80019b8:	8bbb      	ldrh	r3, [r7, #28]
 80019ba:	3301      	adds	r3, #1
 80019bc:	83bb      	strh	r3, [r7, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	889b      	ldrh	r3, [r3, #4]
 80019c2:	8bba      	ldrh	r2, [r7, #28]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3a5      	bcc.n	8001914 <GUI_DisChar+0x74>
    }/* Write a line */
    if (Font->Width % 8 != 0)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	889b      	ldrh	r3, [r3, #4]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <GUI_DisChar+0x13c>
      ptr++;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	3301      	adds	r3, #1
 80019da:	61bb      	str	r3, [r7, #24]
  for (Page = 0; Page < Font->Height; Page ++ ) {
 80019dc:	8bfb      	ldrh	r3, [r7, #30]
 80019de:	3301      	adds	r3, #1
 80019e0:	83fb      	strh	r3, [r7, #30]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	88db      	ldrh	r3, [r3, #6]
 80019e6:	8bfa      	ldrh	r2, [r7, #30]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d390      	bcc.n	800190e <GUI_DisChar+0x6e>
 80019ec:	e000      	b.n	80019f0 <GUI_DisChar+0x150>
    return;
 80019ee:	bf00      	nop
  }/* Write all */
}
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000040 	.word	0x20000040

080019fc <GUI_DisString_EN>:
  Color_Background : Select the background color of the English character
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4603      	mov	r3, r0
 8001a08:	81fb      	strh	r3, [r7, #14]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	81bb      	strh	r3, [r7, #12]
  POINT Xpoint = Xstart;
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	82fb      	strh	r3, [r7, #22]
  POINT Ypoint = Ystart;
 8001a12:	89bb      	ldrh	r3, [r7, #12]
 8001a14:	82bb      	strh	r3, [r7, #20]

  if (Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <GUI_DisString_EN+0xa0>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	89fa      	ldrh	r2, [r7, #14]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d838      	bhi.n	8001a92 <GUI_DisString_EN+0x96>
 8001a20:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <GUI_DisString_EN+0xa0>)
 8001a22:	885b      	ldrh	r3, [r3, #2]
 8001a24:	89ba      	ldrh	r2, [r7, #12]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d833      	bhi.n	8001a92 <GUI_DisString_EN+0x96>
//    DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
    return;
  }

  while (* pString != '\0') {
 8001a2a:	e02d      	b.n	8001a88 <GUI_DisString_EN+0x8c>
    //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
    if ((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 8001a2c:	8afb      	ldrh	r3, [r7, #22]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	8892      	ldrh	r2, [r2, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a19      	ldr	r2, [pc, #100]	@ (8001a9c <GUI_DisString_EN+0xa0>)
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	dd06      	ble.n	8001a4a <GUI_DisString_EN+0x4e>
      Xpoint = Xstart;
 8001a3c:	89fb      	ldrh	r3, [r7, #14]
 8001a3e:	82fb      	strh	r3, [r7, #22]
      Ypoint += Font->Height;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	88da      	ldrh	r2, [r3, #6]
 8001a44:	8abb      	ldrh	r3, [r7, #20]
 8001a46:	4413      	add	r3, r2
 8001a48:	82bb      	strh	r3, [r7, #20]
    }

    // If the Y direction is full, reposition to(Xstart, Ystart)
    if ((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 8001a4a:	8abb      	ldrh	r3, [r7, #20]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	88d2      	ldrh	r2, [r2, #6]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <GUI_DisString_EN+0xa0>)
 8001a54:	8852      	ldrh	r2, [r2, #2]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	dd03      	ble.n	8001a62 <GUI_DisString_EN+0x66>
      Xpoint = Xstart;
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	82fb      	strh	r3, [r7, #22]
      Ypoint = Ystart;
 8001a5e:	89bb      	ldrh	r3, [r7, #12]
 8001a60:	82bb      	strh	r3, [r7, #20]
    }
    GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	8ab9      	ldrh	r1, [r7, #20]
 8001a68:	8af8      	ldrh	r0, [r7, #22]
 8001a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	8c3b      	ldrh	r3, [r7, #32]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f7ff ff14 	bl	80018a0 <GUI_DisChar>

    //The next character of the address
    pString ++;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]

    //The next word of the abscissa increases the font of the broadband
    Xpoint += Font->Width;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	889a      	ldrh	r2, [r3, #4]
 8001a82:	8afb      	ldrh	r3, [r7, #22]
 8001a84:	4413      	add	r3, r2
 8001a86:	82fb      	strh	r3, [r7, #22]
  while (* pString != '\0') {
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1cd      	bne.n	8001a2c <GUI_DisString_EN+0x30>
 8001a90:	e000      	b.n	8001a94 <GUI_DisString_EN+0x98>
    return;
 8001a92:	bf00      	nop
  }
}
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000040 	.word	0x20000040

08001aa0 <GUI_DisNum>:
  Color_Foreground : Select the foreground color of the English character
******************************************************************************/
#define  ARRAY_LEN 255
void GUI_DisNum(POINT Xpoint, POINT Ypoint, int32_t Nummber,
                sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001aa6:	af02      	add	r7, sp, #8
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	4608      	mov	r0, r1
 8001aac:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8001ab0:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 8001ab4:	600a      	str	r2, [r1, #0]
 8001ab6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001aba:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ac4:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001ac8:	4622      	mov	r2, r4
 8001aca:	801a      	strh	r2, [r3, #0]
 8001acc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ad0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	801a      	strh	r2, [r3, #0]

  int16_t Num_Bit = 0, Str_Bit = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
  uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8001ae4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	3304      	adds	r3, #4
 8001af2:	22fb      	movs	r2, #251	@ 0xfb
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fedc 	bl	80048b4 <memset>
 8001afc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b00:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	22fb      	movs	r2, #251	@ 0xfb
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fed0 	bl	80048b4 <memset>
  uint8_t *pStr = Str_Array;
 8001b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b18:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

  if (Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8001b1c:	4b45      	ldr	r3, [pc, #276]	@ (8001c34 <GUI_DisNum+0x194>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001b24:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8001b28:	8812      	ldrh	r2, [r2, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d87d      	bhi.n	8001c2a <GUI_DisNum+0x18a>
 8001b2e:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <GUI_DisNum+0x194>)
 8001b30:	885b      	ldrh	r3, [r3, #2]
 8001b32:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001b36:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d874      	bhi.n	8001c2a <GUI_DisNum+0x18a>
//    DEBUG("GUI_DisNum Input exceeds the normal display range\r\n");
    return;
  }

  //Converts a number to a string
  while (Nummber) {
 8001b40:	e030      	b.n	8001ba4 <GUI_DisNum+0x104>
    Num_Array[Num_Bit] = Nummber % 10 + '0';
 8001b42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b46:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <GUI_DisNum+0x198>)
 8001b4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b52:	1099      	asrs	r1, r3, #2
 8001b54:	17d3      	asrs	r3, r2, #31
 8001b56:	1ac9      	subs	r1, r1, r3
 8001b58:	460b      	mov	r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	1ad1      	subs	r1, r2, r3
 8001b62:	b2ca      	uxtb	r2, r1
 8001b64:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001b68:	3230      	adds	r2, #48	@ 0x30
 8001b6a:	b2d1      	uxtb	r1, r2
 8001b6c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001b70:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8001b74:	54d1      	strb	r1, [r2, r3]
    Num_Bit++;
 8001b76:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    Nummber /= 10;
 8001b84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b88:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8001b8c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b90:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4928      	ldr	r1, [pc, #160]	@ (8001c38 <GUI_DisNum+0x198>)
 8001b98:	fb81 0103 	smull	r0, r1, r1, r3
 8001b9c:	1089      	asrs	r1, r1, #2
 8001b9e:	17db      	asrs	r3, r3, #31
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	6013      	str	r3, [r2, #0]
  while (Nummber) {
 8001ba4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ba8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1c7      	bne.n	8001b42 <GUI_DisNum+0xa2>
  }

  //The string is inverted
  while (Num_Bit > 0) {
 8001bb2:	e01c      	b.n	8001bee <GUI_DisNum+0x14e>
    Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8001bb4:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8001bbe:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8001bc2:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 8001bc6:	5c89      	ldrb	r1, [r1, r2]
 8001bc8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001bcc:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001bd0:	54d1      	strb	r1, [r2, r3]
    Str_Bit ++;
 8001bd2:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    Num_Bit --;
 8001be0:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
  while (Num_Bit > 0) {
 8001bee:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	@ 0x216
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	dcde      	bgt.n	8001bb4 <GUI_DisNum+0x114>
  }

  //show
  GUI_DisString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground );
 8001bf6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bfa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bfe:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001c02:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8001c06:	8811      	ldrh	r1, [r2, #0]
 8001c08:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001c0c:	f2a2 220a 	subw	r2, r2, #522	@ 0x20a
 8001c10:	8810      	ldrh	r0, [r2, #0]
 8001c12:	f8b7 222c 	ldrh.w	r2, [r7, #556]	@ 0x22c
 8001c16:	9201      	str	r2, [sp, #4]
 8001c18:	f8b7 2228 	ldrh.w	r2, [r7, #552]	@ 0x228
 8001c1c:	9200      	str	r2, [sp, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001c24:	f7ff feea 	bl	80019fc <GUI_DisString_EN>
 8001c28:	e000      	b.n	8001c2c <GUI_DisNum+0x18c>
    return;
 8001c2a:	bf00      	nop
}
 8001c2c:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	20000040 	.word	0x20000040
 8001c38:	66666667 	.word	0x66666667

08001c3c <GUI_Show>:
  Draw Olympic Rings,
  Display String,
  Show Pic
******************************************************************************/
void GUI_Show(void)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b090      	sub	sp, #64	@ 0x40
 8001c40:	af04      	add	r7, sp, #16
  GUI_Clear(WHITE);
 8001c42:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c46:	f7ff fac9 	bl	80011dc <GUI_Clear>
  if (sLCD_DIS.LCD_Dis_Column > sLCD_DIS.LCD_Dis_Page) { //Horizontal screen display
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e7c <GUI_Show+0x240>)
 8001c4c:	881a      	ldrh	r2, [r3, #0]
 8001c4e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e7c <GUI_Show+0x240>)
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	f240 8122 	bls.w	8001e9c <GUI_Show+0x260>

//    DEBUG("Draw Line\r\n");
    GUI_DrawLine(0, 10, LCD_WIDTH, 10, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001c58:	2302      	movs	r3, #2
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	230a      	movs	r3, #10
 8001c68:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c6c:	210a      	movs	r1, #10
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff fb48 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(0, 20, LCD_WIDTH, 20, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 8001c74:	2301      	movs	r3, #1
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2314      	movs	r3, #20
 8001c84:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c88:	2114      	movs	r1, #20
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fb3a 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(0, 300, LCD_WIDTH, 300, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 8001c90:	2301      	movs	r3, #1
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ca2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ca6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fb2a 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(0, 310, LCD_WIDTH, 310, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001cc2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001cc6:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fb1a 	bl	8001304 <GUI_DrawLine>

//    DEBUG("Draw Rectangle\r\n");
    GUI_DrawRectangle(10, 30, sLCD_DIS.LCD_Dis_Column - 10, sLCD_DIS.LCD_Dis_Page - 30, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e7c <GUI_Show+0x240>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	3b0a      	subs	r3, #10
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b68      	ldr	r3, [pc, #416]	@ (8001e7c <GUI_Show+0x240>)
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	3b1e      	subs	r3, #30
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	9102      	str	r1, [sp, #8]
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	9101      	str	r1, [sp, #4]
 8001ce8:	211f      	movs	r1, #31
 8001cea:	9100      	str	r1, [sp, #0]
 8001cec:	211e      	movs	r1, #30
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f7ff fbc8 	bl	8001484 <GUI_DrawRectangle>
    GUI_DrawRectangle(20, 40, sLCD_DIS.LCD_Dis_Column - 20, 60, BLUE, DRAW_FULL, DOT_PIXEL_DFT);
 8001cf4:	4b61      	ldr	r3, [pc, #388]	@ (8001e7c <GUI_Show+0x240>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	3b14      	subs	r3, #20
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2301      	movs	r3, #1
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	231f      	movs	r3, #31
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	233c      	movs	r3, #60	@ 0x3c
 8001d0a:	2128      	movs	r1, #40	@ 0x28
 8001d0c:	2014      	movs	r0, #20
 8001d0e:	f7ff fbb9 	bl	8001484 <GUI_DrawRectangle>

//    DEBUG("Draw Olympic Rings\r\n");
    uint16_t Cx1 = 190, Cy1 = 240, Cr = 20;
 8001d12:	23be      	movs	r3, #190	@ 0xbe
 8001d14:	833b      	strh	r3, [r7, #24]
 8001d16:	23f0      	movs	r3, #240	@ 0xf0
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	2314      	movs	r3, #20
 8001d1c:	82bb      	strh	r3, [r7, #20]
    uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8001d1e:	8b3b      	ldrh	r3, [r7, #24]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fceb 	bl	80006fc <__aeabi_i2d>
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	8abb      	ldrh	r3, [r7, #20]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fce5 	bl	80006fc <__aeabi_i2d>
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b52      	ldr	r3, [pc, #328]	@ (8001e80 <GUI_Show+0x244>)
 8001d38:	f7fe fa64 	bl	8000204 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fb8e 	bl	8000464 <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe fd3e 	bl	80007d0 <__aeabi_d2uiz>
 8001d54:	4603      	mov	r3, r0
 8001d56:	827b      	strh	r3, [r7, #18]
 8001d58:	8afb      	ldrh	r3, [r7, #22]
 8001d5a:	823b      	strh	r3, [r7, #16]
    uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8001d5c:	8abb      	ldrh	r3, [r7, #20]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	8b3b      	ldrh	r3, [r7, #24]
 8001d68:	4413      	add	r3, r2
 8001d6a:	81fb      	strh	r3, [r7, #14]
 8001d6c:	8afb      	ldrh	r3, [r7, #22]
 8001d6e:	81bb      	strh	r3, [r7, #12]
    uint16_t Cx4 = ( Cx1 + Cx2 ) / 2, Cy4 = Cy1 + Cr;
 8001d70:	8b3a      	ldrh	r2, [r7, #24]
 8001d72:	8a7b      	ldrh	r3, [r7, #18]
 8001d74:	4413      	add	r3, r2
 8001d76:	0fda      	lsrs	r2, r3, #31
 8001d78:	4413      	add	r3, r2
 8001d7a:	105b      	asrs	r3, r3, #1
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	8afa      	ldrh	r2, [r7, #22]
 8001d80:	8abb      	ldrh	r3, [r7, #20]
 8001d82:	4413      	add	r3, r2
 8001d84:	813b      	strh	r3, [r7, #8]
    uint16_t Cx5 = ( Cx2 + Cx3 ) / 2, Cy5 = Cy1 + Cr;
 8001d86:	8a7a      	ldrh	r2, [r7, #18]
 8001d88:	89fb      	ldrh	r3, [r7, #14]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	0fda      	lsrs	r2, r3, #31
 8001d8e:	4413      	add	r3, r2
 8001d90:	105b      	asrs	r3, r3, #1
 8001d92:	80fb      	strh	r3, [r7, #6]
 8001d94:	8afa      	ldrh	r2, [r7, #22]
 8001d96:	8abb      	ldrh	r3, [r7, #20]
 8001d98:	4413      	add	r3, r2
 8001d9a:	80bb      	strh	r3, [r7, #4]

    GUI_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001d9c:	8aba      	ldrh	r2, [r7, #20]
 8001d9e:	8af9      	ldrh	r1, [r7, #22]
 8001da0:	8b38      	ldrh	r0, [r7, #24]
 8001da2:	2302      	movs	r3, #2
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2300      	movs	r3, #0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	231f      	movs	r3, #31
 8001dac:	f7ff fbee 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001db0:	8aba      	ldrh	r2, [r7, #20]
 8001db2:	8a39      	ldrh	r1, [r7, #16]
 8001db4:	8a78      	ldrh	r0, [r7, #18]
 8001db6:	2302      	movs	r3, #2
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f7ff fbe4 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001dc4:	8aba      	ldrh	r2, [r7, #20]
 8001dc6:	89b9      	ldrh	r1, [r7, #12]
 8001dc8:	89f8      	ldrh	r0, [r7, #14]
 8001dca:	2302      	movs	r3, #2
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dd6:	f7ff fbd9 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001dda:	8aba      	ldrh	r2, [r7, #20]
 8001ddc:	8939      	ldrh	r1, [r7, #8]
 8001dde:	8978      	ldrh	r0, [r7, #10]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2300      	movs	r3, #0
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dec:	f7ff fbce 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001df0:	8aba      	ldrh	r2, [r7, #20]
 8001df2:	88b9      	ldrh	r1, [r7, #4]
 8001df4:	88f8      	ldrh	r0, [r7, #6]
 8001df6:	2302      	movs	r3, #2
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e02:	f7ff fbc3 	bl	800158c <GUI_DrawCircle>

//    DEBUG("Draw Realistic circles\r\n");
    GUI_DrawCircle(50, 250, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 8001e06:	2301      	movs	r3, #1
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001e12:	221e      	movs	r2, #30
 8001e14:	21fa      	movs	r1, #250	@ 0xfa
 8001e16:	2032      	movs	r0, #50	@ 0x32
 8001e18:	f7ff fbb8 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle(sLCD_DIS.LCD_Dis_Column - 50, 250, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 8001e1c:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <GUI_Show+0x240>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	3b32      	subs	r3, #50	@ 0x32
 8001e22:	b298      	uxth	r0, r3
 8001e24:	2301      	movs	r3, #1
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001e30:	221e      	movs	r2, #30
 8001e32:	21fa      	movs	r1, #250	@ 0xfa
 8001e34:	f7ff fbaa 	bl	800158c <GUI_DrawCircle>

//    DEBUG("Display String\r\n");
    GUI_DisString_EN(80, 80, "TFT STM32 Electronic", &Font24, LCD_BACKGROUND, BLUE);
 8001e38:	231f      	movs	r3, #31
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <GUI_Show+0x248>)
 8001e44:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <GUI_Show+0x24c>)
 8001e46:	2150      	movs	r1, #80	@ 0x50
 8001e48:	2050      	movs	r0, #80	@ 0x50
 8001e4a:	f7ff fdd7 	bl	80019fc <GUI_DisString_EN>
    GUI_DisString_EN(80, 120, "3.5inch TFTLCD", &Font20, RED, BLUE);
 8001e4e:	231f      	movs	r3, #31
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <GUI_Show+0x250>)
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <GUI_Show+0x254>)
 8001e5c:	2178      	movs	r1, #120	@ 0x78
 8001e5e:	2050      	movs	r0, #80	@ 0x50
 8001e60:	f7ff fdcc 	bl	80019fc <GUI_DisString_EN>

//    DEBUG("Display Nummber\r\n");
    GUI_DisNum(80, 150, 1234567890, &Font16, LCD_BACKGROUND, BLUE);
 8001e64:	231f      	movs	r3, #31
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <GUI_Show+0x258>)
 8001e70:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <GUI_Show+0x25c>)
 8001e72:	2196      	movs	r1, #150	@ 0x96
 8001e74:	2050      	movs	r0, #80	@ 0x50
 8001e76:	f7ff fe13 	bl	8001aa0 <GUI_DisNum>

//    DEBUG("Display Nummber\r\n");
    GUI_DisNum(40, 210, 1234567890, &Font16, LCD_BACKGROUND, BLUE);

  }
}
 8001e7a:	e12b      	b.n	80020d4 <GUI_Show+0x498>
 8001e7c:	20000040 	.word	0x20000040
 8001e80:	40040000 	.word	0x40040000
 8001e84:	20000010 	.word	0x20000010
 8001e88:	08004930 	.word	0x08004930
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	08004948 	.word	0x08004948
 8001e94:	20000000 	.word	0x20000000
 8001e98:	499602d2 	.word	0x499602d2
    GUI_DrawLine(0, 10, sLCD_DIS.LCD_Dis_Column , 10, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80020dc <GUI_Show+0x4a0>)
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	230a      	movs	r3, #10
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fa26 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(0, 20, sLCD_DIS.LCD_Dis_Column , 20, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 8001eb8:	4b88      	ldr	r3, [pc, #544]	@ (80020dc <GUI_Show+0x4a0>)
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2314      	movs	r3, #20
 8001ecc:	2114      	movs	r1, #20
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fa18 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 20, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page - 20, RED, LINE_DOTTED, DOT_PIXEL_DFT);
 8001ed4:	4b81      	ldr	r3, [pc, #516]	@ (80020dc <GUI_Show+0x4a0>)
 8001ed6:	885b      	ldrh	r3, [r3, #2]
 8001ed8:	3b14      	subs	r3, #20
 8001eda:	b299      	uxth	r1, r3
 8001edc:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <GUI_Show+0x4a0>)
 8001ede:	881a      	ldrh	r2, [r3, #0]
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80020dc <GUI_Show+0x4a0>)
 8001ee2:	885b      	ldrh	r3, [r3, #2]
 8001ee4:	3b14      	subs	r3, #20
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2001      	movs	r0, #1
 8001eea:	9002      	str	r0, [sp, #8]
 8001eec:	2001      	movs	r0, #1
 8001eee:	9001      	str	r0, [sp, #4]
 8001ef0:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001ef4:	9000      	str	r0, [sp, #0]
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fa04 	bl	8001304 <GUI_DrawLine>
    GUI_DrawLine(0, sLCD_DIS.LCD_Dis_Page - 10, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page - 10, RED, LINE_SOLID, DOT_PIXEL_2X2);
 8001efc:	4b77      	ldr	r3, [pc, #476]	@ (80020dc <GUI_Show+0x4a0>)
 8001efe:	885b      	ldrh	r3, [r3, #2]
 8001f00:	3b0a      	subs	r3, #10
 8001f02:	b299      	uxth	r1, r3
 8001f04:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <GUI_Show+0x4a0>)
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	4b74      	ldr	r3, [pc, #464]	@ (80020dc <GUI_Show+0x4a0>)
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	3b0a      	subs	r3, #10
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2002      	movs	r0, #2
 8001f12:	9002      	str	r0, [sp, #8]
 8001f14:	2000      	movs	r0, #0
 8001f16:	9001      	str	r0, [sp, #4]
 8001f18:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001f1c:	9000      	str	r0, [sp, #0]
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff f9f0 	bl	8001304 <GUI_DrawLine>
    GUI_DrawRectangle(10, 30, sLCD_DIS.LCD_Dis_Column - 10, sLCD_DIS.LCD_Dis_Page - 30, BLUE, DRAW_EMPTY, DOT_PIXEL_DFT);
 8001f24:	4b6d      	ldr	r3, [pc, #436]	@ (80020dc <GUI_Show+0x4a0>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	3b0a      	subs	r3, #10
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <GUI_Show+0x4a0>)
 8001f2e:	885b      	ldrh	r3, [r3, #2]
 8001f30:	3b1e      	subs	r3, #30
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2101      	movs	r1, #1
 8001f36:	9102      	str	r1, [sp, #8]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	9101      	str	r1, [sp, #4]
 8001f3c:	211f      	movs	r1, #31
 8001f3e:	9100      	str	r1, [sp, #0]
 8001f40:	211e      	movs	r1, #30
 8001f42:	200a      	movs	r0, #10
 8001f44:	f7ff fa9e 	bl	8001484 <GUI_DrawRectangle>
    GUI_DrawRectangle(20, 40, sLCD_DIS.LCD_Dis_Column - 20, 60, BLUE, DRAW_FULL, DOT_PIXEL_DFT);
 8001f48:	4b64      	ldr	r3, [pc, #400]	@ (80020dc <GUI_Show+0x4a0>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	3b14      	subs	r3, #20
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2301      	movs	r3, #1
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	231f      	movs	r3, #31
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	233c      	movs	r3, #60	@ 0x3c
 8001f5e:	2128      	movs	r1, #40	@ 0x28
 8001f60:	2014      	movs	r0, #20
 8001f62:	f7ff fa8f 	bl	8001484 <GUI_DrawRectangle>
    uint16_t Cx1 = 120, Cy1 = 300, Cr = 20;
 8001f66:	2378      	movs	r3, #120	@ 0x78
 8001f68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001f6a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001f6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001f70:	2314      	movs	r3, #20
 8001f72:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t Cx2 = Cx1 + (2.5 * Cr), Cy2 = Cy1;
 8001f74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fbc0 	bl	80006fc <__aeabi_i2d>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	460d      	mov	r5, r1
 8001f80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fbba 	bl	80006fc <__aeabi_i2d>
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b54      	ldr	r3, [pc, #336]	@ (80020e0 <GUI_Show+0x4a4>)
 8001f8e:	f7fe f939 	bl	8000204 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe fa63 	bl	8000464 <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fc13 	bl	80007d0 <__aeabi_d2uiz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001fae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001fb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t Cx3 = Cx1 + (5 * Cr), Cy3 = Cy1;
 8001fb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001fbe:	4413      	add	r3, r2
 8001fc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001fc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001fc4:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t Cx4 = ( Cx1 + Cx2 ) / 2, Cy4 = Cy1 + Cr;
 8001fc6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001fc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001fca:	4413      	add	r3, r2
 8001fcc:	0fda      	lsrs	r2, r3, #31
 8001fce:	4413      	add	r3, r2
 8001fd0:	105b      	asrs	r3, r3, #1
 8001fd2:	843b      	strh	r3, [r7, #32]
 8001fd4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001fd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001fd8:	4413      	add	r3, r2
 8001fda:	83fb      	strh	r3, [r7, #30]
    uint16_t Cx5 = ( Cx2 + Cx3 ) / 2, Cy5 = Cy1 + Cr;
 8001fdc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001fde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fe0:	4413      	add	r3, r2
 8001fe2:	0fda      	lsrs	r2, r3, #31
 8001fe4:	4413      	add	r3, r2
 8001fe6:	105b      	asrs	r3, r3, #1
 8001fe8:	83bb      	strh	r3, [r7, #28]
 8001fea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001fec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001fee:	4413      	add	r3, r2
 8001ff0:	837b      	strh	r3, [r7, #26]
    GUI_DrawCircle( Cx1, Cy1, Cr, BLUE, DRAW_EMPTY, DOT_PIXEL_2X2);
 8001ff2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001ff4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001ff6:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	231f      	movs	r3, #31
 8002002:	f7ff fac3 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx2, Cy2, Cr, BLACK, DRAW_EMPTY, DOT_PIXEL_2X2);
 8002006:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002008:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800200a:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 800200c:	2302      	movs	r3, #2
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	f7ff fab9 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx3, Cy3, Cr, RED, DRAW_EMPTY, DOT_PIXEL_2X2);
 800201a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800201c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800201e:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8002020:	2302      	movs	r3, #2
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800202c:	f7ff faae 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx4, Cy4, Cr, YELLOW, DRAW_EMPTY, DOT_PIXEL_2X2);
 8002030:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002032:	8bf9      	ldrh	r1, [r7, #30]
 8002034:	8c38      	ldrh	r0, [r7, #32]
 8002036:	2302      	movs	r3, #2
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002042:	f7ff faa3 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle( Cx5, Cy5, Cr, GREEN, DRAW_EMPTY, DOT_PIXEL_2X2);
 8002046:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002048:	8b79      	ldrh	r1, [r7, #26]
 800204a:	8bb8      	ldrh	r0, [r7, #28]
 800204c:	2302      	movs	r3, #2
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2300      	movs	r3, #0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002058:	f7ff fa98 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle(50, 400, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 800205c:	2301      	movs	r3, #1
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2301      	movs	r3, #1
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002068:	221e      	movs	r2, #30
 800206a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800206e:	2032      	movs	r0, #50	@ 0x32
 8002070:	f7ff fa8c 	bl	800158c <GUI_DrawCircle>
    GUI_DrawCircle(sLCD_DIS.LCD_Dis_Column - 50, 400, 30, CYAN, DRAW_FULL, DOT_PIXEL_DFT);
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <GUI_Show+0x4a0>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	3b32      	subs	r3, #50	@ 0x32
 800207a:	b298      	uxth	r0, r3
 800207c:	2301      	movs	r3, #1
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2301      	movs	r3, #1
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002088:	221e      	movs	r2, #30
 800208a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800208e:	f7ff fa7d 	bl	800158c <GUI_DrawCircle>
    GUI_DisString_EN(40, 120, "WaveShare Electronic", &Font24, LCD_BACKGROUND, BLUE);
 8002092:	231f      	movs	r3, #31
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <GUI_Show+0x4a8>)
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <GUI_Show+0x4ac>)
 80020a0:	2178      	movs	r1, #120	@ 0x78
 80020a2:	2028      	movs	r0, #40	@ 0x28
 80020a4:	f7ff fcaa 	bl	80019fc <GUI_DisString_EN>
    GUI_DisString_EN(40, 180, "3.5inch TFTLCD", &Font20, RED, BLUE);
 80020a8:	231f      	movs	r3, #31
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <GUI_Show+0x4b0>)
 80020b4:	4a0e      	ldr	r2, [pc, #56]	@ (80020f0 <GUI_Show+0x4b4>)
 80020b6:	21b4      	movs	r1, #180	@ 0xb4
 80020b8:	2028      	movs	r0, #40	@ 0x28
 80020ba:	f7ff fc9f 	bl	80019fc <GUI_DisString_EN>
    GUI_DisNum(40, 210, 1234567890, &Font16, LCD_BACKGROUND, BLUE);
 80020be:	231f      	movs	r3, #31
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <GUI_Show+0x4b8>)
 80020ca:	4a0b      	ldr	r2, [pc, #44]	@ (80020f8 <GUI_Show+0x4bc>)
 80020cc:	21d2      	movs	r1, #210	@ 0xd2
 80020ce:	2028      	movs	r0, #40	@ 0x28
 80020d0:	f7ff fce6 	bl	8001aa0 <GUI_DisNum>
}
 80020d4:	bf00      	nop
 80020d6:	3730      	adds	r7, #48	@ 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bdb0      	pop	{r4, r5, r7, pc}
 80020dc:	20000040 	.word	0x20000040
 80020e0:	40040000 	.word	0x40040000
 80020e4:	20000010 	.word	0x20000010
 80020e8:	08004958 	.word	0x08004958
 80020ec:	20000008 	.word	0x20000008
 80020f0:	08004948 	.word	0x08004948
 80020f4:	20000000 	.word	0x20000000
 80020f8:	499602d2 	.word	0x499602d2

080020fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002102:	f000 fa95 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002106:	f000 f819 	bl	800213c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210a:	f000 f91d 	bl	8002348 <MX_GPIO_Init>
  MX_RTC_Init();
 800210e:	f000 f88b 	bl	8002228 <MX_RTC_Init>
  MX_SPI1_Init();
 8002112:	f000 f8e3 	bl	80022dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;
 8002116:	2306      	movs	r3, #6
 8002118:	71fb      	strb	r3, [r7, #7]
  LCD_Init( Lcd_ScanDir, 200);
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	21c8      	movs	r1, #200	@ 0xc8
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff3c 	bl	8000f9c <LCD_Init>
  LCD_Clear(YELLOW);
 8002124:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002128:	f7ff f82e 	bl	8001188 <LCD_Clear>
  LCD_Clear(LCD_BACKGROUND);
 800212c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002130:	f7ff f82a 	bl	8001188 <LCD_Clear>
  GUI_Show();
 8002134:	f7ff fd82 	bl	8001c3c <GUI_Show>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <main+0x3c>

0800213c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b094      	sub	sp, #80	@ 0x50
 8002140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	2234      	movs	r2, #52	@ 0x34
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fbb2 	bl	80048b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <SystemClock_Config+0xe4>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	4a2d      	ldr	r2, [pc, #180]	@ (8002220 <SystemClock_Config+0xe4>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002170:	4b2b      	ldr	r3, [pc, #172]	@ (8002220 <SystemClock_Config+0xe4>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800217c:	2300      	movs	r3, #0
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <SystemClock_Config+0xe8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a27      	ldr	r2, [pc, #156]	@ (8002224 <SystemClock_Config+0xe8>)
 8002186:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b25      	ldr	r3, [pc, #148]	@ (8002224 <SystemClock_Config+0xe8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002198:	230a      	movs	r3, #10
 800219a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a0:	2301      	movs	r3, #1
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a4:	2310      	movs	r3, #16
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021a8:	2301      	movs	r3, #1
 80021aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ac:	2302      	movs	r3, #2
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021b4:	2308      	movs	r3, #8
 80021b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80021b8:	23b4      	movs	r3, #180	@ 0xb4
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021bc:	2302      	movs	r3, #2
 80021be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 fbe9 	bl	80039a4 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80021d8:	f000 f91e 	bl	8002418 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021dc:	f000 fd52 	bl	8002c84 <HAL_PWREx_EnableOverDrive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80021e6:	f000 f917 	bl	8002418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ea:	230f      	movs	r3, #15
 80021ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ee:	2302      	movs	r3, #2
 80021f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002200:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2105      	movs	r1, #5
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fd8b 	bl	8002d24 <HAL_RCC_ClockConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002214:	f000 f900 	bl	8002418 <Error_Handler>
  }
}
 8002218:	bf00      	nop
 800221a:	3750      	adds	r7, #80	@ 0x50
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800223c:	2300      	movs	r3, #0
 800223e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002240:	4b24      	ldr	r3, [pc, #144]	@ (80022d4 <MX_RTC_Init+0xac>)
 8002242:	4a25      	ldr	r2, [pc, #148]	@ (80022d8 <MX_RTC_Init+0xb0>)
 8002244:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <MX_RTC_Init+0xac>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800224c:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <MX_RTC_Init+0xac>)
 800224e:	227f      	movs	r2, #127	@ 0x7f
 8002250:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <MX_RTC_Init+0xac>)
 8002254:	22ff      	movs	r2, #255	@ 0xff
 8002256:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002258:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <MX_RTC_Init+0xac>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <MX_RTC_Init+0xac>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <MX_RTC_Init+0xac>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800226a:	481a      	ldr	r0, [pc, #104]	@ (80022d4 <MX_RTC_Init+0xac>)
 800226c:	f001 fe38 	bl	8003ee0 <HAL_RTC_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002276:	f000 f8cf 	bl	8002418 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 800227a:	2303      	movs	r3, #3
 800227c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 800227e:	2330      	movs	r3, #48	@ 0x30
 8002280:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8002282:	2330      	movs	r3, #48	@ 0x30
 8002284:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2201      	movs	r2, #1
 8002292:	4619      	mov	r1, r3
 8002294:	480f      	ldr	r0, [pc, #60]	@ (80022d4 <MX_RTC_Init+0xac>)
 8002296:	f001 fea6 	bl	8003fe6 <HAL_RTC_SetTime>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80022a0:	f000 f8ba 	bl	8002418 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022a4:	2301      	movs	r3, #1
 80022a6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022a8:	2301      	movs	r3, #1
 80022aa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022b4:	463b      	mov	r3, r7
 80022b6:	2201      	movs	r2, #1
 80022b8:	4619      	mov	r1, r3
 80022ba:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <MX_RTC_Init+0xac>)
 80022bc:	f001 ff2d 	bl	800411a <HAL_RTC_SetDate>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80022c6:	f000 f8a7 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000004c 	.word	0x2000004c
 80022d8:	40002800 	.word	0x40002800

080022dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022e2:	4a18      	ldr	r2, [pc, #96]	@ (8002344 <MX_SPI1_Init+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <MX_SPI1_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800230e:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <MX_SPI1_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <MX_SPI1_Init+0x64>)
 8002328:	220a      	movs	r2, #10
 800232a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	@ (8002340 <MX_SPI1_Init+0x64>)
 800232e:	f002 f819 	bl	8004364 <HAL_SPI_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002338:	f000 f86e 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000006c 	.word	0x2000006c
 8002344:	40013000 	.word	0x40013000

08002348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
 800235c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <MX_GPIO_Init+0xc4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a29      	ldr	r2, [pc, #164]	@ (800240c <MX_GPIO_Init+0xc4>)
 8002368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b27      	ldr	r3, [pc, #156]	@ (800240c <MX_GPIO_Init+0xc4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	4b23      	ldr	r3, [pc, #140]	@ (800240c <MX_GPIO_Init+0xc4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a22      	ldr	r2, [pc, #136]	@ (800240c <MX_GPIO_Init+0xc4>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <MX_GPIO_Init+0xc4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <MX_GPIO_Init+0xc4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a1b      	ldr	r2, [pc, #108]	@ (800240c <MX_GPIO_Init+0xc4>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <MX_GPIO_Init+0xc4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80023b8:	4815      	ldr	r0, [pc, #84]	@ (8002410 <MX_GPIO_Init+0xc8>)
 80023ba:	f000 fc49 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	4814      	ldr	r0, [pc, #80]	@ (8002414 <MX_GPIO_Init+0xcc>)
 80023c4:	f000 fc44 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 80023c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 030c 	add.w	r3, r7, #12
 80023de:	4619      	mov	r1, r3
 80023e0:	480b      	ldr	r0, [pc, #44]	@ (8002410 <MX_GPIO_Init+0xc8>)
 80023e2:	f000 faa1 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80023e6:	2340      	movs	r3, #64	@ 0x40
 80023e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	4619      	mov	r1, r3
 80023fc:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_GPIO_Init+0xcc>)
 80023fe:	f000 fa93 	bl	8002928 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <Error_Handler+0x8>

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_MspInit+0x4c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a0f      	ldr	r2, [pc, #60]	@ (8002470 <HAL_MspInit+0x4c>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <HAL_MspInit+0x4c>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_MspInit+0x4c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_MspInit+0x4c>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_MspInit+0x4c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002462:	2007      	movs	r0, #7
 8002464:	f000 fa2c 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b09a      	sub	sp, #104	@ 0x68
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	225c      	movs	r2, #92	@ 0x5c
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fa15 	bl	80048b4 <memset>
  if(hrtc->Instance==RTC)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a0c      	ldr	r2, [pc, #48]	@ (80024c0 <HAL_RTC_MspInit+0x4c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d111      	bne.n	80024b8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002494:	2320      	movs	r3, #32
 8002496:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800249c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fd24 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80024ae:	f7ff ffb3 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <HAL_RTC_MspInit+0x50>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024b8:	bf00      	nop
 80024ba:	3768      	adds	r7, #104	@ 0x68
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40002800 	.word	0x40002800
 80024c4:	42470e3c 	.word	0x42470e3c

080024c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	@ (800254c <HAL_SPI_MspInit+0x84>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12b      	bne.n	8002542 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <HAL_SPI_MspInit+0x88>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <HAL_SPI_MspInit+0x88>)
 80024f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_SPI_MspInit+0x88>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_SPI_MspInit+0x88>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <HAL_SPI_MspInit+0x88>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	@ 0x30
 8002516:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_SPI_MspInit+0x88>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002522:	23e0      	movs	r3, #224	@ 0xe0
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002532:	2305      	movs	r3, #5
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	@ (8002554 <HAL_SPI_MspInit+0x8c>)
 800253e:	f000 f9f3 	bl	8002928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	@ 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40013000 	.word	0x40013000
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <NMI_Handler+0x4>

08002560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <MemManage_Handler+0x4>

08002570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <UsageFault_Handler+0x4>

08002580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ae:	f000 f891 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480d      	ldr	r0, [pc, #52]	@ (8002618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e2:	490e      	ldr	r1, [pc, #56]	@ (800261c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002606:	f7ff ffd7 	bl	80025b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f002 f95b 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7ff fd75 	bl	80020fc <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002620:	08007f00 	.word	0x08007f00
  ldr r2, =_sbss
 8002624:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002628:	200000c8 	.word	0x200000c8

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>
	...

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	@ (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f931 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	2000      	movs	r0, #0
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fede 	bl	8002424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f93b 	bl	800290e <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 f911 	bl	80028d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	@ (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000018 	.word	0x20000018
 80026cc:	20000020 	.word	0x20000020
 80026d0:	2000001c 	.word	0x2000001c

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000020 	.word	0x20000020
 80026f8:	200000c4 	.word	0x200000c4

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200000c4 	.word	0x200000c4

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000020 	.word	0x20000020

0800275c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a8:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <__NVIC_GetPriorityGrouping+0x18>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0307 	and.w	r3, r3, #7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	@ (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	@ (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	@ 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	@ 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff8e 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff47 	bl	800275c <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff5c 	bl	80027a4 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff8e 	bl	8002814 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffb0 	bl	800287c <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	@ 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e165      	b.n	8002c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	f040 8154 	bne.w	8002c0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d005      	beq.n	800297a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	2b02      	cmp	r3, #2
 8002978:	d130      	bne.n	80029dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 0201 	and.w	r2, r3, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d017      	beq.n	8002a18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d123      	bne.n	8002a6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80ae 	beq.w	8002c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <HAL_GPIO_Init+0x300>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c28 <HAL_GPIO_Init+0x300>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b5a      	ldr	r3, [pc, #360]	@ (8002c28 <HAL_GPIO_Init+0x300>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aca:	4a58      	ldr	r2, [pc, #352]	@ (8002c2c <HAL_GPIO_Init+0x304>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c30 <HAL_GPIO_Init+0x308>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d025      	beq.n	8002b42 <HAL_GPIO_Init+0x21a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4e      	ldr	r2, [pc, #312]	@ (8002c34 <HAL_GPIO_Init+0x30c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <HAL_GPIO_Init+0x216>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	@ (8002c38 <HAL_GPIO_Init+0x310>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d019      	beq.n	8002b3a <HAL_GPIO_Init+0x212>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	@ (8002c3c <HAL_GPIO_Init+0x314>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x20e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4b      	ldr	r2, [pc, #300]	@ (8002c40 <HAL_GPIO_Init+0x318>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00d      	beq.n	8002b32 <HAL_GPIO_Init+0x20a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4a      	ldr	r2, [pc, #296]	@ (8002c44 <HAL_GPIO_Init+0x31c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x206>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a49      	ldr	r2, [pc, #292]	@ (8002c48 <HAL_GPIO_Init+0x320>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_GPIO_Init+0x202>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e00c      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b2a:	2307      	movs	r3, #7
 8002b2c:	e00a      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b2e:	2305      	movs	r3, #5
 8002b30:	e008      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b32:	2304      	movs	r3, #4
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x21c>
 8002b42:	2300      	movs	r3, #0
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b54:	4935      	ldr	r1, [pc, #212]	@ (8002c2c <HAL_GPIO_Init+0x304>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b62:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b86:	4a31      	ldr	r2, [pc, #196]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb0:	4a26      	ldr	r2, [pc, #152]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb6:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bda:	4a1c      	ldr	r2, [pc, #112]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c04:	4a11      	ldr	r2, [pc, #68]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b0f      	cmp	r3, #15
 8002c14:	f67f ae96 	bls.w	8002944 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	@ 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40021400 	.word	0x40021400
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	619a      	str	r2, [r3, #24]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	4a1f      	ldr	r2, [pc, #124]	@ (8002d14 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <HAL_PWREx_EnableOverDrive+0x94>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb0:	f7ff fd24 	bl	80026fc <HAL_GetTick>
 8002cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cb6:	e009      	b.n	8002ccc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb8:	f7ff fd20 	bl	80026fc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cc6:	d901      	bls.n	8002ccc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e01f      	b.n	8002d0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ccc:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce0:	f7ff fd0c 	bl	80026fc <HAL_GetTick>
 8002ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ce6:	e009      	b.n	8002cfc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ce8:	f7ff fd08 	bl	80026fc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cf6:	d901      	bls.n	8002cfc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e007      	b.n	8002d0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	420e0040 	.word	0x420e0040
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	420e0044 	.word	0x420e0044

08002d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0cc      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b68      	ldr	r3, [pc, #416]	@ (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d90c      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b65      	ldr	r3, [pc, #404]	@ (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d044      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d119      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e06f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e067      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b37      	ldr	r3, [pc, #220]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4934      	ldr	r1, [pc, #208]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e14:	f7ff fc72 	bl	80026fc <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7ff fc6e 	bl	80026fc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e04f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d20c      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 fb4b 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fbd2 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023c00 	.word	0x40023c00
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08007ee0 	.word	0x08007ee0
 8002ee8:	20000018 	.word	0x20000018
 8002eec:	2000001c 	.word	0x2000001c

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d010      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f28:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f2e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f36:	496c      	ldr	r1, [pc, #432]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f46:	2301      	movs	r3, #1
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002f56:	4b64      	ldr	r3, [pc, #400]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f5c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	4960      	ldr	r1, [pc, #384]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002f74:	2301      	movs	r3, #1
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f84:	4b58      	ldr	r3, [pc, #352]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4955      	ldr	r1, [pc, #340]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d017      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fc0:	4b49      	ldr	r3, [pc, #292]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	4946      	ldr	r1, [pc, #280]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002fec:	2301      	movs	r3, #1
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 808a 	beq.w	8003112 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4a38      	ldr	r2, [pc, #224]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	@ 0x40
 800300e:	4b36      	ldr	r3, [pc, #216]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800301a:	4b34      	ldr	r3, [pc, #208]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a33      	ldr	r2, [pc, #204]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003026:	f7ff fb69 	bl	80026fc <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7ff fb65 	bl	80026fc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e278      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003040:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800304c:	4b26      	ldr	r3, [pc, #152]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003054:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02f      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	429a      	cmp	r2, r3
 8003068:	d028      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800306a:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003072:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800307a:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003080:	4a19      	ldr	r2, [pc, #100]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003086:	4b18      	ldr	r3, [pc, #96]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d114      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003092:	f7ff fb33 	bl	80026fc <HAL_GetTick>
 8003096:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7ff fb2f 	bl	80026fc <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e240      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ee      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030c8:	d114      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80030da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030de:	4902      	ldr	r1, [pc, #8]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
 80030e4:	e00c      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40007000 	.word	0x40007000
 80030f0:	42470e40 	.word	0x42470e40
 80030f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a49      	ldr	r2, [pc, #292]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030fe:	6093      	str	r3, [r2, #8]
 8003100:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003102:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	4944      	ldr	r1, [pc, #272]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800310e:	4313      	orrs	r3, r2
 8003110:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003124:	4b3f      	ldr	r3, [pc, #252]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003126:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003134:	4b3a      	ldr	r3, [pc, #232]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800313a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	4937      	ldr	r1, [pc, #220]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003156:	4b32      	ldr	r3, [pc, #200]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003164:	492e      	ldr	r1, [pc, #184]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d011      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003178:	4b29      	ldr	r3, [pc, #164]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800317e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	4926      	ldr	r1, [pc, #152]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003196:	d101      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003198:	2301      	movs	r3, #1
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80031a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	491a      	ldr	r1, [pc, #104]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80031ca:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d8:	4911      	ldr	r1, [pc, #68]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80031ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d005      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031fc:	f040 80ff 	bne.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003206:	f7ff fa79 	bl	80026fc <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800320c:	e00e      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800320e:	f7ff fa75 	bl	80026fc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d907      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e188      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003220:	40023800 	.word	0x40023800
 8003224:	424711e0 	.word	0x424711e0
 8003228:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800322c:	4b7e      	ldr	r3, [pc, #504]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ea      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003254:	2b00      	cmp	r3, #0
 8003256:	d028      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d124      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003260:	4b71      	ldr	r3, [pc, #452]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	3301      	adds	r3, #1
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003272:	4b6d      	ldr	r3, [pc, #436]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003278:	0e1b      	lsrs	r3, r3, #24
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	431a      	orrs	r2, r3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	3b01      	subs	r3, #1
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	4961      	ldr	r1, [pc, #388]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d035      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d4:	d130      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032d6:	4b54      	ldr	r3, [pc, #336]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ee:	0f1b      	lsrs	r3, r3, #28
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	019b      	lsls	r3, r3, #6
 8003300:	431a      	orrs	r2, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	3b01      	subs	r3, #1
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	071b      	lsls	r3, r3, #28
 8003318:	4943      	ldr	r1, [pc, #268]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003320:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003326:	f023 021f 	bic.w	r2, r3, #31
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	493d      	ldr	r1, [pc, #244]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d029      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800334c:	d124      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800334e:	4b36      	ldr	r3, [pc, #216]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	3301      	adds	r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003360:	4b31      	ldr	r3, [pc, #196]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003366:	0f1b      	lsrs	r3, r3, #28
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	019b      	lsls	r3, r3, #6
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	071b      	lsls	r3, r3, #28
 8003390:	4925      	ldr	r1, [pc, #148]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d016      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	071b      	lsls	r3, r3, #28
 80033ca:	4917      	ldr	r1, [pc, #92]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033d2:	4b16      	ldr	r3, [pc, #88]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d8:	f7ff f990 	bl	80026fc <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033e0:	f7ff f98c 	bl	80026fc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e09f      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	2b01      	cmp	r3, #1
 8003402:	f040 8095 	bne.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800340c:	f7ff f976 	bl	80026fc <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003412:	e00f      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003414:	f7ff f972 	bl	80026fc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d908      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e085      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	42470068 	.word	0x42470068
 8003430:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003434:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800343c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003440:	d0e8      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02b      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003466:	2b00      	cmp	r3, #0
 8003468:	d127      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800346a:	4b34      	ldr	r3, [pc, #208]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	3301      	adds	r3, #1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	4928      	ldr	r1, [pc, #160]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034a0:	4b26      	ldr	r3, [pc, #152]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	3b01      	subs	r3, #1
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	4922      	ldr	r1, [pc, #136]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01d      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ce:	d118      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034d0:	4b1a      	ldr	r3, [pc, #104]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d6:	0e1b      	lsrs	r3, r3, #24
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	019b      	lsls	r3, r3, #6
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	3b01      	subs	r3, #1
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	4910      	ldr	r1, [pc, #64]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003502:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003508:	f7ff f8f8 	bl	80026fc <HAL_GetTick>
 800350c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003510:	f7ff f8f4 	bl	80026fc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e007      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800352a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800352e:	d1ef      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3730      	adds	r7, #48	@ 0x30
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	42470070 	.word	0x42470070

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b0ae      	sub	sp, #184	@ 0xb8
 800354a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4bcb      	ldr	r3, [pc, #812]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b0c      	cmp	r3, #12
 8003574:	f200 8206 	bhi.w	8003984 <HAL_RCC_GetSysClockFreq+0x440>
 8003578:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_RCC_GetSysClockFreq+0x3c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035b5 	.word	0x080035b5
 8003584:	08003985 	.word	0x08003985
 8003588:	08003985 	.word	0x08003985
 800358c:	08003985 	.word	0x08003985
 8003590:	080035bd 	.word	0x080035bd
 8003594:	08003985 	.word	0x08003985
 8003598:	08003985 	.word	0x08003985
 800359c:	08003985 	.word	0x08003985
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	08003985 	.word	0x08003985
 80035a8:	08003985 	.word	0x08003985
 80035ac:	08003985 	.word	0x08003985
 80035b0:	080037b5 	.word	0x080037b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b4:	4bb9      	ldr	r3, [pc, #740]	@ (800389c <HAL_RCC_GetSysClockFreq+0x358>)
 80035b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80035ba:	e1e7      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4bb8      	ldr	r3, [pc, #736]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035c2:	e1e3      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4bb4      	ldr	r3, [pc, #720]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d071      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4bae      	ldr	r3, [pc, #696]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003614:	0150      	lsls	r0, r2, #5
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4621      	mov	r1, r4
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003620:	4629      	mov	r1, r5
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003634:	4649      	mov	r1, r9
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363e:	4641      	mov	r1, r8
 8003640:	018a      	lsls	r2, r1, #6
 8003642:	4641      	mov	r1, r8
 8003644:	1a51      	subs	r1, r2, r1
 8003646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003648:	4649      	mov	r1, r9
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800365c:	4649      	mov	r1, r9
 800365e:	00cb      	lsls	r3, r1, #3
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003666:	4641      	mov	r1, r8
 8003668:	00ca      	lsls	r2, r1, #3
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	4603      	mov	r3, r0
 8003670:	4622      	mov	r2, r4
 8003672:	189b      	adds	r3, r3, r2
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
 8003676:	462b      	mov	r3, r5
 8003678:	460a      	mov	r2, r1
 800367a:	eb42 0303 	adc.w	r3, r2, r3
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800368c:	4629      	mov	r1, r5
 800368e:	024b      	lsls	r3, r1, #9
 8003690:	4621      	mov	r1, r4
 8003692:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003696:	4621      	mov	r1, r4
 8003698:	024a      	lsls	r2, r1, #9
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80036b0:	f7fd f8ae 	bl	8000810 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036be:	e067      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c0:	4b75      	ldr	r3, [pc, #468]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80036d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036da:	2300      	movs	r3, #0
 80036dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80036e2:	4622      	mov	r2, r4
 80036e4:	462b      	mov	r3, r5
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	0159      	lsls	r1, r3, #5
 80036f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f4:	0150      	lsls	r0, r2, #5
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4621      	mov	r1, r4
 80036fc:	1a51      	subs	r1, r2, r1
 80036fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003700:	4629      	mov	r1, r5
 8003702:	eb63 0301 	sbc.w	r3, r3, r1
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003714:	4649      	mov	r1, r9
 8003716:	018b      	lsls	r3, r1, #6
 8003718:	4641      	mov	r1, r8
 800371a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371e:	4641      	mov	r1, r8
 8003720:	018a      	lsls	r2, r1, #6
 8003722:	4641      	mov	r1, r8
 8003724:	ebb2 0a01 	subs.w	sl, r2, r1
 8003728:	4649      	mov	r1, r9
 800372a:	eb63 0b01 	sbc.w	fp, r3, r1
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800373a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800373e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003742:	4692      	mov	sl, r2
 8003744:	469b      	mov	fp, r3
 8003746:	4623      	mov	r3, r4
 8003748:	eb1a 0303 	adds.w	r3, sl, r3
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	462b      	mov	r3, r5
 8003750:	eb4b 0303 	adc.w	r3, fp, r3
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003778:	2200      	movs	r2, #0
 800377a:	673b      	str	r3, [r7, #112]	@ 0x70
 800377c:	677a      	str	r2, [r7, #116]	@ 0x74
 800377e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003782:	f7fd f845 	bl	8000810 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4613      	mov	r3, r2
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003790:	4b41      	ldr	r3, [pc, #260]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80037a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037b2:	e0eb      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b38      	ldr	r3, [pc, #224]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c0:	4b35      	ldr	r3, [pc, #212]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d06b      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037cc:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	2200      	movs	r2, #0
 80037d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	663b      	str	r3, [r7, #96]	@ 0x60
 80037e0:	2300      	movs	r3, #0
 80037e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0159      	lsls	r1, r3, #5
 80037f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fa:	0150      	lsls	r0, r2, #5
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4621      	mov	r1, r4
 8003802:	1a51      	subs	r1, r2, r1
 8003804:	61b9      	str	r1, [r7, #24]
 8003806:	4629      	mov	r1, r5
 8003808:	eb63 0301 	sbc.w	r3, r3, r1
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800381a:	4659      	mov	r1, fp
 800381c:	018b      	lsls	r3, r1, #6
 800381e:	4651      	mov	r1, sl
 8003820:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003824:	4651      	mov	r1, sl
 8003826:	018a      	lsls	r2, r1, #6
 8003828:	4651      	mov	r1, sl
 800382a:	ebb2 0801 	subs.w	r8, r2, r1
 800382e:	4659      	mov	r1, fp
 8003830:	eb63 0901 	sbc.w	r9, r3, r1
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003848:	4690      	mov	r8, r2
 800384a:	4699      	mov	r9, r3
 800384c:	4623      	mov	r3, r4
 800384e:	eb18 0303 	adds.w	r3, r8, r3
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	462b      	mov	r3, r5
 8003856:	eb49 0303 	adc.w	r3, r9, r3
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003868:	4629      	mov	r1, r5
 800386a:	024b      	lsls	r3, r1, #9
 800386c:	4621      	mov	r1, r4
 800386e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003872:	4621      	mov	r1, r4
 8003874:	024a      	lsls	r2, r1, #9
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800387e:	2200      	movs	r2, #0
 8003880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003882:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003888:	f7fc ffc2 	bl	8000810 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003896:	e065      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x420>
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a4:	4b3d      	ldr	r3, [pc, #244]	@ (800399c <HAL_RCC_GetSysClockFreq+0x458>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	2200      	movs	r2, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	4611      	mov	r1, r2
 80038b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b6:	2300      	movs	r3, #0
 80038b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d0:	0150      	lsls	r0, r2, #5
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4641      	mov	r1, r8
 80038d8:	1a51      	subs	r1, r2, r1
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	4649      	mov	r1, r9
 80038de:	eb63 0301 	sbc.w	r3, r3, r1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038f0:	4659      	mov	r1, fp
 80038f2:	018b      	lsls	r3, r1, #6
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fa:	4651      	mov	r1, sl
 80038fc:	018a      	lsls	r2, r1, #6
 80038fe:	4651      	mov	r1, sl
 8003900:	1a54      	subs	r4, r2, r1
 8003902:	4659      	mov	r1, fp
 8003904:	eb63 0501 	sbc.w	r5, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	464b      	mov	r3, r9
 8003924:	eb45 0303 	adc.w	r3, r5, r3
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003936:	4629      	mov	r1, r5
 8003938:	028b      	lsls	r3, r1, #10
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003940:	4621      	mov	r1, r4
 8003942:	028a      	lsls	r2, r1, #10
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800394c:	2200      	movs	r2, #0
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003950:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003952:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003956:	f7fc ff5b 	bl	8000810 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4613      	mov	r3, r2
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003964:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <HAL_RCC_GetSysClockFreq+0x458>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0f1b      	lsrs	r3, r3, #28
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003982:	e003      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800398a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003990:	4618      	mov	r0, r3
 8003992:	37b8      	adds	r7, #184	@ 0xb8
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	00f42400 	.word	0x00f42400

080039a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e28d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8083 	beq.w	8003aca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039c4:	4b94      	ldr	r3, [pc, #592]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d019      	beq.n	8003a04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039d0:	4b91      	ldr	r3, [pc, #580]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e8:	d00c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d112      	bne.n	8003a1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b88      	ldr	r3, [pc, #544]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b84      	ldr	r3, [pc, #528]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x124>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d157      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e25a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x90>
 8003a26:	4b7c      	ldr	r3, [pc, #496]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xcc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0xb4>
 8003a3e:	4b76      	ldr	r3, [pc, #472]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b73      	ldr	r3, [pc, #460]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a72      	ldr	r2, [pc, #456]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xcc>
 8003a58:	4b6f      	ldr	r3, [pc, #444]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b6c      	ldr	r3, [pc, #432]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6b      	ldr	r2, [pc, #428]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fe40 	bl	80026fc <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fe3c 	bl	80026fc <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e21f      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xdc>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fe2c 	bl	80026fc <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fe28 	bl	80026fc <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	@ 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e20b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	4b57      	ldr	r3, [pc, #348]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x104>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d06f      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ad6:	4b50      	ldr	r3, [pc, #320]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aee:	4b4a      	ldr	r3, [pc, #296]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b44      	ldr	r3, [pc, #272]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x186>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1d3      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4937      	ldr	r1, [pc, #220]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b34      	ldr	r3, [pc, #208]	@ (8003c1c <HAL_RCC_OscConfig+0x278>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fe fdd5 	bl	80026fc <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fe fdd1 	bl	80026fc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1b4      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2b      	ldr	r3, [pc, #172]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4925      	ldr	r1, [pc, #148]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <HAL_RCC_OscConfig+0x278>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe fdb4 	bl	80026fc <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fe fdb0 	bl	80026fc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e193      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d036      	beq.n	8003c30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fd94 	bl	80026fc <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fd90 	bl	80026fc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e173      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x234>
 8003bf6:	e01b      	b.n	8003c30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_OscConfig+0x27c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fd7d 	bl	80026fc <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	e00e      	b.n	8003c24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fe fd79 	bl	80026fc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d907      	bls.n	8003c24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e15c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	42470000 	.word	0x42470000
 8003c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	4b8a      	ldr	r3, [pc, #552]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ea      	bne.n	8003c06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8097 	beq.w	8003d6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b83      	ldr	r3, [pc, #524]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b7f      	ldr	r3, [pc, #508]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	4a7e      	ldr	r2, [pc, #504]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b79      	ldr	r3, [pc, #484]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b76      	ldr	r3, [pc, #472]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a75      	ldr	r2, [pc, #468]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fe fd39 	bl	80026fc <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fe fd35 	bl	80026fc <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e118      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x31e>
 8003cb4:	4b66      	ldr	r3, [pc, #408]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb8:	4a65      	ldr	r2, [pc, #404]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x358>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x340>
 8003cca:	4b61      	ldr	r3, [pc, #388]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a60      	ldr	r2, [pc, #384]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a5d      	ldr	r2, [pc, #372]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0x358>
 8003ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	4a59      	ldr	r2, [pc, #356]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf0:	4b57      	ldr	r3, [pc, #348]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf4:	4a56      	ldr	r2, [pc, #344]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe fcfa 	bl	80026fc <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fcf6 	bl	80026fc <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0d7      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	4b4b      	ldr	r3, [pc, #300]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RCC_OscConfig+0x368>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe fce4 	bl	80026fc <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe fce0 	bl	80026fc <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0c1      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4e:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ee      	bne.n	8003d38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	4a3a      	ldr	r2, [pc, #232]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80ad 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d76:	4b36      	ldr	r3, [pc, #216]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d060      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d145      	bne.n	8003e16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b33      	ldr	r3, [pc, #204]	@ (8003e58 <HAL_RCC_OscConfig+0x4b4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fcb4 	bl	80026fc <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fcb0 	bl	80026fc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e093      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	491b      	ldr	r1, [pc, #108]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x4b4>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fe fc85 	bl	80026fc <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fe fc81 	bl	80026fc <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e064      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e08:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x452>
 8003e14:	e05c      	b.n	8003ed0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <HAL_RCC_OscConfig+0x4b4>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fc6e 	bl	80026fc <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe fc6a 	bl	80026fc <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e04d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x480>
 8003e42:	e045      	b.n	8003ed0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_RCC_OscConfig+0x538>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d030      	beq.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d129      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d122      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d119      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10f      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800

08003ee0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e073      	b.n	8003fde <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7f5b      	ldrb	r3, [r3, #29]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fe fab4 	bl	8002474 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d055      	beq.n	8003fcc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	22ca      	movs	r2, #202	@ 0xca
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2253      	movs	r2, #83	@ 0x53
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f99d 	bl	8004270 <RTC_EnterInitMode>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d12c      	bne.n	8003f9a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f52:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6899      	ldr	r1, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6919      	ldr	r1, [r3, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	041a      	lsls	r2, r3, #16
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f9a4 	bl	80042de <RTC_ExitInitMode>
 8003f96:	4603      	mov	r3, r0
 8003f98:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d110      	bne.n	8003fc2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	22ff      	movs	r2, #255	@ 0xff
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fca:	e001      	b.n	8003fd0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fe6:	b590      	push	{r4, r7, lr}
 8003fe8:	b087      	sub	sp, #28
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	7f1b      	ldrb	r3, [r3, #28]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_RTC_SetTime+0x1c>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e087      	b.n	8004112 <HAL_RTC_SetTime+0x12c>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2202      	movs	r2, #2
 800400c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d126      	bne.n	8004062 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f97b 	bl	8004328 <RTC_ByteToBcd2>
 8004032:	4603      	mov	r3, r0
 8004034:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f974 	bl	8004328 <RTC_ByteToBcd2>
 8004040:	4603      	mov	r3, r0
 8004042:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004044:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f96c 	bl	8004328 <RTC_ByteToBcd2>
 8004050:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004052:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	78db      	ldrb	r3, [r3, #3]
 800405a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e018      	b.n	8004094 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004082:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004088:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	78db      	ldrb	r3, [r3, #3]
 800408e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	22ca      	movs	r2, #202	@ 0xca
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2253      	movs	r2, #83	@ 0x53
 80040a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f8e3 	bl	8004270 <RTC_EnterInitMode>
 80040aa:	4603      	mov	r3, r0
 80040ac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d120      	bne.n	80040f6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80040be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8f6 	bl	80042de <RTC_ExitInitMode>
 80040f2:	4603      	mov	r3, r0
 80040f4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	22ff      	movs	r2, #255	@ 0xff
 8004108:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]

  return status;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
}
 8004112:	4618      	mov	r0, r3
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd90      	pop	{r4, r7, pc}

0800411a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800411a:	b590      	push	{r4, r7, lr}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	7f1b      	ldrb	r3, [r3, #28]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_RTC_SetDate+0x1c>
 8004132:	2302      	movs	r3, #2
 8004134:	e071      	b.n	800421a <HAL_RTC_SetDate+0x100>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2202      	movs	r2, #2
 8004140:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10e      	bne.n	8004166 <HAL_RTC_SetDate+0x4c>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	f023 0310 	bic.w	r3, r3, #16
 800415c:	b2db      	uxtb	r3, r3
 800415e:	330a      	adds	r3, #10
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11c      	bne.n	80041a6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	78db      	ldrb	r3, [r3, #3]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f8d9 	bl	8004328 <RTC_ByteToBcd2>
 8004176:	4603      	mov	r3, r0
 8004178:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f8d2 	bl	8004328 <RTC_ByteToBcd2>
 8004184:	4603      	mov	r3, r0
 8004186:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004188:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	789b      	ldrb	r3, [r3, #2]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f8ca 	bl	8004328 <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004196:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e00e      	b.n	80041c4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	78db      	ldrb	r3, [r3, #3]
 80041aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041b2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	22ca      	movs	r2, #202	@ 0xca
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2253      	movs	r2, #83	@ 0x53
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f84b 	bl	8004270 <RTC_EnterInitMode>
 80041da:	4603      	mov	r3, r0
 80041dc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f872 	bl	80042de <RTC_ExitInitMode>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	22ff      	movs	r2, #255	@ 0xff
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]

  return status;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
}
 800421a:	4618      	mov	r0, r3
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd90      	pop	{r4, r7, pc}
	...

08004224 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0d      	ldr	r2, [pc, #52]	@ (800426c <HAL_RTC_WaitForSynchro+0x48>)
 8004236:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004238:	f7fe fa60 	bl	80026fc <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800423e:	e009      	b.n	8004254 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004240:	f7fe fa5c 	bl	80026fc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800424e:	d901      	bls.n	8004254 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e007      	b.n	8004264 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ee      	beq.n	8004240 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	00017f5f 	.word	0x00017f5f

08004270 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d122      	bne.n	80042d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800429c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800429e:	f7fe fa2d 	bl	80026fc <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042a4:	e00c      	b.n	80042c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042a6:	f7fe fa29 	bl	80026fc <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042b4:	d904      	bls.n	80042c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <RTC_EnterInitMode+0x64>
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d1e8      	bne.n	80042a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff8b 	bl	8004224 <HAL_RTC_WaitForSynchro>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2204      	movs	r2, #4
 8004318:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004336:	e005      	b.n	8004344 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	3b0a      	subs	r3, #10
 8004342:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b09      	cmp	r3, #9
 8004348:	d8f6      	bhi.n	8004338 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	b2da      	uxtb	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	4313      	orrs	r3, r2
 8004356:	b2db      	uxtb	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07b      	b.n	800446e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004386:	d009      	beq.n	800439c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	61da      	str	r2, [r3, #28]
 800438e:	e005      	b.n	800439c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe f886 	bl	80024c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004420:	ea42 0103 	orr.w	r1, r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0104 	and.w	r1, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	f003 0210 	and.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800445c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b088      	sub	sp, #32
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_SPI_Transmit+0x22>
 8004494:	2302      	movs	r3, #2
 8004496:	e12d      	b.n	80046f4 <HAL_SPI_Transmit+0x27e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a0:	f7fe f92c 	bl	80026fc <HAL_GetTick>
 80044a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044ba:	e116      	b.n	80046ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SPI_Transmit+0x52>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044cc:	e10d      	b.n	80046ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004514:	d10f      	bne.n	8004536 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d007      	beq.n	8004554 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d14f      	bne.n	80045fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_SPI_Transmit+0xf6>
 8004566:	8afb      	ldrh	r3, [r7, #22]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d142      	bne.n	80045f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004590:	e02f      	b.n	80045f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d112      	bne.n	80045c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	881a      	ldrh	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045c4:	e015      	b.n	80045f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c6:	f7fe f899 	bl	80026fc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d803      	bhi.n	80045de <HAL_SPI_Transmit+0x168>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d102      	bne.n	80045e4 <HAL_SPI_Transmit+0x16e>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045f0:	e07b      	b.n	80046ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ca      	bne.n	8004592 <HAL_SPI_Transmit+0x11c>
 80045fc:	e050      	b.n	80046a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_SPI_Transmit+0x196>
 8004606:	8afb      	ldrh	r3, [r7, #22]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d144      	bne.n	8004696 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004632:	e030      	b.n	8004696 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d113      	bne.n	800466a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	7812      	ldrb	r2, [r2, #0]
 800464e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004668:	e015      	b.n	8004696 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800466a:	f7fe f847 	bl	80026fc <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d803      	bhi.n	8004682 <HAL_SPI_Transmit+0x20c>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d102      	bne.n	8004688 <HAL_SPI_Transmit+0x212>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004694:	e029      	b.n	80046ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1c9      	bne.n	8004634 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8b1 	bl	800480c <SPI_EndRxTxTransaction>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e003      	b.n	80046ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800470c:	f7fd fff6 	bl	80026fc <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4413      	add	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800471c:	f7fd ffee 	bl	80026fc <HAL_GetTick>
 8004720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004722:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	015b      	lsls	r3, r3, #5
 8004728:	0d1b      	lsrs	r3, r3, #20
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004732:	e054      	b.n	80047de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d050      	beq.n	80047de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800473c:	f7fd ffde 	bl	80026fc <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	429a      	cmp	r2, r3
 800474a:	d902      	bls.n	8004752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13d      	bne.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800476a:	d111      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004774:	d004      	beq.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477e:	d107      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004798:	d10f      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e017      	b.n	80047fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3b01      	subs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d19b      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000018 	.word	0x20000018

0800480c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2201      	movs	r2, #1
 8004820:	2102      	movs	r1, #2
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff6a 	bl	80046fc <SPI_WaitFlagStateUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e032      	b.n	80048a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800483e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <SPI_EndRxTxTransaction+0xa0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <SPI_EndRxTxTransaction+0xa4>)
 8004844:	fba2 2303 	umull	r2, r3, r2, r3
 8004848:	0d5b      	lsrs	r3, r3, #21
 800484a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800485c:	d112      	bne.n	8004884 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff47 	bl	80046fc <SPI_WaitFlagStateUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e00f      	b.n	80048a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3b01      	subs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b80      	cmp	r3, #128	@ 0x80
 800489c:	d0f2      	beq.n	8004884 <SPI_EndRxTxTransaction+0x78>
 800489e:	e000      	b.n	80048a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80048a0:	bf00      	nop
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000018 	.word	0x20000018
 80048b0:	165e9f81 	.word	0x165e9f81

080048b4 <memset>:
 80048b4:	4402      	add	r2, r0
 80048b6:	4603      	mov	r3, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d100      	bne.n	80048be <memset+0xa>
 80048bc:	4770      	bx	lr
 80048be:	f803 1b01 	strb.w	r1, [r3], #1
 80048c2:	e7f9      	b.n	80048b8 <memset+0x4>

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4d0d      	ldr	r5, [pc, #52]	@ (80048fc <__libc_init_array+0x38>)
 80048c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004900 <__libc_init_array+0x3c>)
 80048ca:	1b64      	subs	r4, r4, r5
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	2600      	movs	r6, #0
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004904 <__libc_init_array+0x40>)
 80048d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004908 <__libc_init_array+0x44>)
 80048d8:	f000 f818 	bl	800490c <_init>
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	2600      	movs	r6, #0
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	08007ef8 	.word	0x08007ef8
 8004900:	08007ef8 	.word	0x08007ef8
 8004904:	08007ef8 	.word	0x08007ef8
 8004908:	08007efc 	.word	0x08007efc

0800490c <_init>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr

08004918 <_fini>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr
